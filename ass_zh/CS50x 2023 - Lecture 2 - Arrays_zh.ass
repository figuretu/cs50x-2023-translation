[Script Info]
; Script generated by Aegisub 3.2.2
; http://www.aegisub.org/
Title: Default Aegisub file
ScriptType: v4.00+
WrapStyle: 0
ScaledBorderAndShadow: yes
YCbCr Matrix: None

[Aegisub Project Garbage]
Audio File: ../video/CS50x 2023 - Lecture 1 - C.mp4
Video Zoom Percent: 0.250000
Active Line: 2132

[V4+ Styles]
Format: Name, Fontname, Fontsize, PrimaryColour, SecondaryColour, OutlineColour, BackColour, Bold, Italic, Underline, StrikeOut, ScaleX, ScaleY, Spacing, Angle, BorderStyle, Outline, Shadow, Alignment, MarginL, MarginR, MarginV, Encoding
Style: chinese,思源黑体 CN Medium,60,&H00FFFFFF,&H000000FF,&H00000000,&H00000000,0,0,0,0,100,100,0,0,1,2,1,2,10,10,10,1
Style: english,Arial,35,&H00FFFFFF,&H000000FF,&H00000000,&H00000000,0,0,0,0,100,100,0,0,1,2,1,2,10,10,15,1
Style: Default,Arial,10,&H00FFFFFF,&H000000FF,&H00000000,&H00000000,0,0,0,0,100,100,0,0,1,1,0,2,10,10,10,1
Style: annotation,思源黑体 CN Medium,50,&H00FFFFFF,&H000000FF,&H00000000,&H00000000,0,0,0,0,100,100,0,0,1,2,1,2,10,10,10,1

[Events]
Format: Layer, Start, End, Style, Name, MarginL, MarginR, MarginV, Effect, Text
Dialogue: 0,0:00:02.98,0:00:06.46,english,,0,0,0,,[MUSIC PLAYING]
Dialogue: 0,0:01:12.60,0:01:13.59,english,,0,0,0,,DAVID MALAN: All right.
Dialogue: 0,0:01:12.60,0:01:13.59,chinese,,0,0,0,,好的。
Dialogue: 0,0:01:13.59,0:01:24.12,english,,0,0,0,,This is CS50, and this is week 2 wherein we're going to take a look at a lower level at how things work, and indeed, among the goals of the course is this bottom-up understanding
Dialogue: 0,0:01:13.59,0:01:24.12,chinese,,0,0,0,,这里是 CS50，这是第二周，我们将从较低的层次来了解事物是如何工作的，事实上，本课程的目标之一就是这种自下而上的理解
Dialogue: 0,0:01:24.12,0:01:29.92,english,,0,0,0,,so that in a couple of weeks' time, even a few years' time, when you encounter some new technology, you'll be able to think back hopefully
Dialogue: 0,0:01:24.12,0:01:29.92,chinese,,0,0,0,,这样，几周后，甚至几年后，当你遇到一些新技术时，你就能回想起来，希望
Dialogue: 0,0:01:29.92,0:01:36.06,english,,0,0,0,,on some of this week's and this is basic building blocks and primitives and really just deduce how tomorrow's technologies work.
Dialogue: 0,0:01:29.92,0:01:36.06,chinese,,0,0,0,,在本周的一些基本构件和基元的基础上，真正推导出未来技术的工作原理。
Dialogue: 0,0:01:36.06,0:01:41.38,english,,0,0,0,,But along the way, it's going to seem-- it's going to be a little hard, perhaps, to see the forest for the trees, so to speak.
Dialogue: 0,0:01:36.06,0:01:41.38,chinese,,0,0,0,,但一路走来，我们会发现--也许，要做到 "只见树木，不见森林 "有点困难。
Dialogue: 0,0:01:41.38,0:01:44.78,english,,0,0,0,,And so the goal at the end of the day still is going to be problem-solving.
Dialogue: 0,0:01:41.38,0:01:44.78,chinese,,0,0,0,,因此，最终的目标仍然是解决问题。
Dialogue: 0,0:01:44.78,0:01:53.28,english,,0,0,0,,And so we thought we'd begin today with a look at some of the problems we'll talk about or solve this coming week, and for that, we have some brave volunteers who have already come up.
Dialogue: 0,0:01:44.78,0:01:53.28,chinese,,0,0,0,,为此，我们请来了一些勇敢的志愿者，他们已经站了出来。
Dialogue: 0,0:01:53.28,0:01:58.32,english,,0,0,0,,If we could turn on some dramatic lighting and meet today's volunteers.
Dialogue: 0,0:01:53.28,0:01:58.32,chinese,,0,0,0,,如果我们能打开一些戏剧性的灯光，见见今天的志愿者。
Dialogue: 0,0:01:58.32,0:02:00.43,english,,0,0,0,,So on my left here, we have--
Dialogue: 0,0:01:58.32,0:02:00.43,chinese,,0,0,0,,在我的左边
Dialogue: 0,0:02:00.43,0:02:00.93,english,,0,0,0,,ALEX: Hi.
Dialogue: 0,0:02:00.93,0:02:01.96,english,,0,0,0,,My name is Alex.
Dialogue: 0,0:02:00.93,0:02:01.96,chinese,,0,0,0,,我叫亚历克斯。
Dialogue: 0,0:02:01.96,0:02:05.34,english,,0,0,0,,I'm a first-year at the college and I'm from Chapel Hill, North Carolina.
Dialogue: 0,0:02:01.96,0:02:05.34,chinese,,0,0,0,,我是学院的一年级学生，来自北卡罗来纳州的教堂山。
Dialogue: 0,0:02:05.34,0:02:07.08,english,,0,0,0,,DAVID MALAN: Welcome to Alex.
Dialogue: 0,0:02:05.34,0:02:07.08,chinese,,0,0,0,,戴维-马兰：欢迎亚历克斯。
Dialogue: 0,0:02:07.08,0:02:09.18,english,,0,0,0,,And to Alex's right.
Dialogue: 0,0:02:07.08,0:02:09.18,chinese,,0,0,0,,在亚历克斯的右边
Dialogue: 0,0:02:09.18,0:02:10.05,english,,0,0,0,,SARAH: I'm Sarah.
Dialogue: 0,0:02:09.18,0:02:10.05,chinese,,0,0,0,,我是莎拉
Dialogue: 0,0:02:10.05,0:02:13.23,english,,0,0,0,,I'm from Toronto, Canada, and I'm also a first-year student at the college.
Dialogue: 0,0:02:10.05,0:02:13.23,chinese,,0,0,0,,我来自加拿大多伦多，也是学院的一年级学生。
Dialogue: 0,0:02:13.23,0:02:14.18,english,,0,0,0,,DAVID MALAN: Wonderful.
Dialogue: 0,0:02:13.23,0:02:14.18,chinese,,0,0,0,,太棒了。
Dialogue: 0,0:02:14.18,0:02:15.86,english,,0,0,0,,Well, welcome to both Alex and Sarah.
Dialogue: 0,0:02:14.18,0:02:15.86,chinese,,0,0,0,,欢迎亚历克斯和莎拉。
Dialogue: 0,0:02:15.86,0:02:25.65,english,,0,0,0,,So one of the problems you'll perhaps solve this week for problem set 2 is to analyze the reading level of a body of text, whether someone reads at a first grade level, second grade level, third grade
Dialogue: 0,0:02:15.86,0:02:25.65,chinese,,0,0,0,,因此，你们本周要解决的问题集 2 中的一个问题是分析文章的阅读水平，即某人的阅读水平是一年级水平、二年级水平还是三年级水平。
Dialogue: 0,0:02:25.65,0:02:28.57,english,,0,0,0,,level, all the way up to 12 or 13 or beyond.
Dialogue: 0,0:02:25.65,0:02:28.57,chinese,,0,0,0,,级，一直到 12、13 级或更高。
Dialogue: 0,0:02:28.57,0:02:36.75,english,,0,0,0,,What you perhaps never quite thought about, certainly in terms of code, like how you would analyze some text, some book and figure out what reading level is it at.
Dialogue: 0,0:02:28.57,0:02:36.75,chinese,,0,0,0,,你可能从来没有想过，当然是在代码方面，比如你如何分析一些文本、书籍，并找出它的阅读水平。
Dialogue: 0,0:02:36.75,0:02:40.33,english,,0,0,0,,And yet, surely our teachers growing up knew or had an intuitive sense of this.
Dialogue: 0,0:02:36.75,0:02:40.33,chinese,,0,0,0,,然而，我们成长过程中的老师肯定知道或直观地感受到了这一点。
Dialogue: 0,0:02:40.33,0:02:42.45,english,,0,0,0,,So let's consider some sample text.
Dialogue: 0,0:02:40.33,0:02:42.45,chinese,,0,0,0,,让我们来看看一些示例文本。
Dialogue: 0,0:02:42.45,0:02:45.96,english,,0,0,0,,For instance, Alex, what have you been reading lately?
Dialogue: 0,0:02:42.45,0:02:45.96,chinese,,0,0,0,,比如，亚历克斯，你最近在读什么书？
Dialogue: 0,0:02:45.96,0:02:52.50,english,,0,0,0,,ALEX: One fish, two fish, red fish, blue fish.
Dialogue: 0,0:02:45.96,0:02:52.50,chinese,,0,0,0,,一条鱼、两条鱼、红鱼、蓝鱼
Dialogue: 0,0:02:52.50,0:02:53.46,english,,0,0,0,,DAVID MALAN: Wonderful.
Dialogue: 0,0:02:52.50,0:02:53.46,chinese,,0,0,0,,太棒了。
Dialogue: 0,0:02:53.46,0:02:58.89,english,,0,0,0,,So given that, what grade level would you say Alex is currently reading at?
Dialogue: 0,0:02:53.46,0:02:58.89,chinese,,0,0,0,,那么，您认为亚历克斯目前的阅读水平在哪个年级？
Dialogue: 0,0:02:58.89,0:03:01.50,english,,0,0,0,,Feel free to just shout it out.
Dialogue: 0,0:02:58.89,0:03:01.50,chinese,,0,0,0,,请随时大声喊出来。
Dialogue: 0,0:03:01.50,0:03:02.73,english,,0,0,0,,First, first?
Dialogue: 0,0:03:01.50,0:03:02.73,chinese,,0,0,0,,第一个，第一个？
Dialogue: 0,0:03:02.73,0:03:10.41,english,,0,0,0,,So indeed, you'll see this week, if you run your code on Alex's text, it actually turns out he reads below a first grade reading level.
Dialogue: 0,0:03:02.73,0:03:10.41,chinese,,0,0,0,,因此，本周你会看到，如果你在亚历克斯的文本上运行代码，实际上会发现他的阅读水平低于一年级。
Dialogue: 0,0:03:10.41,0:03:12.40,english,,0,0,0,,But why might that be?
Dialogue: 0,0:03:10.41,0:03:12.40,chinese,,0,0,0,,但为什么会这样呢？
Dialogue: 0,0:03:12.40,0:03:19.02,english,,0,0,0,,What might your intuition be for why we've accused Alex of reading at this level?
Dialogue: 0,0:03:12.40,0:03:19.02,chinese,,0,0,0,,你对我们指责亚历克斯的阅读水平的直觉是什么？
Dialogue: 0,0:03:19.02,0:03:20.99,english,,0,0,0,,Feel free to shout out.
Dialogue: 0,0:03:19.02,0:03:20.99,chinese,,0,0,0,,请随时大声喊出来。
Dialogue: 0,0:03:20.99,0:03:21.49,english,,0,0,0,,Yeah.
Dialogue: 0,0:03:21.49,0:03:24.52,english,,0,0,0,,So very few syllables, short words, short sentences.
Dialogue: 0,0:03:21.49,0:03:24.52,chinese,,0,0,0,,因此，音节很少，单词很短，句子也很短。
Dialogue: 0,0:03:24.52,0:03:30.37,english,,0,0,0,,And so there's some heuristics, perhaps, we can infer from that short text, that that probably means that it's best for younger children.
Dialogue: 0,0:03:24.52,0:03:30.37,chinese,,0,0,0,,因此，我们或许可以从这篇短文中推断出一些启发式的结论，那就是这篇短文最适合年龄较小的儿童阅读。
Dialogue: 0,0:03:30.37,0:03:33.37,english,,0,0,0,,Now Sarah, by contrast, what have you been reading?
Dialogue: 0,0:03:30.37,0:03:33.37,chinese,,0,0,0,,相比之下，萨拉，你都读了些什么？
Dialogue: 0,0:03:33.37,0:03:35.47,english,,0,0,0,,SARAH: Mr. And Mrs. Dursley of Number.
Dialogue: 0,0:03:33.37,0:03:35.47,chinese,,0,0,0,,杜斯利先生和杜斯利夫人
Dialogue: 0,0:03:35.47,0:03:41.05,english,,0,0,0,,Four Privet Drive were proud to say that they were perfectly normal, thank you very much.
Dialogue: 0,0:03:35.47,0:03:41.05,chinese,,0,0,0,,Four Privet Drive 很自豪地说，他们完全正常，非常感谢。
Dialogue: 0,0:03:41.05,0:03:47.95,english,,0,0,0,,They were the last people you'd expect to be involved in anything strange or mysterious because they just didn't hold with much nonsense.
Dialogue: 0,0:03:41.05,0:03:47.95,chinese,,0,0,0,,他们是你最不可能想到会卷入任何奇怪或神秘事件的人，因为他们不喜欢胡言乱语。
Dialogue: 0,0:03:47.95,0:03:48.91,english,,0,0,0,,DAVID MALAN: All right.
Dialogue: 0,0:03:47.95,0:03:48.91,chinese,,0,0,0,,好的。
Dialogue: 0,0:03:48.91,0:03:55.23,english,,0,0,0,,Now irrespective of what grade you were in when you might have read that text, what grade level to Sarah seemed to be reading at?
Dialogue: 0,0:03:48.91,0:03:55.23,chinese,,0,0,0,,不管你读这篇课文时是哪个年级，莎拉的阅读水平似乎在哪个年级？
Dialogue: 0,0:03:55.23,0:03:57.57,english,,0,0,0,,So eighth grade, second grade.
Dialogue: 0,0:03:55.23,0:03:57.57,chinese,,0,0,0,,所以是八年级，二年级。
Dialogue: 0,0:03:57.57,0:03:58.08,english,,0,0,0,,OK.
Dialogue: 0,0:03:58.08,0:04:03.24,english,,0,0,0,,So hearing a bit of everything, so with that, at least according to code, it would actually be seventh grade.
Dialogue: 0,0:03:58.08,0:04:03.24,chinese,,0,0,0,,因此，我什么都听过一些，所以，至少根据代码，实际上应该是七年级。
Dialogue: 0,0:04:03.24,0:04:05.13,english,,0,0,0,,And what might the intuition there be?
Dialogue: 0,0:04:03.24,0:04:05.13,chinese,,0,0,0,,直觉是什么？
Dialogue: 0,0:04:05.13,0:04:09.91,english,,0,0,0,,Why is that a higher grade level even though we might disagree exactly which grade it is?
Dialogue: 0,0:04:05.13,0:04:09.91,chinese,,0,0,0,,尽管我们可能不同意到底是哪个年级，但为什么说这是一个更高的年级呢？
Dialogue: 0,0:04:09.91,0:04:11.25,english,,0,0,0,,AUDIENCE: Complicated sentences.
Dialogue: 0,0:04:09.91,0:04:11.25,chinese,,0,0,0,,听众：复杂的句子。
Dialogue: 0,0:04:11.25,0:04:12.00,english,,0,0,0,,DAVID MALAN: Yeah.
Dialogue: 0,0:04:11.25,0:04:12.00,chinese,,0,0,0,,是的
Dialogue: 0,0:04:12.00,0:04:14.21,english,,0,0,0,,So complicated sentences, longer sentences.
Dialogue: 0,0:04:12.00,0:04:14.21,chinese,,0,0,0,,所以句子复杂，句子较长。
Dialogue: 0,0:04:14.21,0:04:18.51,english,,0,0,0,,So indeed a lot more words were being spoken by Sarah because there was so much more there on the page.
Dialogue: 0,0:04:14.21,0:04:18.51,chinese,,0,0,0,,因此，莎拉确实说了更多的话，因为纸上的内容太多了。
Dialogue: 0,0:04:18.51,0:04:26.91,english,,0,0,0,,So we'll translate these ideas this coming week in problem set 2, if you tackle this one, through code so that you can ultimately infer things of these quantitatively.
Dialogue: 0,0:04:18.51,0:04:26.91,chinese,,0,0,0,,因此，我们将在下周的问题集 2（如果你解决了这个问题集 2）中，通过代码来转化这些想法，这样你就能最终定量地推断出这些东西。
Dialogue: 0,0:04:26.91,0:04:29.19,english,,0,0,0,,But to do so, we're going to have to understand text.
Dialogue: 0,0:04:26.91,0:04:29.19,chinese,,0,0,0,,但要做到这一点，我们必须理解文本。
Dialogue: 0,0:04:29.19,0:04:32.61,english,,0,0,0,,So let's first thank our volunteers and then we'll dive in to that lower level.
Dialogue: 0,0:04:29.19,0:04:32.61,chinese,,0,0,0,,因此，让我们首先感谢我们的志愿者，然后再进入下一层。
Dialogue: 0,0:04:32.61,0:04:35.33,english,,0,0,0,,[APPLAUSE]
Dialogue: 0,0:04:39.91,0:04:40.60,english,,0,0,0,,Sorry.
Dialogue: 0,0:04:40.60,0:04:41.49,english,,0,0,0,,You can keep those.
Dialogue: 0,0:04:40.60,0:04:41.49,chinese,,0,0,0,,你可以留着这些。
Dialogue: 0,0:04:41.49,0:04:42.22,english,,0,0,0,,SARAH: Oh, OK.
Dialogue: 0,0:04:41.49,0:04:42.22,chinese,,0,0,0,,哦，好的
Dialogue: 0,0:04:42.22,0:04:43.18,english,,0,0,0,,DAVID MALAN: All right.
Dialogue: 0,0:04:42.22,0:04:43.18,chinese,,0,0,0,,好的。
Dialogue: 0,0:04:43.18,0:04:50.21,english,,0,0,0,,So besides that, let's consider one other body of text perhaps that you might see this week, which is namely a little something like this.
Dialogue: 0,0:04:43.18,0:04:50.21,chinese,,0,0,0,,除此以外，让我们考虑一下本周可能会看到的其他文字，即类似这样的文字。
Dialogue: 0,0:04:50.21,0:04:53.86,english,,0,0,0,,What I have here on the screen is what we'll start calling today ciphertext.
Dialogue: 0,0:04:50.21,0:04:53.86,chinese,,0,0,0,,我在屏幕上看到的就是我们今天开始所说的密码文本。
Dialogue: 0,0:04:53.86,0:04:56.53,english,,0,0,0,,It's the result of encrypting some piece of information.
Dialogue: 0,0:04:53.86,0:04:56.53,chinese,,0,0,0,,它是对某些信息进行加密的结果。
Dialogue: 0,0:04:56.53,0:05:00.90,english,,0,0,0,,And encryption, or more generally, the art and science of cryptography is all around us.
Dialogue: 0,0:04:56.53,0:05:00.90,chinese,,0,0,0,,而加密，或者更笼统地说，密码学的艺术和科学就在我们身边。
Dialogue: 0,0:05:00.90,0:05:03.70,english,,0,0,0,,It's what you're using on the web, on your phones, with your banks.
Dialogue: 0,0:05:00.90,0:05:03.70,chinese,,0,0,0,,您在网络、手机和银行中使用的都是它。
Dialogue: 0,0:05:03.70,0:05:07.00,english,,0,0,0,,And anything that tries to keep data secure is using encryption.
Dialogue: 0,0:05:03.70,0:05:07.00,chinese,,0,0,0,,任何试图保证数据安全的东西都在使用加密技术。
Dialogue: 0,0:05:07.00,0:05:11.14,english,,0,0,0,,But there's going to be different levels of encryption-- strong encryption, weak encryption.
Dialogue: 0,0:05:07.00,0:05:11.14,chinese,,0,0,0,,但加密的级别会有所不同，有强加密，也有弱加密。
Dialogue: 0,0:05:11.14,0:05:22.03,english,,0,0,0,,And what you see here on the screen isn't all that strong, but we'll see later today how we might decrypt this and actually reveal what the plaintext is that corresponds to that ciphertext.
Dialogue: 0,0:05:11.14,0:05:22.03,chinese,,0,0,0,,你在屏幕上看到的并不是那么强大，但我们今天稍后会看到如何解密，并揭示与密码文本相对应的明文是什么。
Dialogue: 0,0:05:22.03,0:05:26.19,english,,0,0,0,,But in order to do so, we have to start taking off some training wheels, so to speak.
Dialogue: 0,0:05:22.03,0:05:26.19,chinese,,0,0,0,,但是，为了做到这一点，我们必须开始摘掉一些训练用的轮子。
Dialogue: 0,0:05:26.19,0:05:32.23,english,,0,0,0,,And believe it or not, even though your time would see this past week for the first time, probably, might have been rather in the weeds.
Dialogue: 0,0:05:26.19,0:05:32.23,chinese,,0,0,0,,信不信由你，即使你的时间会看到过去一周的第一次，可能，可能已经相当在杂草丛生。
Dialogue: 0,0:05:32.23,0:05:39.76,english,,0,0,0,,And much more complicated seemingly than C, it turns out that along the way, we have been providing and we'll continue to provide certain training wheels.
Dialogue: 0,0:05:32.23,0:05:39.76,chinese,,0,0,0,,而比 C 更复杂的是，我们一直在提供并将继续提供某些训练车轮。
Dialogue: 0,0:05:39.76,0:05:49.73,english,,0,0,0,,For instance, the CS50 Library is one of them, and even some of the explanations we give of topics for now in these early weeks will be somewhat simplified-- abstracted away, if you will.
Dialogue: 0,0:05:39.76,0:05:49.73,chinese,,0,0,0,,例如，CS50 图书馆就是其中之一，甚至在最初几周，我们暂时对一些主题的解释也会有所简化--可以说是抽象化了。
Dialogue: 0,0:05:49.73,0:05:58.21,english,,0,0,0,,But the goal ultimately is for you to understand each and every one of those details so that after CS50, you really can stand on your own and understand and wrap your mind
Dialogue: 0,0:05:49.73,0:05:58.21,chinese,,0,0,0,,但是，我们的最终目标是让您了解其中的每一个细节，这样在 CS50 之后，您就能真正自立于世，并理解和融会贯通。
Dialogue: 0,0:05:58.21,0:06:01.04,english,,0,0,0,,around any future technologies as well.
Dialogue: 0,0:05:58.21,0:06:01.04,chinese,,0,0,0,,以及未来的任何技术。
Dialogue: 0,0:06:01.04,0:06:06.11,english,,0,0,0,,So let's consider first the very first program with which we began last week, which was this one.
Dialogue: 0,0:06:01.04,0:06:06.11,chinese,,0,0,0,,因此，让我们先来看看上周开始的第一个项目，也就是这个项目。
Dialogue: 0,0:06:06.11,0:06:14.89,english,,0,0,0,,So "hello, world" in C. At the end of the day, it was really the printf function that was doing the interesting part of the work, but there was a lot of technical stuff above and below it.
Dialogue: 0,0:06:06.11,0:06:14.89,chinese,,0,0,0,,说到底，printf 函数才是真正有趣的部分，但在它之上和之下还有很多技术性的东西。
Dialogue: 0,0:06:14.89,0:06:21.73,english,,0,0,0,,The curly braces, the parentheses, words like void and include, and then of course, the angled brackets and more.
Dialogue: 0,0:06:14.89,0:06:21.73,chinese,,0,0,0,,大括号、小括号、void 和 include 等单词，当然还有斜括号等等。
Dialogue: 0,0:06:21.73,0:06:30.19,english,,0,0,0,,But at the end of the day, we needed to convert that source code in C to machine code, the 0's and 1's in binary that the computer understood.
Dialogue: 0,0:06:21.73,0:06:30.19,chinese,,0,0,0,,但最终，我们需要将 C 语言源代码转换为机器代码，即计算机能够理解的二进制 0 和 1。
Dialogue: 0,0:06:30.19,0:06:33.70,english,,0,0,0,,And to do that, of course, we ran-- we compiled the code.
Dialogue: 0,0:06:30.19,0:06:33.70,chinese,,0,0,0,,当然，为了做到这一点，我们运行 -- 我们编译了代码。
Dialogue: 0,0:06:33.70,0:06:37.40,english,,0,0,0,,We ran make and then we were able to actually run that code there.
Dialogue: 0,0:06:33.70,0:06:37.40,chinese,,0,0,0,,我们运行了 make，然后就能在那里实际运行代码了。
Dialogue: 0,0:06:37.40,0:06:44.51,english,,0,0,0,,So let me actually go over here to VS Code and really quickly recreate that hello.c pretty much by transcribing the same.
Dialogue: 0,0:06:37.40,0:06:44.51,chinese,,0,0,0,,因此，让我到 VS 代码中快速重新创建 hello.c。
Dialogue: 0,0:06:44.51,0:06:51.97,english,,0,0,0,,So I might have here include stdio.h, int main void.
Dialogue: 0,0:06:44.51,0:06:51.97,chinese,,0,0,0,,因此，我可能在这里包含 stdio.h，int main void。
Dialogue: 0,0:06:51.97,0:06:57.43,english,,0,0,0,,And then in here, I had quite simply, hello, comma, world with my backslash, endquotes, and more.
Dialogue: 0,0:06:51.97,0:06:57.43,chinese,,0,0,0,,然后在这里，我很简单地输入了 "你好"、"逗号"、"世界"、"反斜线"、"尾引号 "等等。
Dialogue: 0,0:06:57.43,0:07:01.69,english,,0,0,0,,Now last time, to compile this, I indeed ran make hello, followed by Enter.
Dialogue: 0,0:06:57.43,0:07:01.69,chinese,,0,0,0,,上次编译时，我确实运行了 make hello，然后是 Enter。
Dialogue: 0,0:07:01.69,0:07:03.86,english,,0,0,0,,Hopefully you see no errors and that's a good thing.
Dialogue: 0,0:07:01.69,0:07:03.86,chinese,,0,0,0,,希望您没有看到任何错误，这是一件好事。
Dialogue: 0,0:07:03.86,0:07:07.84,english,,0,0,0,,And if you do dot, slash, hello, you see, in fact, the results of that program.
Dialogue: 0,0:07:03.86,0:07:07.84,chinese,,0,0,0,,如果你进行点、斜线、你好的操作，你就会看到该程序的结果。
Dialogue: 0,0:07:07.84,0:07:12.95,english,,0,0,0,,But it turns out that make is not actually a compiler as I alluded to last week.
Dialogue: 0,0:07:07.84,0:07:12.95,chinese,,0,0,0,,但事实证明，正如我上周提到的，make 实际上并不是一个编译器。
Dialogue: 0,0:07:12.95,0:07:19.03,english,,0,0,0,,It's a program that clearly makes your program, but it itself just automates the process of using an actual compiler.
Dialogue: 0,0:07:12.95,0:07:19.03,chinese,,0,0,0,,它是一个程序，可以清晰地编译你的程序，但它本身只是将使用实际编译器的过程自动化。
Dialogue: 0,0:07:19.03,0:07:27.64,english,,0,0,0,,And there's lots of different compilers out there, and the one that it's actually using underneath the hood is a little something called Clang for C Language.
Dialogue: 0,0:07:19.03,0:07:27.64,chinese,,0,0,0,,现在有很多不同的编译器，而它实际上使用的是一种叫做 Clang 的 C 语言编译器。
Dialogue: 0,0:07:27.64,0:07:30.19,english,,0,0,0,,And Clang is a pretty popular compiler nowadays.
Dialogue: 0,0:07:27.64,0:07:30.19,chinese,,0,0,0,,而 Clang 是时下相当流行的编译器。
Dialogue: 0,0:07:30.19,0:07:40.31,english,,0,0,0,,There's another one that's been around for ages called GCC, but these are just specific names for types of compilers that different people, different companies, different groups have actually created.
Dialogue: 0,0:07:30.19,0:07:40.31,chinese,,0,0,0,,还有一种已经存在很久的编译器叫 GCC，但这些只是不同的人、不同的公司、不同的团体所创建的编译器类型的特定名称。
Dialogue: 0,0:07:40.31,0:07:50.70,english,,0,0,0,,But if you use in week 1 a compiler yourself manually, you have to understand a little more about what's going on because it's even more cryptic than what just make alone.
Dialogue: 0,0:07:40.31,0:07:50.70,chinese,,0,0,0,,但是，如果你在第 1 周手动使用编译器，你就必须多了解一些情况，因为它比单独编译更令人费解。
Dialogue: 0,0:07:50.70,0:07:59.36,english,,0,0,0,,So in fact, let me go back to my terminal window here, let me go ahead and clear the screen a little bit and just run really the raw compiler command.
Dialogue: 0,0:07:50.70,0:07:59.36,chinese,,0,0,0,,事实上，让我回到终端窗口，清空一下屏幕，然后运行原始编译器命令。
Dialogue: 0,0:07:59.36,0:08:03.62,english,,0,0,0,,So what make is automating for me let me, actually do this manually for just a moment.
Dialogue: 0,0:07:59.36,0:08:03.62,chinese,,0,0,0,,因此，让我手动操作一下，就能实现自动化。
Dialogue: 0,0:08:03.62,0:08:10.45,english,,0,0,0,,So if I want to compile hello.c into an executable program I can run,
Dialogue: 0,0:08:03.62,0:08:10.45,chinese,,0,0,0,,因此，如果我想将 hello.c 编译成可执行程序，我就可以运行它、
Dialogue: 0,0:08:10.45,0:08:17.11,english,,0,0,0,,I can do this. clang, space, hello.c, and then Enter.
Dialogue: 0,0:08:10.45,0:08:17.11,chinese,,0,0,0,,clang、空格、hello.c，然后回车。
Dialogue: 0,0:08:17.11,0:08:22.01,english,,0,0,0,,And now there's no output, which is a good thing in this case, no errors, but notice this.
Dialogue: 0,0:08:17.11,0:08:22.01,chinese,,0,0,0,,现在没有输出了，在这种情况下，没有错误是件好事，但请注意这一点。
Dialogue: 0,0:08:22.01,0:08:32.14,english,,0,0,0,,If I go ahead and type ls, it turns out there's a file that's been created suddenly in my current folder weirdly called a.out.
Dialogue: 0,0:08:22.01,0:08:32.14,chinese,,0,0,0,,如果我继续输入 ls，就会发现在我的当前文件夹中突然创建了一个文件，文件名很奇怪，叫 a.out。
Dialogue: 0,0:08:32.14,0:08:33.58,english,,0,0,0,,That stands for Assembler Output.
Dialogue: 0,0:08:32.14,0:08:33.58,chinese,,0,0,0,,这代表汇编输出。
Dialogue: 0,0:08:33.58,0:08:39.44,english,,0,0,0,,And long story short, that's actually the default name of a program that's created when you just run Clang by itself.
Dialogue: 0,0:08:33.58,0:08:39.44,chinese,,0,0,0,,长话短说，这其实就是运行 Clang 时创建的程序的默认名称。
Dialogue: 0,0:08:39.44,0:08:44.00,english,,0,0,0,,Now that's a pretty bad name for a program because it doesn't describe what it does.
Dialogue: 0,0:08:39.44,0:08:44.00,chinese,,0,0,0,,现在看来，这个程序的名字很糟糕，因为它无法描述程序的功能。
Dialogue: 0,0:08:44.00,0:08:55.42,english,,0,0,0,,So better would be here to perhaps do, well, instead of a.out, which, yes, still prints hello.world, but isn't really a clearly-named program, it'd be nice to name this hello.
Dialogue: 0,0:08:44.00,0:08:55.42,chinese,,0,0,0,,因此，最好的办法也许是：好吧，不要用 a.out，没错，它仍然打印 hello.world，但并不是一个真正有明确名称的程序，最好给它取名为 hello。
Dialogue: 0,0:08:55.42,0:08:56.24,english,,0,0,0,,So what could I do?
Dialogue: 0,0:08:55.42,0:08:56.24,chinese,,0,0,0,,我能做些什么呢？
Dialogue: 0,0:08:56.24,0:09:01.82,english,,0,0,0,,I could do like we learned last week-- well, I could rename a.out to hello by using Linux's mv command.
Dialogue: 0,0:08:56.24,0:09:01.82,chinese,,0,0,0,,我可以像上周学过的那样--嗯，我可以用 Linux 的 mv 命令把 a.out 重命名为 hello。
Dialogue: 0,0:09:01.82,0:09:04.48,english,,0,0,0,,So I'm going to move a.out to become hello.
Dialogue: 0,0:09:01.82,0:09:04.48,chinese,,0,0,0,,所以，我要把一个.移出来，变成 "你好"。
Dialogue: 0,0:09:04.48,0:09:06.37,english,,0,0,0,,But that, too, seems kind of tedious.
Dialogue: 0,0:09:04.48,0:09:06.37,chinese,,0,0,0,,但这似乎也有点乏味。
Dialogue: 0,0:09:06.37,0:09:07.72,english,,0,0,0,,Now I have three steps.
Dialogue: 0,0:09:06.37,0:09:07.72,chinese,,0,0,0,,现在我有三个步骤。
Dialogue: 0,0:09:07.72,0:09:12.19,english,,0,0,0,,Like write my code, compile my code, and then rename it before I can even run it.
Dialogue: 0,0:09:07.72,0:09:12.19,chinese,,0,0,0,,比如写代码、编译代码，然后在运行之前重命名代码。
Dialogue: 0,0:09:12.19,0:09:13.58,english,,0,0,0,,We can do better than that.
Dialogue: 0,0:09:12.19,0:09:13.58,chinese,,0,0,0,,我们可以做得更好。
Dialogue: 0,0:09:13.58,0:09:20.38,english,,0,0,0,,And so it turns out that certain commands like clang support what we're going to start today calling command line arguments.
Dialogue: 0,0:09:13.58,0:09:20.38,chinese,,0,0,0,,事实证明，某些命令（如 clang）支持我们今天开始所说的命令行参数。
Dialogue: 0,0:09:20.38,0:09:30.40,english,,0,0,0,,A command line argument, unlike an argument to a function, is just an additional word or key phrase that you type after a command at your prompt in your terminal
Dialogue: 0,0:09:20.38,0:09:30.40,chinese,,0,0,0,,与函数参数不同，命令行参数只是在终端提示符下，在命令后键入的一个附加单词或关键短语
Dialogue: 0,0:09:30.40,0:09:33.44,english,,0,0,0,,window that just modifies the behavior of that command.
Dialogue: 0,0:09:30.40,0:09:33.44,chinese,,0,0,0,,窗口，修改该命令的行为。
Dialogue: 0,0:09:33.44,0:09:35.60,english,,0,0,0,,It configures it a little more specifically.
Dialogue: 0,0:09:33.44,0:09:35.60,chinese,,0,0,0,,它的配置更具体一些。
Dialogue: 0,0:09:35.60,0:09:45.22,english,,0,0,0,,So what you're seeing here on the screen is some of a better command with which to run clang so that now I can specify the output of this command per this o.
Dialogue: 0,0:09:35.60,0:09:45.22,chinese,,0,0,0,,因此，你在屏幕上看到的是一个更好的运行 clang 的命令，现在我可以根据这个 o 指定这个命令的输出。
Dialogue: 0,0:09:45.22,0:09:46.61,english,,0,0,0,,So do what I mean by that?
Dialogue: 0,0:09:45.22,0:09:46.61,chinese,,0,0,0,,那么，我的意思是什么呢？
Dialogue: 0,0:09:46.61,0:09:54.95,english,,0,0,0,,Well, let me go ahead and clear my terminal window again and more explicitly type clang -o hello hello.c and then Enter.
Dialogue: 0,0:09:46.61,0:09:54.95,chinese,,0,0,0,,好吧，让我再次清空终端窗口，然后更明确地输入 clang -o hello hello.c，然后回车。
Dialogue: 0,0:09:54.95,0:10:02.86,english,,0,0,0,,Nothing, again, appears to happen, but that's a good thing when you see no errors and now the program I just created is indeed called Hello.
Dialogue: 0,0:09:54.95,0:10:02.86,chinese,,0,0,0,,同样，什么也没有发生，但这是件好事，因为你没有看到任何错误，而且现在我刚刚创建的程序确实叫做 Hello。
Dialogue: 0,0:10:02.86,0:10:07.28,english,,0,0,0,,So it achieves really the same exact effect as make did, but what.
Dialogue: 0,0:10:02.86,0:10:07.28,chinese,,0,0,0,,因此，它所达到的效果确实与 make 所达到的效果完全相同，但又如何呢？
Dialogue: 0,0:10:07.28,0:10:11.07,english,,0,0,0,,I don't have to do with make is type and remember something as long as this command.
Dialogue: 0,0:10:07.28,0:10:11.07,chinese,,0,0,0,,我不需要输入和记住像这条命令这么长的内容。
Dialogue: 0,0:10:11.07,0:10:12.70,english,,0,0,0,,And this, too, is a bit of a white lie.
Dialogue: 0,0:10:11.07,0:10:12.70,chinese,,0,0,0,,这也有点像白色谎言。
Dialogue: 0,0:10:12.70,0:10:22.84,english,,0,0,0,,It turns out, we have preconfigured VS Code in the cloud for you to also use some other features of Clang that would be even more tedious for you to write yourselves.
Dialogue: 0,0:10:12.70,0:10:22.84,chinese,,0,0,0,,原来，我们已经在云中为您预配置了 VS Code，让您也能使用 Clang 的其他一些功能，而这些功能如果由您自己编写会更加繁琐。
Dialogue: 0,0:10:22.84,0:10:28.13,english,,0,0,0,,And so really, this is why we distill this as ultimately just running make.
Dialogue: 0,0:10:22.84,0:10:28.13,chinese,,0,0,0,,因此，这就是为什么我们将其提炼为最终只是运行制造。
Dialogue: 0,0:10:28.13,0:10:37.72,english,,0,0,0,,So let me pause here to see first if there's any questions on what I've done by taking my very first program in C and just now compiling it first with make, but then starting over
Dialogue: 0,0:10:28.13,0:10:37.72,chinese,,0,0,0,,所以，让我在这里暂停一下，先看看大家对我用 C 语言编写的第一个程序有什么疑问，现在先用 make 编译，然后重新开始
Dialogue: 0,0:10:37.72,0:10:46.82,english,,0,0,0,,and now manually compiling it with clang with what we'll call command line arguments. -o, space, hello, and then the name of the file.
Dialogue: 0,0:10:37.72,0:10:46.82,chinese,,0,0,0,,现在用 clang 手动编译，我们称之为命令行参数。-o、空格、hello，然后是文件名。
Dialogue: 0,0:10:46.82,0:10:47.32,english,,0,0,0,,Yeah?
Dialogue: 0,0:10:47.32,0:10:48.78,english,,0,0,0,,AUDIENCE: What is a.out?
Dialogue: 0,0:10:47.32,0:10:48.78,chinese,,0,0,0,,AUDIENCE：什么是.out？
Dialogue: 0,0:10:48.78,0:10:49.53,english,,0,0,0,,DAVID MALAN: Yeah.
Dialogue: 0,0:10:48.78,0:10:49.53,chinese,,0,0,0,,是的
Dialogue: 0,0:10:49.53,0:10:51.87,english,,0,0,0,,So a.out is a historical name.
Dialogue: 0,0:10:49.53,0:10:51.87,chinese,,0,0,0,,因此，a.out 是一个历史名称。
Dialogue: 0,0:10:51.87,0:10:55.24,english,,0,0,0,,It refers to assembler output-- more on that soon.
Dialogue: 0,0:10:51.87,0:10:55.24,chinese,,0,0,0,,它指的是汇编程序的输出--很快会有更多介绍。
Dialogue: 0,0:10:55.24,0:11:02.97,english,,0,0,0,,And it's just the default file name that you get automatically if you just run the compiler on any file so that you have just a standard name for it.
Dialogue: 0,0:10:55.24,0:11:02.97,chinese,,0,0,0,,如果在任何文件上运行编译器，都会自动获得默认的文件名，这样就有了一个标准的文件名。
Dialogue: 0,0:11:02.97,0:11:05.21,english,,0,0,0,,But it's not a very well-named program.
Dialogue: 0,0:11:02.97,0:11:05.21,chinese,,0,0,0,,但这个计划的名字并不好听。
Dialogue: 0,0:11:05.21,0:11:09.88,english,,0,0,0,,Instead of running Microsoft Word on your Mac or PC, it would be like double-clicking on a.out.
Dialogue: 0,0:11:05.21,0:11:09.88,chinese,,0,0,0,,而不是在 Mac 或 PC 上运行 Microsoft Word，就像双击 .out。
Dialogue: 0,0:11:09.88,0:11:17.37,english,,0,0,0,,So instead with these command line arguments, you can customize the output of Clang and call it hello or anything you want.
Dialogue: 0,0:11:09.88,0:11:17.37,chinese,,0,0,0,,因此，有了这些命令行参数，你就可以自定义 Clang 的输出，并将其称为 hello 或任何你想要的名字。
Dialogue: 0,0:11:17.37,0:11:23.02,english,,0,0,0,,Other questions on what I've done here with Clang itself, the compiler?
Dialogue: 0,0:11:17.37,0:11:23.02,chinese,,0,0,0,,关于 Clang 编译器的其他问题？
Dialogue: 0,0:11:23.02,0:11:23.52,english,,0,0,0,,Yeah?
Dialogue: 0,0:11:23.52,0:11:25.51,english,,0,0,0,,AUDIENCE: What is -o?
Dialogue: 0,0:11:23.52,0:11:25.51,chinese,,0,0,0,,听众：什么是-o？
Dialogue: 0,0:11:25.51,0:11:30.50,english,,0,0,0,,DAVID MALAN: So -o-- and you would only know this from reading the manual, taking a class, means output.
Dialogue: 0,0:11:25.51,0:11:30.50,chinese,,0,0,0,,你只有读过手册、上过课才会知道，这意味着输出。
Dialogue: 0,0:11:30.50,0:11:38.68,english,,0,0,0,,So -o means change Clang's output to be a file called hello instead of the default, which is a.out.
Dialogue: 0,0:11:30.50,0:11:38.68,chinese,,0,0,0,,所以 -o 意味着将 Clang 的输出改为名为 hello 的文件，而不是默认的 a.out。
Dialogue: 0,0:11:38.68,0:11:44.81,english,,0,0,0,,And this, too, is, again, a detail you would have to look up on a web page, read the manual, hear someone like me tell you about it.
Dialogue: 0,0:11:38.68,0:11:44.81,chinese,,0,0,0,,这也是一个细节问题，你需要在网页上查找，阅读手册，或者听我这样的人告诉你。
Dialogue: 0,0:11:44.81,0:11:48.89,english,,0,0,0,,And in fact, there's even more than these options, but we'll just scratch the surface here.
Dialogue: 0,0:11:44.81,0:11:48.89,chinese,,0,0,0,,事实上，可供选择的方案远不止这些，但我们在此也只是浅尝辄止。
Dialogue: 0,0:11:48.89,0:11:49.39,english,,0,0,0,,All right.
Dialogue: 0,0:11:49.39,0:11:53.53,english,,0,0,0,,So if we now know this, what more is actually happening underneath the hood?
Dialogue: 0,0:11:49.39,0:11:53.53,chinese,,0,0,0,,如果我们现在知道了这些，那么在引擎盖下面究竟还发生了什么呢？
Dialogue: 0,0:11:53.53,0:12:03.43,english,,0,0,0,,Well, let's take a closer look at not just this version of my code, but my slightly more complicated version last week, which looked a little something like this, wherein
Dialogue: 0,0:11:53.53,0:12:03.43,chinese,,0,0,0,,好吧，让我们仔细看看我的代码，不仅是这个版本，还有上周稍微复杂一点的版本，看起来有点像这样，其中包括
Dialogue: 0,0:12:03.43,0:12:11.81,english,,0,0,0,,I added in some dynamic input from the user so I could say not hello, world to everyone, but hello, David or hello to whoever actually runs this program.
Dialogue: 0,0:12:03.43,0:12:11.81,chinese,,0,0,0,,我添加了一些来自用户的动态输入，这样我就可以不对所有人说 "你好，世界"，而是对实际运行这个程序的人说 "你好，大卫 "或 "你好"。
Dialogue: 0,0:12:11.81,0:12:17.77,english,,0,0,0,,So in fact, let me go ahead and change my code here in VS Code just to match that same code from last week.
Dialogue: 0,0:12:11.81,0:12:17.77,chinese,,0,0,0,,因此，事实上，让我继续在 VS 代码中修改我的代码，以便与上周的代码保持一致。
Dialogue: 0,0:12:17.77,0:12:19.19,english,,0,0,0,,So no new code yet.
Dialogue: 0,0:12:17.77,0:12:19.19,chinese,,0,0,0,,所以还没有新代码。
Dialogue: 0,0:12:19.19,0:12:22.82,english,,0,0,0,,I'm just going to, in a moment, compile it in a slightly different way.
Dialogue: 0,0:12:19.19,0:12:22.82,chinese,,0,0,0,,稍后，我将以稍有不同的方式对其进行编译。
Dialogue: 0,0:12:22.82,0:12:29.02,english,,0,0,0,,So I did last week's string, I think, answer equals string, quote-unquote,
Dialogue: 0,0:12:22.82,0:12:29.02,chinese,,0,0,0,,所以我做了上周的字符串，我想，答案等于字符串，引号-引号、
Dialogue: 0,0:12:29.02,0:12:30.10,english,,0,0,0,,"What's your name?"
Dialogue: 0,0:12:29.02,0:12:30.10,chinese,,0,0,0,,"你叫什么名字？"
Dialogue: 0,0:12:30.10,0:12:31.54,english,,0,0,0,,Just like in Scratch.
Dialogue: 0,0:12:30.10,0:12:31.54,chinese,,0,0,0,,就像在 Scratch 中一样。
Dialogue: 0,0:12:31.54,0:12:37.45,english,,0,0,0,,And then down here, instead of doing world, I initially wrote answer, but that didn't go well.
Dialogue: 0,0:12:31.54,0:12:37.45,chinese,,0,0,0,,然后在下面，我没有做世界，而是开始写答案，但写得并不顺利。
Dialogue: 0,0:12:37.45,0:12:42.94,english,,0,0,0,,What did I ultimately do instead to print out hello, David or hello, so-and-so?
Dialogue: 0,0:12:37.45,0:12:42.94,chinese,,0,0,0,,打印出 "你好，大卫 "或 "你好，某某"，我最终做了什么？
Dialogue: 0,0:12:42.94,0:12:44.72,english,,0,0,0,,Yeah?
Dialogue: 0,0:12:44.72,0:12:45.68,english,,0,0,0,,Sorry, a little louder?
Dialogue: 0,0:12:44.72,0:12:45.68,chinese,,0,0,0,,抱歉，再大点声？
Dialogue: 0,0:12:45.68,0:12:46.43,english,,0,0,0,,AUDIENCE: %s?
Dialogue: 0,0:12:45.68,0:12:46.43,chinese,,0,0,0,,听众：%s？
Dialogue: 0,0:12:46.43,0:12:51.02,english,,0,0,0,,DAVID MALAN: Yeah, so %s, the so-called format code that printf just knows how to deal with.
Dialogue: 0,0:12:46.43,0:12:51.02,chinese,,0,0,0,,DAVID MALAN：是的，所以 %s，也就是 printf 知道如何处理的所谓格式代码。
Dialogue: 0,0:12:51.02,0:12:52.47,english,,0,0,0,,And I had to add one other thing.
Dialogue: 0,0:12:51.02,0:12:52.47,chinese,,0,0,0,,我还得补充一点。
Dialogue: 0,0:12:52.47,0:12:54.85,english,,0,0,0,,Someone else besides %s-- yeah?
Dialogue: 0,0:12:52.47,0:12:54.85,chinese,,0,0,0,,除了 %s 还有别人吗？
Dialogue: 0,0:12:54.85,0:12:56.05,english,,0,0,0,,AUDIENCE: The name of the variable.
Dialogue: 0,0:12:54.85,0:12:56.05,chinese,,0,0,0,,AUDIENCE：变量名称。
Dialogue: 0,0:12:56.05,0:13:00.19,english,,0,0,0,,DAVID MALAN: The name of the variable that I want to plug into that placeholder %s.
Dialogue: 0,0:12:56.05,0:13:00.19,chinese,,0,0,0,,DAVID MALAN：我要插入占位符 %s 的变量名。
Dialogue: 0,0:13:00.19,0:13:01.63,english,,0,0,0,,And in this case, it's answer.
Dialogue: 0,0:13:00.19,0:13:01.63,chinese,,0,0,0,,在这种情况下，它就是答案。
Dialogue: 0,0:13:01.63,0:13:11.56,english,,0,0,0,,Now let me make one refinement only because now we're in week 2 and we're going to start writing more lines of code, even though Scratch called the return value of the ask puzzle piece, answer always.
Dialogue: 0,0:13:01.63,0:13:11.56,chinese,,0,0,0,,现在让我做一个改进，因为我们已经进入了第 2 周，我们将开始编写更多行的代码，尽管 Scratch 总是将问谜题的返回值称为答案。
Dialogue: 0,0:13:11.56,0:13:14.48,english,,0,0,0,,And see, we have full control over what our variables are called.
Dialogue: 0,0:13:11.56,0:13:14.48,chinese,,0,0,0,,瞧，我们可以完全控制变量的名称。
Dialogue: 0,0:13:14.48,0:13:19.87,english,,0,0,0,,And now it's probably good not to just generically always call my variable answer if I'm using get_string.
Dialogue: 0,0:13:14.48,0:13:19.87,chinese,,0,0,0,,现在，如果我使用 get_string，最好不要总是通用地调用我的变量 answer。
Dialogue: 0,0:13:19.87,0:13:21.05,english,,0,0,0,,Let's call it what it is.
Dialogue: 0,0:13:19.87,0:13:21.05,chinese,,0,0,0,,就这么说吧。
Dialogue: 0,0:13:21.05,0:13:23.68,english,,0,0,0,,So this is now just a matter of style, if you will.
Dialogue: 0,0:13:21.05,0:13:23.68,chinese,,0,0,0,,所以，现在这只是一个风格问题。
Dialogue: 0,0:13:23.68,0:13:34.00,english,,0,0,0,,Let me change the variable to be name just so that it's a little clearer to me, to you, to a TF or TA exactly what that variable represents instead of more generically answer.
Dialogue: 0,0:13:23.68,0:13:34.00,chinese,,0,0,0,,让我把变量改成 name，这样我、你、TF 或 TA 就能更清楚地知道这个变量代表什么，而不是更笼统地回答。
Dialogue: 0,0:13:34.00,0:13:41.05,english,,0,0,0,,All right, so that said, let me go down to my terminal window, and last week again, I ran make to compile this exact same program.
Dialogue: 0,0:13:34.00,0:13:41.05,chinese,,0,0,0,,好了，说了这么多，让我回到终端窗口，上周我又运行 make 编译了这个一模一样的程序。
Dialogue: 0,0:13:41.05,0:13:43.27,english,,0,0,0,,Now, though, let me go ahead and just use clang.
Dialogue: 0,0:13:41.05,0:13:43.27,chinese,,0,0,0,,现在，让我直接使用 clang。
Dialogue: 0,0:13:43.27,0:13:45.49,english,,0,0,0,,So clang -o--
Dialogue: 0,0:13:43.27,0:13:45.49,chinese,,0,0,0,,所以哐当
Dialogue: 0,0:13:45.49,0:13:49.33,english,,0,0,0,,I'll still call this version hello-- space, hello.c.
Dialogue: 0,0:13:45.49,0:13:49.33,chinese,,0,0,0,,我还是把这个版本叫做 hello--space，hello.c。
Dialogue: 0,0:13:49.33,0:13:51.08,english,,0,0,0,,So exact same command as before.
Dialogue: 0,0:13:49.33,0:13:51.08,chinese,,0,0,0,,因此，命令与之前的完全相同。
Dialogue: 0,0:13:51.08,0:13:56.33,english,,0,0,0,,The only thing that's different is I've added a couple of more lines of code to get the user's input.
Dialogue: 0,0:13:51.08,0:13:56.33,chinese,,0,0,0,,唯一不同的是，我增加了几行代码来获取用户的输入。
Dialogue: 0,0:13:56.33,0:13:59.96,english,,0,0,0,,Let me hit Enter, and now, darn it, our first error.
Dialogue: 0,0:13:56.33,0:13:59.96,chinese,,0,0,0,,让我按下回车键，现在，该死的，我们的第一个错误。
Dialogue: 0,0:13:59.96,0:14:05.42,english,,0,0,0,,So output from clang and make is not a good thing, and here, we're seeing something particularly cryptic.
Dialogue: 0,0:13:59.96,0:14:05.42,chinese,,0,0,0,,因此，从 clang 和 make 输出并不是一件好事，在这里，我们看到了一些特别隐秘的东西。
Dialogue: 0,0:14:05.42,0:14:13.48,english,,0,0,0,,So something in function 'main--' undefined reference to 'get_string,' string and then linker command failed with exit code 1.
Dialogue: 0,0:14:05.42,0:14:13.48,chinese,,0,0,0,,因此，函数 "main "中出现了对 "get_string "字符串的未定义引用，然后链接器命令失败，退出代码为 1。
Dialogue: 0,0:14:13.48,0:14:22.13,english,,0,0,0,,So there's actually a lot of jargon in there that will tease apart today, but my hint is that clearly my problem's in main, although that's not surprising because there's nothing else going on here.
Dialogue: 0,0:14:13.48,0:14:22.13,chinese,,0,0,0,,因此，实际上有很多专业术语在里面，今天会挑明，但我的提示是，显然我的问题出在主要方面，尽管这并不奇怪，因为这里没有其他事情发生。
Dialogue: 0,0:14:22.13,0:14:26.83,english,,0,0,0,,get_string is an issue, and the issue is that it's an undefined reference.
Dialogue: 0,0:14:22.13,0:14:26.83,chinese,,0,0,0,,get_string 是一个问题，问题在于它是一个未定义的引用。
Dialogue: 0,0:14:26.83,0:14:28.99,english,,0,0,0,,And yet, notice, I was pretty good.
Dialogue: 0,0:14:26.83,0:14:28.99,chinese,,0,0,0,,然而，请注意，我做得很好。
Dialogue: 0,0:14:28.99,0:14:39.07,english,,0,0,0,,I added the CS50 header file and I said last week that that's enough to teach the compiler that functions exist, but the problem is that even though this does, in fact,
Dialogue: 0,0:14:28.99,0:14:39.07,chinese,,0,0,0,,我添加了 CS50 头文件，上周我曾说过，这足以让编译器知道函数的存在，但问题是，即使这样做了，事实上、
Dialogue: 0,0:14:39.07,0:14:51.86,english,,0,0,0,,teach Clang that get_string exists, it is not sufficient information for Clang to go find on the hard drive of the computer the 0's and 1's that actually implement get_string itself.
Dialogue: 0,0:14:39.07,0:14:51.86,chinese,,0,0,0,,虽然 Clang 知道 get_string 的存在，但要它在计算机硬盘上找到真正实现 get_string 本身的 0 和 1 并不足够。
Dialogue: 0,0:14:51.86,0:14:55.33,english,,0,0,0,,So in other words, this include line, per last week, is a little bit of a hint.
Dialogue: 0,0:14:51.86,0:14:55.33,chinese,,0,0,0,,因此，换句话说，按照上周的说法，这句话是一个小小的暗示。
Dialogue: 0,0:14:55.33,0:14:59.56,english,,0,0,0,,It's a teaser to Clang that you're about to see and use this function somewhere.
Dialogue: 0,0:14:55.33,0:14:59.56,chinese,,0,0,0,,这是向 Clang 发出的预告，告诉它你即将在某处看到并使用这个函数。
Dialogue: 0,0:14:59.56,0:15:11.47,english,,0,0,0,,But if you actually want to use the 0's and 1's that CS50 wrote some time ago and bake those into your program so your program actually knows how to get input from the user, well then,
Dialogue: 0,0:14:59.56,0:15:11.47,chinese,,0,0,0,,但是，如果你真的想使用 CS50 很久以前编写的 0 和 1，并将其融入到你的程序中，让你的程序真正知道如何从用户那里获取输入，那就好办了、
Dialogue: 0,0:15:11.47,0:15:15.44,english,,0,0,0,,I'm going to have to go ahead and run a slightly different command.
Dialogue: 0,0:15:11.47,0:15:15.44,chinese,,0,0,0,,我得继续运行一个稍有不同的命令。
Dialogue: 0,0:15:15.44,0:15:16.25,english,,0,0,0,,So let me do this.
Dialogue: 0,0:15:15.44,0:15:16.25,chinese,,0,0,0,,那就让我来吧。
Dialogue: 0,0:15:16.25,0:15:23.02,english,,0,0,0,,Let me clear my terminal window just get rid of that distraction and let me propose now that we run this command instead.
Dialogue: 0,0:15:16.25,0:15:23.02,chinese,,0,0,0,,让我清空终端窗口，以消除干扰，我建议现在运行这条命令。
Dialogue: 0,0:15:23.02,0:15:35.05,english,,0,0,0,,Almost the same as before, clang -o, space, hello, then hello.c, but with one additional command line argument at the end, and this is a -l-- not a number 1.
Dialogue: 0,0:15:23.02,0:15:35.05,chinese,,0,0,0,,几乎和之前一样，clang -o、空格、hello，然后是 hello.c，但最后多了一个命令行参数，是 -l--而不是数字 1。
Dialogue: 0,0:15:35.05,0:15:39.37,english,,0,0,0,,So -lcs with no space in between those two.
Dialogue: 0,0:15:35.05,0:15:39.37,chinese,,0,0,0,,因此，-lcs 中间没有空格。
Dialogue: 0,0:15:39.37,0:15:48.85,english,,0,0,0,,Now the l is going to result in all of those 0's and 1's that actually were in by CS50 being linked into your code, your few lines of code or mine here.
Dialogue: 0,0:15:39.37,0:15:48.85,chinese,,0,0,0,,现在，"升 "将导致 CS50 所输入的所有 0 和 1 被链接到你的代码、你的几行代码或我的代码中。
Dialogue: 0,0:15:48.85,0:15:58.53,english,,0,0,0,,But that's the second step that the compiler requires in order to know how to actually execute and rather compile your code and CS50's.
Dialogue: 0,0:15:48.85,0:15:58.53,chinese,,0,0,0,,但这是编译器需要的第二步，以便知道如何实际执行和编译您的代码和 CS50 的代码。
Dialogue: 0,0:15:58.53,0:16:00.37,english,,0,0,0,,And CS50 is not the only one that does this.
Dialogue: 0,0:15:58.53,0:16:00.37,chinese,,0,0,0,,并不是只有 CS50 才这样做。
Dialogue: 0,0:16:00.37,0:16:10.00,english,,0,0,0,,If you use any third party library in C that doesn't come with the language, you would do -l such and such where whoever-- however they've named their own library.
Dialogue: 0,0:16:00.37,0:16:10.00,chinese,,0,0,0,,如果你在 C 语言中使用任何不自带的第三方库，你可以使用 -l 诸如此类的命令，不管他们给自己的库起了什么名字。
Dialogue: 0,0:16:10.00,0:16:14.29,english,,0,0,0,,But you don't have to do it for built in things like we've been using thus far.
Dialogue: 0,0:16:10.00,0:16:14.29,chinese,,0,0,0,,但你不必像我们迄今为止所使用的那样，为内置设备这样做。
Dialogue: 0,0:16:14.29,0:16:16.09,english,,0,0,0,,All right, so let me go ahead and try this.
Dialogue: 0,0:16:14.29,0:16:16.09,chinese,,0,0,0,,好吧，让我来试试这个。
Dialogue: 0,0:16:16.09,0:16:23.62,english,,0,0,0,,I'll go back to VS Code here, and let me go ahead now and run clang -o hello, then hello.c.
Dialogue: 0,0:16:16.09,0:16:23.62,chinese,,0,0,0,,我将回到 VS 代码，现在让我继续运行 clang -o hello，然后运行 hello.c。
Dialogue: 0,0:16:23.62,0:16:29.59,english,,0,0,0,,And now instead of just hitting Enter, -lcs50 with no space between the l and the cs50, Enter.
Dialogue: 0,0:16:23.62,0:16:29.59,chinese,,0,0,0,,现在不用直接敲回车键，而是敲-lcs50，l 和 cs50 之间不留空格，然后敲回车键。
Dialogue: 0,0:16:29.59,0:16:33.31,english,,0,0,0,,Now nothing bad happens, and now I can do ./hello.
Dialogue: 0,0:16:29.59,0:16:33.31,chinese,,0,0,0,,现在不会发生任何不好的事情，我也可以做 ./hello。
Dialogue: 0,0:16:33.31,0:16:34.18,english,,0,0,0,,What's your name?
Dialogue: 0,0:16:33.31,0:16:34.18,chinese,,0,0,0,,你叫什么名字？
Dialogue: 0,0:16:34.18,0:16:37.63,english,,0,0,0,,I'll type in David, Enter, and now we see hello, David.
Dialogue: 0,0:16:34.18,0:16:37.63,chinese,,0,0,0,,我输入大卫，回车，现在我们看到你好，大卫。
Dialogue: 0,0:16:37.63,0:16:46.46,english,,0,0,0,,Now honestly, this is where we're really getting into the weeds, and now this is taking-- this is really just adding nuisance to the process of compiling and running your code.
Dialogue: 0,0:16:37.63,0:16:46.46,chinese,,0,0,0,,老实说，这才是我们真正要解决的问题，现在这只会给编译和运行代码的过程增加麻烦。
Dialogue: 0,0:16:46.46,0:16:55.24,english,,0,0,0,,And so the reality is, even though this is indeed what is happening, this is why we used last week and we're going to continue using this week onward make because it just
Dialogue: 0,0:16:46.46,0:16:55.24,chinese,,0,0,0,,因此，现实情况是，尽管这确实是正在发生的事情，但这就是为什么我们使用上周，并将继续使用本周的原因，因为它只是
Dialogue: 0,0:16:55.24,0:16:57.13,english,,0,0,0,,automates that whole process for you.
Dialogue: 0,0:16:55.24,0:16:57.13,chinese,,0,0,0,,为您自动完成整个过程。
Dialogue: 0,0:16:57.13,0:17:05.85,english,,0,0,0,,But it's ideal to understand what's going wrong because any of the error messages you saw for problem set 1, any of the error messages you see for the next few weeks probably aren't coming from make,
Dialogue: 0,0:16:57.13,0:17:05.85,chinese,,0,0,0,,但最理想的做法是了解问题出在哪里，因为你在问题集 1 中看到的任何错误信息，以及接下来几周看到的任何错误信息，可能都不是来自 make、
Dialogue: 0,0:17:05.85,0:17:10.78,english,,0,0,0,,they're coming from Clang underneath the hood because make is just automating the process.
Dialogue: 0,0:17:05.85,0:17:10.78,chinese,,0,0,0,,它们来自引擎盖下的 Clang，因为 make 只是在自动执行这一过程。
Dialogue: 0,0:17:10.78,0:17:17.56,english,,0,0,0,,But with make, you literally just write make and then the name of the program, you don't have to worry about any of those command line arguments.
Dialogue: 0,0:17:10.78,0:17:17.56,chinese,,0,0,0,,但使用 make 时，你只需写下 make 和程序名称，而不必担心任何命令行参数。
Dialogue: 0,0:17:17.56,0:17:22.24,english,,0,0,0,,Questions, then, on compiling with dash -lcs50 or anything else?
Dialogue: 0,0:17:17.56,0:17:22.24,chinese,,0,0,0,,那么，对使用 dash -lcs50 或其他方法编译有疑问吗？
Dialogue: 0,0:17:22.24,0:17:23.04,english,,0,0,0,,Yeah?
Dialogue: 0,0:17:23.04,0:17:24.95,english,,0,0,0,,AUDIENCE: What is the benefit of [INAUDIBLE]??
Dialogue: 0,0:17:23.04,0:17:24.95,chinese,,0,0,0,,听众：[听不清]有什么好处？
Dialogue: 0,0:17:24.96,0:17:26.22,english,,0,0,0,,DAVID MALAN: Sorry, what is the benefit of--
Dialogue: 0,0:17:24.96,0:17:26.22,chinese,,0,0,0,,戴维-马兰：对不起，有什么好处？
Dialogue: 0,0:17:26.22,0:17:27.51,english,,0,0,0,,AUDIENCE: Using Clang manually.
Dialogue: 0,0:17:26.22,0:17:27.51,chinese,,0,0,0,,听众：手动使用 Clang
Dialogue: 0,0:17:27.51,0:17:30.00,english,,0,0,0,,DAVID MALAN: What is the benefit of using Clang manually?
Dialogue: 0,0:17:27.51,0:17:30.00,chinese,,0,0,0,,DAVID MALAN：手动使用 Clang 有什么好处？
Dialogue: 0,0:17:30.00,0:17:30.87,english,,0,0,0,,None, really.
Dialogue: 0,0:17:30.00,0:17:30.87,chinese,,0,0,0,,没有，真的没有。
Dialogue: 0,0:17:30.87,0:17:35.05,english,,0,0,0,,In fact, all main is doing is just say-- make is doing is saving us some keystrokes.
Dialogue: 0,0:17:30.87,0:17:35.05,chinese,,0,0,0,,事实上，main 所做的只是说--make 所做的只是让我们少敲几下键盘。
Dialogue: 0,0:17:35.05,0:17:42.09,english,,0,0,0,,If you prefer, though, and you just like to be more in control, you can totally run Clang manually if you remember the various command line arguments.
Dialogue: 0,0:17:35.05,0:17:42.09,chinese,,0,0,0,,不过，如果你更喜欢控制，只要记住各种命令行参数，完全可以手动运行 Clang。
Dialogue: 0,0:17:42.09,0:17:42.66,english,,0,0,0,,Yeah?
Dialogue: 0,0:17:42.66,0:17:47.33,english,,0,0,0,,AUDIENCE: So why did you have to explain [INAUDIBLE]
Dialogue: 0,0:17:42.66,0:17:47.33,chinese,,0,0,0,,你为什么要解释？那么你为什么要解释[听不清] So why did you have to explain [INAUDIBLE]
Dialogue: 0,0:17:47.33,0:17:48.21,english,,0,0,0,,DAVID MALAN: Exactly.
Dialogue: 0,0:17:47.33,0:17:48.21,chinese,,0,0,0,,大卫-马兰：没错。
Dialogue: 0,0:17:48.21,0:17:55.47,english,,0,0,0,,Why did I have to explain-- that is, provide a hint to CS50 with the cs50.h header file, but I didn't have to do that with standardio.h?
Dialogue: 0,0:17:48.21,0:17:55.47,chinese,,0,0,0,,为什么我必须解释--即用 cs50.h 头文件为 CS50 提供提示，而用 standardio.h 却不必这样做？
Dialogue: 0,0:17:55.47,0:18:03.06,english,,0,0,0,,Just because. standardio.h comes with C, just like a few other libraries come with C that we'll start seeing today.
Dialogue: 0,0:17:55.47,0:18:03.06,chinese,,0,0,0,,Standardio.h 是 C 语言的自带库，就像我们今天开始看到的其他一些 C 语言库一样。
Dialogue: 0,0:18:03.06,0:18:07.89,english,,0,0,0,,CS50, though, is not built into C everywhere, and so you do have to explicitly add that one there.
Dialogue: 0,0:18:03.06,0:18:07.89,chinese,,0,0,0,,不过，CS50 并非随处都内置在 C 语言中，因此您必须明确地将其添加到 C 语言中。
Dialogue: 0,0:18:07.89,0:18:08.76,english,,0,0,0,,Yeah?
Dialogue: 0,0:18:08.76,0:18:11.97,english,,0,0,0,,AUDIENCE: Can you define what command line argument [INAUDIBLE]??
Dialogue: 0,0:18:08.76,0:18:11.97,chinese,,0,0,0,,听众：你能定义什么命令行参数吗？
Dialogue: 0,0:18:11.97,0:18:22.20,english,,0,0,0,,DAVID MALAN: A command line argument is a word or phrase that you type at the command line-- a.k.a., your terminal-- in order to influence the behavior of a program.
Dialogue: 0,0:18:11.97,0:18:22.20,chinese,,0,0,0,,戴维-马兰：命令行参数是你在命令行--也就是你的终端--输入的单词或短语，目的是影响程序的行为。
Dialogue: 0,0:18:22.20,0:18:22.74,english,,0,0,0,,AUDIENCE: OK.
Dialogue: 0,0:18:22.20,0:18:22.74,chinese,,0,0,0,,AUDIENCE：OK.
Dialogue: 0,0:18:22.74,0:18:24.43,english,,0,0,0,,So it's a term for whatever you're giving it.
Dialogue: 0,0:18:22.74,0:18:24.43,chinese,,0,0,0,,所以，你给它什么，它就是什么。
Dialogue: 0,0:18:24.43,0:18:24.56,english,,0,0,0,,DAVID MALAN: Yeah.
Dialogue: 0,0:18:24.43,0:18:24.56,chinese,,0,0,0,,是的
Dialogue: 0,0:18:24.56,0:18:25.66,english,,0,0,0,,It changes the defaults.
Dialogue: 0,0:18:24.56,0:18:25.66,chinese,,0,0,0,,它可以更改默认设置。
Dialogue: 0,0:18:25.66,0:18:33.46,english,,0,0,0,,In our GUI world, Graphical User Interface, you and I would probably click some boxes, we would select some menu options to configure a program to behave in the same way.
Dialogue: 0,0:18:25.66,0:18:33.46,chinese,,0,0,0,,在我们的图形用户界面（GUI）世界里，你和我可能会点击一些方框，选择一些菜单选项，以同样的方式配置程序的行为。
Dialogue: 0,0:18:33.46,0:18:39.60,english,,0,0,0,,At a command line interface, you have to just say everything all at once, and that's why we have command line arguments.
Dialogue: 0,0:18:33.46,0:18:39.60,chinese,,0,0,0,,在命令行界面上，你必须一次性说出所有内容，这就是我们使用命令行参数的原因。
Dialogue: 0,0:18:39.60,0:18:40.60,english,,0,0,0,,Yeah?
Dialogue: 0,0:18:40.60,0:18:43.24,english,,0,0,0,,AUDIENCE: Is make [INAUDIBLE]
Dialogue: 0,0:18:40.60,0:18:43.24,chinese,,0,0,0,,是让[听不清]
Dialogue: 0,0:18:43.24,0:18:43.91,english,,0,0,0,,DAVID MALAN: No.
Dialogue: 0,0:18:43.24,0:18:43.91,chinese,,0,0,0,,DAVID MALAN: No.
Dialogue: 0,0:18:43.91,0:18:45.47,english,,0,0,0,,Make is not just for CS50.
Dialogue: 0,0:18:43.91,0:18:45.47,chinese,,0,0,0,,Make 不仅仅适用于 CS50。
Dialogue: 0,0:18:45.47,0:18:52.02,english,,0,0,0,,It's used globally in any project really nowadays using C, C++, even other languages as well.
Dialogue: 0,0:18:45.47,0:18:52.02,chinese,,0,0,0,,如今，在任何使用 C、C++ 甚至其他语言的项目中，它都被广泛使用。
Dialogue: 0,0:18:52.02,0:18:57.53,english,,0,0,0,,In fact, most every command you see in this class, unless it has 5-0 at the end of it, is globally used.
Dialogue: 0,0:18:52.02,0:18:57.53,chinese,,0,0,0,,事实上，你在这一类中看到的大多数命令，除非结尾有 5-0，否则都是全球通用的。
Dialogue: 0,0:18:57.53,0:19:00.75,english,,0,0,0,,Only those-- a suffix with 50 are, indeed, course-specific.
Dialogue: 0,0:18:57.53,0:19:00.75,chinese,,0,0,0,,只有那些后缀为 50 的课程才是特定课程。
Dialogue: 0,0:19:00.75,0:19:06.89,english,,0,0,0,,And even those we'll gradually take training wheels off of so that exactly what those commands are doing as well.
Dialogue: 0,0:19:00.75,0:19:06.89,chinese,,0,0,0,,即使是这些命令，我们也会逐步卸下训练轮，以便准确了解这些命令的作用。
Dialogue: 0,0:19:06.89,0:19:09.05,english,,0,0,0,,All right, so what is it that we've just done?
Dialogue: 0,0:19:06.89,0:19:09.05,chinese,,0,0,0,,好吧，我们刚才做了什么？
Dialogue: 0,0:19:09.05,0:19:15.96,english,,0,0,0,,Everything we've just done, of course, I keep calling compiling, but let's just go down one rabbit hole so that you understand that when you compile code,
Dialogue: 0,0:19:09.05,0:19:15.96,chinese,,0,0,0,,当然，我们刚才所做的一切，我一直称之为编译，但让我们先钻一个兔子洞，这样你就能理解编译代码的含义了、
Dialogue: 0,0:19:15.96,0:19:26.06,english,,0,0,0,,there's actually a whole bunch of steps, happening and this is going to enable a lot of features, like companies can write code and then convert it to run it on Macs and PCs alike
Dialogue: 0,0:19:15.96,0:19:26.06,chinese,,0,0,0,,实际上，有一大堆步骤正在进行，这将使许多功能得以实现，例如，公司可以编写代码，然后将其转换为在 Mac 和 PC 上运行的代码
Dialogue: 0,0:19:26.06,0:19:27.24,english,,0,0,0,,or phones or the like.
Dialogue: 0,0:19:26.06,0:19:27.24,chinese,,0,0,0,,或电话之类的东西。
Dialogue: 0,0:19:27.24,0:19:35.84,english,,0,0,0,,So it's not just a matter of converting source code to machine code, there's actually four steps involved in what you and I, as of last week, know as compiling.
Dialogue: 0,0:19:27.24,0:19:35.84,chinese,,0,0,0,,因此，这不仅仅是将源代码转换为机器代码的问题，从上周开始，你我所知道的编译实际上涉及四个步骤。
Dialogue: 0,0:19:35.84,0:19:41.45,english,,0,0,0,,And these aren't terms that you'll have to keep in mind constantly because again, we're going to abstract a lot of this away.
Dialogue: 0,0:19:35.84,0:19:41.45,chinese,,0,0,0,,这些都不是你必须时刻牢记的术语，因为我们会再次抽象出很多内容。
Dialogue: 0,0:19:41.45,0:19:51.08,english,,0,0,0,,But just so we've gone down the rabbit hole once, let's consider each of these four steps that have been happening for you for a week automatically, the first of which is called preprocessing.
Dialogue: 0,0:19:41.45,0:19:51.08,chinese,,0,0,0,,不过，我们已经走过了一次兔子洞，让我们考虑一下这四个步骤中的每一个步骤，它们已经为你自动进行了一周，其中第一个步骤叫做预处理。
Dialogue: 0,0:19:51.08,0:19:52.26,english,,0,0,0,,So what does this mean?
Dialogue: 0,0:19:51.08,0:19:52.26,chinese,,0,0,0,,这意味着什么？
Dialogue: 0,0:19:52.26,0:19:54.45,english,,0,0,0,,Well, let's consider that same program as before.
Dialogue: 0,0:19:52.26,0:19:54.45,chinese,,0,0,0,,那么，让我们考虑一下之前的那个程序。
Dialogue: 0,0:19:54.45,0:19:57.83,english,,0,0,0,,So notice that two of the lines of code start with a hash mark.
Dialogue: 0,0:19:54.45,0:19:57.83,chinese,,0,0,0,,请注意，有两行代码是以哈希标记开头的。
Dialogue: 0,0:19:57.83,0:20:02.33,english,,0,0,0,,That is a special symbol in C, and it's a so-called preprocessor directive.
Dialogue: 0,0:19:57.83,0:20:02.33,chinese,,0,0,0,,这是 C 语言中的一个特殊符号，也就是所谓的预处理器指令。
Dialogue: 0,0:20:02.33,0:20:07.00,english,,0,0,0,,You don't need to memorize terms like that, but it just means that it's a little different from every other line.
Dialogue: 0,0:20:02.33,0:20:07.00,chinese,,0,0,0,,你不需要记住这样的术语，但这只是意味着它与其他线路有些不同。
Dialogue: 0,0:20:07.00,0:20:13.31,english,,0,0,0,,And anything with a hash symbol here should be preprocessed-- that is, analyzed initially before anything else happens.
Dialogue: 0,0:20:07.00,0:20:13.31,chinese,,0,0,0,,任何带有哈希符号的内容都应进行预处理，即在进行任何其他操作之前先进行初步分析。
Dialogue: 0,0:20:13.31,0:20:17.10,english,,0,0,0,,So let's consider these two lines up top, what exactly is happening.
Dialogue: 0,0:20:13.31,0:20:17.10,chinese,,0,0,0,,那么，让我们来看看上面这两条线，到底发生了什么。
Dialogue: 0,0:20:17.10,0:20:23.39,english,,0,0,0,,Well, it turns out with these two lines, you have two header files, of course, cs50.h and stdio.h.
Dialogue: 0,0:20:17.10,0:20:23.39,chinese,,0,0,0,,有了这两行，就有了两个头文件，当然是 cs50.h 和 stdio.h。
Dialogue: 0,0:20:23.39,0:20:28.55,english,,0,0,0,,Where are those files, because they've never been in VS Code for you, seemingly.
Dialogue: 0,0:20:23.39,0:20:28.55,chinese,,0,0,0,,这些文件在哪里，因为它们似乎从未出现在你的 VS 代码中。
Dialogue: 0,0:20:28.55,0:20:35.90,english,,0,0,0,,If you type LS-- if you open up the File Explorer in the GUI, you have never seen, probably, cs50.h or stdio.h.
Dialogue: 0,0:20:28.55,0:20:35.90,chinese,,0,0,0,,如果你键入 LS -- 如果你在图形用户界面中打开文件资源管理器，你可能从未见过 cs50.h 或 stdio.h。
Dialogue: 0,0:20:35.90,0:20:45.69,english,,0,0,0,,They just work, but that's because there's a folder somewhere on the hard drive that you're using on your Mac or PC or somewhere in the cloud, as in our case.
Dialogue: 0,0:20:35.90,0:20:45.69,chinese,,0,0,0,,它们之所以能正常工作，是因为在你 Mac 或 PC 上使用的硬盘驱动器或云端的某个地方有一个文件夹，就像我们的情况一样。
Dialogue: 0,0:20:45.69,0:20:50.21,english,,0,0,0,,And inside of this folder, traditionally called /usr/include.
Dialogue: 0,0:20:45.69,0:20:50.21,chinese,,0,0,0,,这个文件夹的传统名称是 /usr/include。
Dialogue: 0,0:20:50.21,0:20:51.85,english,,0,0,0,,And user is deliberately misspelled.
Dialogue: 0,0:20:50.21,0:20:51.85,chinese,,0,0,0,,而 user 则是故意拼错的。
Dialogue: 0,0:20:51.85,0:20:55.76,english,,0,0,0,,It's just slightly more succinct, although it's a little weird why we drop that one letter.
Dialogue: 0,0:20:51.85,0:20:55.76,chinese,,0,0,0,,这只是略微简洁了一些，虽然我们为什么要去掉那一个字母有点奇怪。
Dialogue: 0,0:20:55.76,0:21:03.99,english,,0,0,0,,But usr/include is just a folder on the server that contains cs50.h, stdio.h, and a bunch of other things as well.
Dialogue: 0,0:20:55.76,0:21:03.99,chinese,,0,0,0,,但 usr/include 只是服务器上的一个文件夹，其中包含 cs50.h、stdio.h 和其他一些内容。
Dialogue: 0,0:21:03.99,0:21:15.47,english,,0,0,0,,So in fact, if you type in VS Code, in your terminal window, when you're using code spaces in the cloud and type LS space /usr/include, you can see all of the files in that folder.
Dialogue: 0,0:21:03.99,0:21:15.47,chinese,,0,0,0,,因此，事实上，如果你在 VS Code 中的终端窗口中键入 LS space /usr/include，当你在云中使用代码空间时，就能看到该文件夹中的所有文件。
Dialogue: 0,0:21:15.47,0:21:17.58,english,,0,0,0,,But we've preinstalled all of that stuff for you.
Dialogue: 0,0:21:15.47,0:21:17.58,chinese,,0,0,0,,但我们已经为你预装了所有这些功能。
Dialogue: 0,0:21:17.58,0:21:20.39,english,,0,0,0,,So let's consider what's actually in those files here.
Dialogue: 0,0:21:17.58,0:21:20.39,chinese,,0,0,0,,因此，让我们来看看这些文件中到底有什么。
Dialogue: 0,0:21:20.39,0:21:25.37,english,,0,0,0,,If I highlight these two lines up top that start with hash include, well,
Dialogue: 0,0:21:20.39,0:21:25.37,chinese,,0,0,0,,如果我把上面这两行以散列包含开头的部分突出显示出来，效果就会很好、
Dialogue: 0,0:21:25.37,0:21:32.66,english,,0,0,0,,I kind of hinted last week that what's in that first file is a hint as to what functions CS50 wrote for you.
Dialogue: 0,0:21:25.37,0:21:32.66,chinese,,0,0,0,,上周我曾暗示过，第一个文件中的内容暗示了 CS50 为你编写了哪些功能。
Dialogue: 0,0:21:32.66,0:21:41.00,english,,0,0,0,,So you can kind of think of these include lines as being temporary placeholders for what's going to become like a global find and replace.
Dialogue: 0,0:21:32.66,0:21:41.00,chinese,,0,0,0,,因此，你可以把这些包含行看作是临时的占位符，用于全局查找和替换。
Dialogue: 0,0:21:41.00,0:21:44.27,english,,0,0,0,,That is the first thing clang is going to do is to preprocess this file.
Dialogue: 0,0:21:41.00,0:21:44.27,chinese,,0,0,0,,clang 要做的第一件事就是预处理这个文件。
Dialogue: 0,0:21:44.27,0:21:47.30,english,,0,0,0,,It's going to look for any line that starts with hash include.
Dialogue: 0,0:21:44.27,0:21:47.30,chinese,,0,0,0,,它会查找任何以散列 include 开头的行。
Dialogue: 0,0:21:47.30,0:21:56.44,english,,0,0,0,,And if it sees that, it's going to essentially go into that file, like cs50.h, and then just copy and paste the contents of that file magically there for you.
Dialogue: 0,0:21:47.30,0:21:56.44,chinese,,0,0,0,,如果它看到了，就会进入该文件，如 cs50.h，然后复制并粘贴该文件的内容。
Dialogue: 0,0:21:56.44,0:21:58.11,english,,0,0,0,,You don't see it visually on the screen.
Dialogue: 0,0:21:56.44,0:21:58.11,chinese,,0,0,0,,你在屏幕上看不到。
Dialogue: 0,0:21:58.11,0:22:00.06,english,,0,0,0,,But it's happening behind the scenes.
Dialogue: 0,0:21:58.11,0:22:00.06,chinese,,0,0,0,,但这一切都发生在幕后。
Dialogue: 0,0:22:00.06,0:22:13.21,english,,0,0,0,,And so really, what's happening with this first line is that somewhere in cs50.h is the declaration of getString like we talked last week, and it probably looks a little something like this.
Dialogue: 0,0:22:00.06,0:22:13.21,chinese,,0,0,0,,实际上，第一行的内容是在 cs50.h 中的某处对 getString 的声明，就像我们上周说的那样，它看起来可能有点像这样。
Dialogue: 0,0:22:13.21,0:22:17.03,english,,0,0,0,,And we didn't spend much time on this yet this past week, but we will in time more.
Dialogue: 0,0:22:13.21,0:22:17.03,chinese,,0,0,0,,上周我们在这方面花的时间还不多，但以后会花更多时间。
Dialogue: 0,0:22:17.03,0:22:21.47,english,,0,0,0,,Notice that this is how a function is declared.
Dialogue: 0,0:22:17.03,0:22:21.47,chinese,,0,0,0,,请注意，函数就是这样声明的。
Dialogue: 0,0:22:21.47,0:22:23.67,english,,0,0,0,,That is, it is decreed to exist.
Dialogue: 0,0:22:21.47,0:22:23.67,chinese,,0,0,0,,也就是说，它是注定要存在的。
Dialogue: 0,0:22:23.67,0:22:25.76,english,,0,0,0,,The name of the function, of course, is getString.
Dialogue: 0,0:22:23.67,0:22:25.76,chinese,,0,0,0,,当然，函数的名称是 getString。
Dialogue: 0,0:22:25.76,0:22:28.31,english,,0,0,0,,Inside of the parentheses are its arguments.
Dialogue: 0,0:22:25.76,0:22:28.31,chinese,,0,0,0,,括号内是参数。
Dialogue: 0,0:22:28.31,0:22:33.08,english,,0,0,0,,In this case, there's one argument to getString, I claim today, but you've known this implicitly.
Dialogue: 0,0:22:28.31,0:22:33.08,chinese,,0,0,0,,在这种情况下，getString 只有一个参数，我今天声称，但你已经隐约知道了。
Dialogue: 0,0:22:33.08,0:22:34.16,english,,0,0,0,,And it's a prompt.
Dialogue: 0,0:22:33.08,0:22:34.16,chinese,,0,0,0,,这是一个提示。
Dialogue: 0,0:22:34.16,0:22:36.86,english,,0,0,0,,It's the prompt that the human sees when you use getString.
Dialogue: 0,0:22:34.16,0:22:36.86,chinese,,0,0,0,,这是使用 getString 时人类看到的提示。
Dialogue: 0,0:22:36.86,0:22:37.79,english,,0,0,0,,What is that prompt?
Dialogue: 0,0:22:36.86,0:22:37.79,chinese,,0,0,0,,提示是什么？
Dialogue: 0,0:22:37.79,0:22:43.08,english,,0,0,0,,Well, it's a string of text, like quote unquote, "what's your name?" or anything else that I asked last week.
Dialogue: 0,0:22:37.79,0:22:43.08,chinese,,0,0,0,,嗯，就是一串文字，就像我上周问的 "你叫什么名字？"之类的。
Dialogue: 0,0:22:43.08,0:22:46.61,english,,0,0,0,,Meanwhile, getString, as we know from last week, has a return value.
Dialogue: 0,0:22:43.08,0:22:46.61,chinese,,0,0,0,,与此同时，正如我们在上周所知道的，getString 有一个返回值。
Dialogue: 0,0:22:46.61,0:22:48.14,english,,0,0,0,,It returns something to you.
Dialogue: 0,0:22:46.61,0:22:48.14,chinese,,0,0,0,,它会给你回报一些东西。
Dialogue: 0,0:22:48.14,0:22:49.61,english,,0,0,0,,And that, too, is a string.
Dialogue: 0,0:22:48.14,0:22:49.61,chinese,,0,0,0,,这也是一个字符串。
Dialogue: 0,0:22:49.61,0:22:52.12,english,,0,0,0,,So again, this is also called a functions prototype.
Dialogue: 0,0:22:49.61,0:22:52.12,chinese,,0,0,0,,因此，这也被称为函数原型。
Dialogue: 0,0:22:52.12,0:23:02.03,english,,0,0,0,,It's the thing toward the end of last week that I just copied and pasted from the bottom of my file to the top, just so that it was like this teaser for clang as to what would exist later.
Dialogue: 0,0:22:52.12,0:23:02.03,chinese,,0,0,0,,就是上周末的那篇文章，我把它从文件底部复制粘贴到了顶部，这样就像给铛铛的预告一样，让他知道后面会有什么。
Dialogue: 0,0:23:02.03,0:23:11.36,english,,0,0,0,,So you can think, then, of these include lines as just kind of combining all of those function declarations in some separate file called cs50.h,
Dialogue: 0,0:23:02.03,0:23:11.36,chinese,,0,0,0,,因此，你可以把这些包含行看作是将所有这些函数声明合并到一个名为 cs50.h 的单独文件中、
Dialogue: 0,0:23:11.36,0:23:18.47,english,,0,0,0,,so that you yourself don't have to type them every time you use the library-- or worse, so that you, yourself, don't have to copy and paste those lines.
Dialogue: 0,0:23:11.36,0:23:18.47,chinese,,0,0,0,,这样，您就不必每次使用图书馆时都输入这些信息，或者更糟糕的是，您自己也不必复制和粘贴这些行文。
Dialogue: 0,0:23:18.47,0:23:22.52,english,,0,0,0,,This is what clang is doing for you in its first step of preprocessing.
Dialogue: 0,0:23:18.47,0:23:22.52,chinese,,0,0,0,,这就是 clang 在第一步预处理中为你做的事情。
Dialogue: 0,0:23:22.52,0:23:29.17,english,,0,0,0,,Second, and last in this example, what happens when clang preprocesses this second include line?
Dialogue: 0,0:23:22.52,0:23:29.17,chinese,,0,0,0,,其次，也是本例的最后一个问题，当 clang 预处理第二行 include 时会发生什么？
Dialogue: 0,0:23:29.17,0:23:33.65,english,,0,0,0,,Well, the only other function we care about in this story is printf, of course, which comes with C.
Dialogue: 0,0:23:29.17,0:23:33.65,chinese,,0,0,0,,在这个故事中，我们唯一关心的函数当然是 C 语言自带的 printf 函数。
Dialogue: 0,0:23:33.65,0:23:40.82,english,,0,0,0,,So essentially, you can think of printf's prototype or declaration as just being this.
Dialogue: 0,0:23:33.65,0:23:40.82,chinese,,0,0,0,,因此，你可以把 printf 的原型或声明理解为这样。
Dialogue: 0,0:23:40.82,0:23:42.87,english,,0,0,0,,Printf is the name of the function.
Dialogue: 0,0:23:40.82,0:23:42.87,chinese,,0,0,0,,Printf 是函数的名称。
Dialogue: 0,0:23:42.87,0:23:49.11,english,,0,0,0,,It takes a string that you want to format like, Hello comma world, or Hello comma %s.
Dialogue: 0,0:23:42.87,0:23:49.11,chinese,,0,0,0,,它接收一个要格式化的字符串，如：你好，逗号世界，或你好，逗号 %s。
Dialogue: 0,0:23:49.11,0:23:52.12,english,,0,0,0,,And then with dot, dot, dot, this actually has technical meaning.
Dialogue: 0,0:23:49.11,0:23:52.12,chinese,,0,0,0,,然后是点、点、点，这其实是有技术含义的。
Dialogue: 0,0:23:52.12,0:23:56.34,english,,0,0,0,,It means, of course, that you can plug-in 0 variables, 1 variable, 2 or 10.
Dialogue: 0,0:23:52.12,0:23:56.34,chinese,,0,0,0,,当然，这意味着您可以插入 0 个变量、1 个变量、2 个或 10 个变量。
Dialogue: 0,0:23:56.34,0:23:58.53,english,,0,0,0,,So dot, dot, dot means some number of variables.
Dialogue: 0,0:23:56.34,0:23:58.53,chinese,,0,0,0,,因此，点、点、点意味着一些变量的数量。
Dialogue: 0,0:23:58.53,0:24:00.07,english,,0,0,0,,Now we haven't talked about this yet.
Dialogue: 0,0:23:58.53,0:24:00.07,chinese,,0,0,0,,现在我们还没谈到这个问题。
Dialogue: 0,0:24:00.07,0:24:05.49,english,,0,0,0,,And we won't really, in general. printf actually returns a value, a number, that is an integer.
Dialogue: 0,0:24:00.07,0:24:05.49,chinese,,0,0,0,,实际上，printf 返回的是一个数值，一个整数。
Dialogue: 0,0:24:05.49,0:24:07.42,english,,0,0,0,,But more on that perhaps another time.
Dialogue: 0,0:24:05.49,0:24:07.42,chinese,,0,0,0,,但关于这一点，或许下次再谈。
Dialogue: 0,0:24:07.42,0:24:10.92,english,,0,0,0,,It's generally not something the programmer tends to look at.
Dialogue: 0,0:24:07.42,0:24:10.92,chinese,,0,0,0,,一般来说，程序员不会关注这个问题。
Dialogue: 0,0:24:10.92,0:24:21.33,english,,0,0,0,,But that's all we mean by preprocessing, so that at the end of this process, even though there's more lines of code in cs50.h and stdio.h, what's really just happening is that clang, in preprocessing
Dialogue: 0,0:24:10.92,0:24:21.33,chinese,,0,0,0,,但这就是我们所说的预处理，因此在这个过程的最后，尽管 cs50.h 和 stdio.h 中的代码行数增加了，但实际上只是 clang 在预处理时发生了以下变化
Dialogue: 0,0:24:21.33,0:24:31.06,english,,0,0,0,,the file, copies and pastes the contents of those files into your code so that now your code knows about everything-- getString, printf, and anything else.
Dialogue: 0,0:24:21.33,0:24:31.06,chinese,,0,0,0,,文件，然后将这些文件的内容复制并粘贴到你的代码中，这样你的代码就知道了一切--getString、printf 和其他任何内容。
Dialogue: 0,0:24:31.06,0:24:35.23,english,,0,0,0,,Any questions, then, on that first step, preprocessing?
Dialogue: 0,0:24:31.06,0:24:35.23,chinese,,0,0,0,,那么，关于第一步，预处理，有什么问题吗？
Dialogue: 0,0:24:35.23,0:24:35.92,english,,0,0,0,,Yes?
Dialogue: 0,0:24:35.92,0:24:49.19,english,,0,0,0,,AUDIENCE: [INAUDIBLE]
Dialogue: 0,0:24:49.19,0:24:50.32,english,,0,0,0,,DAVID MALAN: Good question.
Dialogue: 0,0:24:49.19,0:24:50.32,chinese,,0,0,0,,大卫-马兰：问得好。
Dialogue: 0,0:24:50.32,0:24:54.88,english,,0,0,0,,When you include a file, does it only include what you need or does it include everything?
Dialogue: 0,0:24:50.32,0:24:54.88,chinese,,0,0,0,,包含文件时，是只包含您需要的内容，还是包含所有内容？
Dialogue: 0,0:24:54.88,0:24:56.42,english,,0,0,0,,Think of it as including everything.
Dialogue: 0,0:24:54.88,0:24:56.42,chinese,,0,0,0,,把它想象成包括一切。
Dialogue: 0,0:24:56.42,0:24:59.02,english,,0,0,0,,So if it's a big file, that's a lot of code at the very top.
Dialogue: 0,0:24:56.42,0:24:59.02,chinese,,0,0,0,,因此，如果文件很大，最顶端的代码就会很多。
Dialogue: 0,0:24:59.02,0:25:01.88,english,,0,0,0,,And that's why, if you think back to all of the zeros and ones
Dialogue: 0,0:24:59.02,0:25:01.88,chinese,,0,0,0,,这就是为什么，如果你回想一下所有的 0 和 1
Dialogue: 0,0:25:01.88,0:25:08.89,english,,0,0,0,,I showed a little bit ago, as well as last week, there's a lot of zeros and ones that end up on the screen as a result of just writing, Hello, world.
Dialogue: 0,0:25:01.88,0:25:08.89,chinese,,0,0,0,,我在不久前和上周都演示过，只要写下 "你好，世界"，屏幕上就会出现大量的 0 和 1。
Dialogue: 0,0:25:08.89,0:25:13.39,english,,0,0,0,,A lot of those zeros and ones are perhaps coming from code that you didn't actually, necessarily need.
Dialogue: 0,0:25:08.89,0:25:13.39,chinese,,0,0,0,,很多 0 和 1 可能来自于你实际上并不一定需要的代码。
Dialogue: 0,0:25:13.39,0:25:17.74,english,,0,0,0,,But some of it is perhaps there, but there are ways to optimize that as well.
Dialogue: 0,0:25:13.39,0:25:17.74,chinese,,0,0,0,,但其中一些也许是存在的，但也有优化的方法。
Dialogue: 0,0:25:17.74,0:25:22.39,english,,0,0,0,,All right, so step two of compiling is, confusingly, called compiling.
Dialogue: 0,0:25:17.74,0:25:22.39,chinese,,0,0,0,,好了，编译的第二步令人困惑地叫做 "编译"。
Dialogue: 0,0:25:22.39,0:25:27.94,english,,0,0,0,,It's just, this is the term that most everyone uses to describe the whole process, instead of just this one step.
Dialogue: 0,0:25:22.39,0:25:27.94,chinese,,0,0,0,,只是，大多数人都用这个词来描述整个过程，而不仅仅是这一步。
Dialogue: 0,0:25:27.94,0:25:35.86,english,,0,0,0,,But once a program has been preprocessed behind the scenes by the compiler for you, it looks now a little something like this.
Dialogue: 0,0:25:27.94,0:25:35.86,chinese,,0,0,0,,但是，一旦编译器在幕后为你预处理了程序，它现在看起来就有点像这样了。
Dialogue: 0,0:25:35.86,0:25:39.82,english,,0,0,0,,And I've put dot, dot, dot just to imply that, yes, to your question, there's more stuff above it.
Dialogue: 0,0:25:35.86,0:25:39.82,chinese,,0,0,0,,我把 "点"、"点"、"点 "放在这里，只是为了暗示，是的，对于你的问题，上面还有更多的东西。
Dialogue: 0,0:25:39.82,0:25:40.98,english,,0,0,0,,There's more stuff below it.
Dialogue: 0,0:25:39.82,0:25:40.98,chinese,,0,0,0,,下面还有更多内容。
Dialogue: 0,0:25:40.98,0:25:43.07,english,,0,0,0,,It's just not interesting right now for us.
Dialogue: 0,0:25:40.98,0:25:43.07,chinese,,0,0,0,,只是现在对我们来说没什么意思。
Dialogue: 0,0:25:43.07,0:25:44.86,english,,0,0,0,,So now we have just C code.
Dialogue: 0,0:25:43.07,0:25:44.86,chinese,,0,0,0,,现在我们只有 C 代码了。
Dialogue: 0,0:25:44.86,0:25:46.96,english,,0,0,0,,There's no more preprocessor directives.
Dialogue: 0,0:25:44.86,0:25:46.96,chinese,,0,0,0,,没有预处理器指令了。
Dialogue: 0,0:25:46.96,0:25:52.67,english,,0,0,0,,At this point, all of the hash symbols and those lines of code have been preprocessed and converted to something else.
Dialogue: 0,0:25:46.96,0:25:52.67,chinese,,0,0,0,,此时，所有哈希符号和这些代码行都已被预处理并转换成其他内容。
Dialogue: 0,0:25:52.67,0:25:56.38,english,,0,0,0,,And so now-- and this is where things get a little spooky looking.
Dialogue: 0,0:25:52.67,0:25:56.38,chinese,,0,0,0,,现在事情变得有点诡异了
Dialogue: 0,0:25:56.38,0:26:03.31,english,,0,0,0,,Here now is what happens when clang, or any compiler, literally compiles code like this.
Dialogue: 0,0:25:56.38,0:26:03.31,chinese,,0,0,0,,下面是 clang 或任何编译器编译这样的代码时发生的情况。
Dialogue: 0,0:26:03.31,0:26:08.72,english,,0,0,0,,It converts it from this in C to this in assembly code.
Dialogue: 0,0:26:03.31,0:26:08.72,chinese,,0,0,0,,它将 C 语言中的此代码转换为汇编代码中的此代码。
Dialogue: 0,0:26:08.72,0:26:10.72,english,,0,0,0,,So this is among the scarier languages.
Dialogue: 0,0:26:08.72,0:26:10.72,chinese,,0,0,0,,因此，这是一种比较可怕的语言。
Dialogue: 0,0:26:10.72,0:26:12.58,english,,0,0,0,,I, myself, don't really have fond memories.
Dialogue: 0,0:26:10.72,0:26:12.58,chinese,,0,0,0,,我自己并没有什么美好的回忆。
Dialogue: 0,0:26:12.58,0:26:14.80,english,,0,0,0,,This is not a language that many people program in.
Dialogue: 0,0:26:12.58,0:26:14.80,chinese,,0,0,0,,很多人都不会用这种语言编程。
Dialogue: 0,0:26:14.80,0:26:21.43,english,,0,0,0,,If you take a subsequent class in computer science, in systems, a higher level class, you might actually learn this or some variant thereof.
Dialogue: 0,0:26:14.80,0:26:21.43,chinese,,0,0,0,,如果你选修了计算机科学、系统方面的后续课程，或者更高级别的课程，你可能真的会学到这些知识或其中的一些变体。
Dialogue: 0,0:26:21.43,0:26:29.32,english,,0,0,0,,But there's at least a few people out there that need to know this stuff because this is closer to what the computers themselves, nowadays, understand.
Dialogue: 0,0:26:21.43,0:26:29.32,chinese,,0,0,0,,但至少有一些人需要了解这些知识，因为这更接近于现在的计算机本身所能理解的东西。
Dialogue: 0,0:26:29.32,0:26:37.96,english,,0,0,0,,The Intel CPUs or the AMD CPUs, the brains of today's computers and phones understand stuff that looks more like this and less like C.
Dialogue: 0,0:26:29.32,0:26:37.96,chinese,,0,0,0,,英特尔 CPU 或 AMD CPU 是当今电脑和手机的大脑，它们能理解的东西看起来更像这个，而不像 C。
Dialogue: 0,0:26:37.96,0:26:42.43,english,,0,0,0,,Now it's completely esoteric, but let me just highlight a few phrases.
Dialogue: 0,0:26:37.96,0:26:42.43,chinese,,0,0,0,,这完全是个深奥的问题，但我只想强调几句话。
Dialogue: 0,0:26:42.43,0:26:44.63,english,,0,0,0,,There's some stuff that's a little familiar.
Dialogue: 0,0:26:42.43,0:26:44.63,chinese,,0,0,0,,有些东西有点熟悉。
Dialogue: 0,0:26:44.63,0:26:47.62,english,,0,0,0,,There is mention of main at the top there in yellow.
Dialogue: 0,0:26:44.63,0:26:47.62,chinese,,0,0,0,,顶部的黄色部分提到了主要内容。
Dialogue: 0,0:26:47.62,0:26:49.75,english,,0,0,0,,There is mention of getString toward the bottom.
Dialogue: 0,0:26:47.62,0:26:49.75,chinese,,0,0,0,,底部提到了 getString。
Dialogue: 0,0:26:49.75,0:26:52.07,english,,0,0,0,,There is mention of printf down below.
Dialogue: 0,0:26:49.75,0:26:52.07,chinese,,0,0,0,,下面提到了 printf。
Dialogue: 0,0:26:52.07,0:27:00.13,english,,0,0,0,,So this is just another programming language called assembly language, that decades ago, humans-- myself included in school-- did write code in.
Dialogue: 0,0:26:52.07,0:27:00.13,chinese,,0,0,0,,因此，这只是另一种名为汇编语言的编程语言，几十年前，人类--包括我自己在学校里--确实用这种语言写过代码。
Dialogue: 0,0:27:00.13,0:27:06.07,english,,0,0,0,,And absolutely, some people still write this code, especially since you can write very, very efficient code.
Dialogue: 0,0:27:00.13,0:27:06.07,chinese,,0,0,0,,当然，有些人仍然在写这样的代码，尤其是你可以写出非常非常高效的代码。
Dialogue: 0,0:27:06.07,0:27:08.59,english,,0,0,0,,But it's a lot more arcane.
Dialogue: 0,0:27:06.07,0:27:08.59,chinese,,0,0,0,,但它更神秘。
Dialogue: 0,0:27:08.59,0:27:11.38,english,,0,0,0,,It's a lot less user friendly.
Dialogue: 0,0:27:08.59,0:27:11.38,chinese,,0,0,0,,它对用户不那么友好。
Dialogue: 0,0:27:11.38,0:27:23.63,english,,0,0,0,,So you'll see in yellow now, these are the so-called instructions that a computer's brain or CPU understands, pushing values around, moving them, subtracting values, calling functions, and move, move,
Dialogue: 0,0:27:11.38,0:27:23.63,chinese,,0,0,0,,所以，你现在会看到黄色的部分，这些就是所谓的指令，计算机的大脑或 CPU 可以理解这些指令，将数值推来推去、移动它们、减去数值、调用函数、移动、移动、
Dialogue: 0,0:27:23.63,0:27:24.13,english,,0,0,0,,move.
Dialogue: 0,0:27:24.13,0:27:34.12,english,,0,0,0,,So really, the low-level operations that computers understand tend to be arithmetic operations-- subtraction, addition, and the like-- moving things in and out of memory.
Dialogue: 0,0:27:24.13,0:27:34.12,chinese,,0,0,0,,因此，计算机能理解的低级运算往往是算术运算--减法、加法等--将东西移入或移出内存。
Dialogue: 0,0:27:34.12,0:27:37.51,english,,0,0,0,,It's just a lot more tedious for folks like us to write code like this.
Dialogue: 0,0:27:34.12,0:27:37.51,chinese,,0,0,0,,对于我们这样的人来说，编写这样的代码要乏味得多。
Dialogue: 0,0:27:37.51,0:27:40.45,english,,0,0,0,,This is why you and I tend to write stuff like this.
Dialogue: 0,0:27:37.51,0:27:40.45,chinese,,0,0,0,,这就是为什么你和我倾向于写这样的东西。
Dialogue: 0,0:27:40.45,0:27:46.52,english,,0,0,0,,And ideally, still, people like you and I tend to drag and drop puzzle pieces that sort of abstract all of that away further.
Dialogue: 0,0:27:40.45,0:27:46.52,chinese,,0,0,0,,理想情况下，像你我这样的人还是倾向于拖放拼图，进一步抽象出这一切。
Dialogue: 0,0:27:46.52,0:27:49.42,english,,0,0,0,,But for now, this is, again, called assembly language.
Dialogue: 0,0:27:46.52,0:27:49.42,chinese,,0,0,0,,但就目前而言，这还是被称为汇编语言。
Dialogue: 0,0:27:49.42,0:27:54.31,english,,0,0,0,,It is what happens when the compiler literally compiles your code.
Dialogue: 0,0:27:49.42,0:27:54.31,chinese,,0,0,0,,这就是编译器编译代码时发生的情况。
Dialogue: 0,0:27:54.31,0:27:57.01,english,,0,0,0,,But of course, this, still not zeros and ones.
Dialogue: 0,0:27:54.31,0:27:57.01,chinese,,0,0,0,,当然，这仍然不是 0 和 1。
Dialogue: 0,0:27:57.01,0:27:58.58,english,,0,0,0,,So we got two steps to go.
Dialogue: 0,0:27:57.01,0:27:58.58,chinese,,0,0,0,,所以我们还有两步要走。
Dialogue: 0,0:27:58.58,0:28:05.53,english,,0,0,0,,So when a compiler proceeds to step three, this is where things get converted to machine code.
Dialogue: 0,0:27:58.58,0:28:05.53,chinese,,0,0,0,,因此，当编译器进行到第三步时，就会将代码转换为机器代码。
Dialogue: 0,0:28:05.53,0:28:18.55,english,,0,0,0,,And when a compiler assembles your code for you, it converts what we just saw on the screen here to actual zeros and ones-- the so-called machine code that your phone or your computer understands.
Dialogue: 0,0:28:05.53,0:28:18.55,chinese,,0,0,0,,当编译器为你汇编代码时，它会把我们刚才在屏幕上看到的内容转换成实际的 0 和 1，也就是你的手机或电脑能理解的所谓机器码。
Dialogue: 0,0:28:18.55,0:28:24.28,english,,0,0,0,,But it's worth noting that these are not necessarily all of the zeros and ones of your program.
Dialogue: 0,0:28:18.55,0:28:24.28,chinese,,0,0,0,,但值得注意的是，这些并不一定是程序中所有的 0 和 1。
Dialogue: 0,0:28:24.28,0:28:36.94,english,,0,0,0,,Yes, they are the zeros and ones that correspond to your Hello program or printf and getString and the like, but notice that here, we need one final step.
Dialogue: 0,0:28:24.28,0:28:36.94,chinese,,0,0,0,,是的，它们就是对应于 Hello 程序或 printf 和 getString 等的 0 和 1，但请注意，在这里，我们还需要最后一步。
Dialogue: 0,0:28:36.94,0:28:40.10,english,,0,0,0,,In those zeros and ones are only your lines of code.
Dialogue: 0,0:28:36.94,0:28:40.10,chinese,,0,0,0,,在这些 0 和 1 中，只有你的代码行。
Dialogue: 0,0:28:40.10,0:28:43.54,english,,0,0,0,,But what about CS50's lines of code that we wrote to implement getString?
Dialogue: 0,0:28:40.10,0:28:43.54,chinese,,0,0,0,,但是，我们为实现 getString 而编写的 CS50 代码又是怎么回事呢？
Dialogue: 0,0:28:43.54,0:28:46.99,english,,0,0,0,,What about the lines of code that humans wrote decades ago to implement printf?
Dialogue: 0,0:28:43.54,0:28:46.99,chinese,,0,0,0,,几十年前人类为实现 printf 而编写的代码行又如何呢？
Dialogue: 0,0:28:46.99,0:28:54.46,english,,0,0,0,,Those are somewhere on this hard drive, like on my Mac, my PC, or somewhere in the cloud, but we need to combine all of those zeros and ones
Dialogue: 0,0:28:46.99,0:28:54.46,chinese,,0,0,0,,这些数据在硬盘上的某个地方，比如在我的 Mac、PC 或云端的某个地方，但我们需要将所有这些 0 和 1 结合起来
Dialogue: 0,0:28:54.46,0:29:02.42,english,,0,0,0,,together and link my code with CS50's code with standard I/O's code, all together.
Dialogue: 0,0:28:54.46,0:29:02.42,chinese,,0,0,0,,将我的代码与 CS50 的代码和标准 I/O 的代码连接在一起。
Dialogue: 0,0:29:02.42,0:29:11.44,english,,0,0,0,,And so what happens in the last step, ultimately, is that if we have my code here in yellow, and then the code that CS50 wrote, and the code that the authors of C
Dialogue: 0,0:29:02.42,0:29:11.44,chinese,,0,0,0,,因此，最后一步的最终结果是，如果我的代码是黄色的，CS50 写的代码是黄色的，C 语言的作者写的代码是黄色的，C 语言的作者写的代码是黄色的。
Dialogue: 0,0:29:11.44,0:29:19.96,english,,0,0,0,,itself wrote, what really is happening is that somewhere, we have not only hello.c, which, obviously, I wrote, and wrote with us live here,
Dialogue: 0,0:29:11.44,0:29:19.96,chinese,,0,0,0,,它本身写道，真正发生的事情是，在某个地方，我们不仅有 hello.c，其中，很明显，我写道，并写道与我们住在这里、
Dialogue: 0,0:29:19.96,0:29:28.21,english,,0,0,0,,there's also, let's assume, somewhere on the computer, a cs50.c file that, coincidentally, I and CS50 staff wrote years ago.
Dialogue: 0,0:29:19.96,0:29:28.21,chinese,,0,0,0,,另外，我们假设在电脑的某个地方还有一个 cs50.c 文件，巧合的是，这个文件是我和 CS50 工作人员多年前写的。
Dialogue: 0,0:29:28.21,0:29:30.79,english,,0,0,0,,And also, somewhere on the computer, there's another file.
Dialogue: 0,0:29:28.21,0:29:30.79,chinese,,0,0,0,,此外，在电脑的某个地方，还有另一个文件。
Dialogue: 0,0:29:30.79,0:29:34.12,english,,0,0,0,,Let me oversimplify by just calling it stdio.c.
Dialogue: 0,0:29:30.79,0:29:34.12,chinese,,0,0,0,,让我简化一下，直接称之为 stdio.c。
Dialogue: 0,0:29:34.12,0:29:36.85,english,,0,0,0,,In practice, it's probably specifically called printf.c.
Dialogue: 0,0:29:34.12,0:29:36.85,chinese,,0,0,0,,实际上，它的具体名称可能是 printf.c。
Dialogue: 0,0:29:36.85,0:29:39.46,english,,0,0,0,,But they're somewhere, these two other files.
Dialogue: 0,0:29:36.85,0:29:39.46,chinese,,0,0,0,,但它们就在某处，就是另外两个文件。
Dialogue: 0,0:29:39.46,0:29:48.10,english,,0,0,0,,And so this last step called linking takes my zeros and ones from the code I just wrote, namely this code on the screen here.
Dialogue: 0,0:29:39.46,0:29:48.10,chinese,,0,0,0,,
Dialogue: 0,0:29:48.10,0:29:50.81,english,,0,0,0,,It then grabs the zeros and ones that CS50 wrote.
Dialogue: 0,0:29:48.10,0:29:50.81,chinese,,0,0,0,,然后抓取 CS50 写入的 0 和 1。
Dialogue: 0,0:29:50.81,0:29:56.24,english,,0,0,0,,And it grabs the zeros and ones that the authors of C wrote, in order to implement the standard I/O library.
Dialogue: 0,0:29:50.81,0:29:56.24,chinese,,0,0,0,,为了实现标准 I/O 库，它抓取了 C 语言作者编写的 0 和 1。
Dialogue: 0,0:29:56.24,0:30:00.75,english,,0,0,0,,And lastly, voila, links them all together.
Dialogue: 0,0:29:56.24,0:30:00.75,chinese,,0,0,0,,最后，瞧，把它们连接在一起。
Dialogue: 0,0:30:00.75,0:30:03.98,english,,0,0,0,,And this is the same blob of zeros and ones that we saw earlier.
Dialogue: 0,0:30:00.75,0:30:03.98,chinese,,0,0,0,,这就是我们之前看到的那团 0 和 1。
Dialogue: 0,0:30:03.98,0:30:15.83,english,,0,0,0,,It's just now the result of preprocessing your code, compiling your code, assembling your code, linking your code, and my God, at this point, like if there were any fun in programming for you yet,
Dialogue: 0,0:30:03.98,0:30:15.83,chinese,,0,0,0,,这只是预处理你的代码、编译你的代码、组装你的代码、链接你的代码的结果，我的天啊，在这一点上，好像编程对你来说还有什么乐趣可言、
Dialogue: 0,0:30:15.83,0:30:19.62,english,,0,0,0,,we've just taken it all away, we just call this whole process compiling.
Dialogue: 0,0:30:15.83,0:30:19.62,chinese,,0,0,0,,我们把这一切都拿走了，我们把整个过程称为编译。
Dialogue: 0,0:30:19.62,0:30:20.12,english,,0,0,0,,Why?
Dialogue: 0,0:30:20.12,0:30:27.89,english,,0,0,0,,Because now that we know those steps exist-- and smart people solve that problem for us-- you and I can kind of operate at this level of abstraction
Dialogue: 0,0:30:20.12,0:30:27.89,chinese,,0,0,0,,因为既然我们知道这些步骤的存在，而且聪明人也为我们解决了这个问题，你和我就可以在这个抽象的层面上进行操作了
Dialogue: 0,0:30:27.89,0:30:32.42,english,,0,0,0,,and just assume that compiling converts source code to machine code.
Dialogue: 0,0:30:27.89,0:30:32.42,chinese,,0,0,0,,并假定编译会将源代码转换为机器代码。
Dialogue: 0,0:30:32.42,0:30:36.35,english,,0,0,0,,Questions, though, on any of these intermediate steps?
Dialogue: 0,0:30:32.42,0:30:36.35,chinese,,0,0,0,,对这些中间步骤有疑问吗？
Dialogue: 0,0:30:36.35,0:30:37.36,english,,0,0,0,,Yeah?
Dialogue: 0,0:30:37.36,0:30:41.95,english,,0,0,0,,AUDIENCE: For linking, are different parts, like [INAUDIBLE]??
Dialogue: 0,0:30:37.36,0:30:41.95,chinese,,0,0,0,,听众：对于链接，不同的部分，如[听不清]？
Dialogue: 0,0:30:50.07,0:30:51.28,english,,0,0,0,,DAVID MALAN: A good question.
Dialogue: 0,0:30:50.07,0:30:51.28,chinese,,0,0,0,,大卫-马兰：问得好。
Dialogue: 0,0:30:51.28,0:30:53.23,english,,0,0,0,,So where are all of these zeros and one stored?
Dialogue: 0,0:30:51.28,0:30:53.23,chinese,,0,0,0,,那么，这些 "0 "和 "1 "都储存在哪里呢？
Dialogue: 0,0:30:53.23,0:30:58.33,english,,0,0,0,,Because you and I, we've been using a browser, right? code.cs50.io, of course, is this web-based user interface.
Dialogue: 0,0:30:53.23,0:30:58.33,chinese,,0,0,0,,当然，code.cs50.io 是基于网络的用户界面。
Dialogue: 0,0:30:58.33,0:31:09.00,english,,0,0,0,,But again, recall from last week, even though you're using a web browser to access VS Code, that web-based version of VS code is connected to an actual server somewhere in the cloud.
Dialogue: 0,0:30:58.33,0:31:09.00,chinese,,0,0,0,,但是，请再次回顾上周的内容，即使你使用网络浏览器访问 VS 代码，该网络版的 VS 代码也是连接到云中某处的实际服务器上的。
Dialogue: 0,0:31:09.00,0:31:15.36,english,,0,0,0,,And on that server, you have your own account and your own files, and really, your own hard drive, virtually in the cloud.
Dialogue: 0,0:31:09.00,0:31:15.36,chinese,,0,0,0,,在该服务器上，你有自己的账户和文件，实际上，你有自己的硬盘，实际上是在云中。
Dialogue: 0,0:31:15.36,0:31:19.83,english,,0,0,0,,Think of it a little like Dropbox or Box or Google Drive or OneDrive or something like that.
Dialogue: 0,0:31:15.36,0:31:19.83,chinese,,0,0,0,,把它想象成 Dropbox 或 Box 或 Google Drive 或 OneDrive 或类似的东西。
Dialogue: 0,0:31:19.83,0:31:23.31,english,,0,0,0,,So you have a hard drive somewhere out there that we've provisioned for you.
Dialogue: 0,0:31:19.83,0:31:23.31,chinese,,0,0,0,,所以，你有一个我们为你配置好的硬盘。
Dialogue: 0,0:31:23.31,0:31:32.70,english,,0,0,0,,And it's on that hard drive that you have your code that you just wrote, or I just wrote, cs50.c, stdio.c, and all of the other code
Dialogue: 0,0:31:23.31,0:31:32.70,chinese,,0,0,0,,在那个硬盘上，有你刚写的代码，或者我刚写的代码，cs50.c、stdio.c 以及所有其他代码。
Dialogue: 0,0:31:32.70,0:31:36.96,english,,0,0,0,,that implements the math functions and everything else that C supports.
Dialogue: 0,0:31:32.70,0:31:36.96,chinese,,0,0,0,,来实现数学函数和 C 支持的其他功能。
Dialogue: 0,0:31:36.96,0:31:37.55,english,,0,0,0,,Good question.
Dialogue: 0,0:31:36.96,0:31:37.55,chinese,,0,0,0,,问得好。
Dialogue: 0,0:31:37.55,0:31:38.96,english,,0,0,0,,Yeah?
Dialogue: 0,0:31:38.96,0:31:51.93,english,,0,0,0,,AUDIENCE: So, say in the CS50 library, the line [INAUDIBLE] do we do the same exact thing [INAUDIBLE] copy paste them all the way over?
Dialogue: 0,0:31:38.96,0:31:51.93,chinese,,0,0,0,,听众：那么，比方说在 CS50 库中，[INAUDIBLE]这一行我们也是这样[INAUDIBLE]复制粘贴过来的吗？
Dialogue: 0,0:31:51.93,0:31:53.06,english,,0,0,0,,DAVID MALAN: Good question.
Dialogue: 0,0:31:51.93,0:31:53.06,chinese,,0,0,0,,大卫-马兰：问得好。
Dialogue: 0,0:31:53.06,0:31:57.11,english,,0,0,0,,That hash includes cs50.h line at the top of my code.
Dialogue: 0,0:31:53.06,0:31:57.11,chinese,,0,0,0,,哈希值包括我代码顶端的 cs50.h 行。
Dialogue: 0,0:31:57.11,0:32:01.31,english,,0,0,0,,If I just replace that with the contents of cs50.c, would that work?
Dialogue: 0,0:31:57.11,0:32:01.31,chinese,,0,0,0,,如果我将其替换为 cs50.c 的内容，这样行得通吗？
Dialogue: 0,0:32:01.31,0:32:03.59,english,,0,0,0,,Short answer, yes, that would work.
Dialogue: 0,0:32:01.31,0:32:03.59,chinese,,0,0,0,,简而言之，是的，这样可行。
Dialogue: 0,0:32:03.59,0:32:05.40,english,,0,0,0,,You could copy all of the code there.
Dialogue: 0,0:32:03.59,0:32:05.40,chinese,,0,0,0,,您可以将所有代码复制到这里。
Dialogue: 0,0:32:05.40,0:32:08.57,english,,0,0,0,,However, there's some order of operations that might come into play.
Dialogue: 0,0:32:05.40,0:32:08.57,chinese,,0,0,0,,不过，有些操作顺序可能会发挥作用。
Dialogue: 0,0:32:08.57,0:32:10.91,english,,0,0,0,,And so it's probably not quite as simple as copy, paste.
Dialogue: 0,0:32:08.57,0:32:10.91,chinese,,0,0,0,,因此，这可能不是复制、粘贴那么简单。
Dialogue: 0,0:32:10.91,0:32:13.19,english,,0,0,0,,But conceptually, yes, that's what's happening.
Dialogue: 0,0:32:10.91,0:32:13.19,chinese,,0,0,0,,但从概念上讲，是的，就是这么回事。
Dialogue: 0,0:32:13.19,0:32:25.67,english,,0,0,0,,Now with that said, in cs50.h, are only the prototypes of the functions, the hints as to how the functions look, what their return type is, what their name is, and what their arguments are.
Dialogue: 0,0:32:13.19,0:32:25.67,chinese,,0,0,0,,因此，在 cs50.h 中，只有函数的原型、函数的外观提示、返回类型、名称和参数。
Dialogue: 0,0:32:25.67,0:32:29.86,english,,0,0,0,,It's in the dot c file that actual code tends to be written.
Dialogue: 0,0:32:25.67,0:32:29.86,chinese,,0,0,0,,实际代码往往是在点 c 文件中编写的。
Dialogue: 0,0:32:29.86,0:32:33.92,english,,0,0,0,,And this is a little confusing now because you and I have only written code in dot c files.
Dialogue: 0,0:32:29.86,0:32:33.92,chinese,,0,0,0,,现在这有点令人困惑，因为你我都只在点 c 文件中编写过代码。
Dialogue: 0,0:32:33.92,0:32:40.46,english,,0,0,0,,But in the next few weeks, you'll actually start writing some of your own dot h files as well, just like CS50, just like standard I/O.
Dialogue: 0,0:32:33.92,0:32:40.46,chinese,,0,0,0,,但在接下来的几周里，你将开始编写一些自己的 dot h 文件，就像 CS50 一样，就像标准 I/O 一样。
Dialogue: 0,0:32:40.46,0:32:46.02,english,,0,0,0,,But in essence, that line of code just makes it easier to use and reuse code that's already been written.
Dialogue: 0,0:32:40.46,0:32:46.02,chinese,,0,0,0,,但实质上，这行代码只是让我们更容易使用和重复使用已经编写好的代码。
Dialogue: 0,0:32:46.02,0:32:47.75,english,,0,0,0,,And that's the whole point of a library.
Dialogue: 0,0:32:46.02,0:32:47.75,chinese,,0,0,0,,而这正是图书馆的意义所在。
Dialogue: 0,0:32:47.75,0:32:50.32,english,,0,0,0,,AUDIENCE: Does linking them [INAUDIBLE]?
Dialogue: 0,0:32:47.75,0:32:50.32,chinese,,0,0,0,,听众：把它们联系起来[听不清]吗？
Dialogue: 0,0:32:50.32,0:32:51.91,english,,0,0,0,,DAVID MALAN: Say that a little louder.
Dialogue: 0,0:32:50.32,0:32:51.91,chinese,,0,0,0,,大点声说。
Dialogue: 0,0:32:51.91,0:32:54.47,english,,0,0,0,,AUDIENCE: Does linking happen when you use the compiler?
Dialogue: 0,0:32:51.91,0:32:54.47,chinese,,0,0,0,,听众：使用编译器时是否会进行链接？
Dialogue: 0,0:32:54.47,0:32:55.18,english,,0,0,0,,DAVID MALAN: Yes.
Dialogue: 0,0:32:54.47,0:32:55.18,chinese,,0,0,0,,戴维-马兰：是的。
Dialogue: 0,0:32:55.18,0:32:56.98,english,,0,0,0,,Does linking happen when you compile your code?
Dialogue: 0,0:32:55.18,0:32:56.98,chinese,,0,0,0,,编译代码时是否进行了链接？
Dialogue: 0,0:32:56.98,0:32:57.48,english,,0,0,0,,Yes.
Dialogue: 0,0:32:57.48,0:33:04.57,english,,0,0,0,,When you run make, as we have been doing the past week now, all four of these steps are happening.
Dialogue: 0,0:32:57.48,0:33:04.57,chinese,,0,0,0,,当你运行 "制作 "时，就像我们过去一周所做的那样，所有这四个步骤都在进行。
Dialogue: 0,0:33:04.57,0:33:07.78,english,,0,0,0,,Preprocessing converts the hash include lines to something else.
Dialogue: 0,0:33:04.57,0:33:07.78,chinese,,0,0,0,,预处理会将哈希包含行转换为其他内容。
Dialogue: 0,0:33:07.78,0:33:14.29,english,,0,0,0,,Compiling technically converts it to assembly code, which the Mac, the PC, the server more closely understands.
Dialogue: 0,0:33:07.78,0:33:14.29,chinese,,0,0,0,,从技术上讲，编译会将其转换为汇编代码，Mac、PC 和服务器更容易理解汇编代码。
Dialogue: 0,0:33:14.29,0:33:20.08,english,,0,0,0,,Assembly converts that language to binary machine code that this computer actually understands.
Dialogue: 0,0:33:14.29,0:33:20.08,chinese,,0,0,0,,汇编程序将这种语言转换成二进制机器码，让计算机真正理解。
Dialogue: 0,0:33:20.08,0:33:22.54,english,,0,0,0,,And then linking combines everything together.
Dialogue: 0,0:33:20.08,0:33:22.54,chinese,,0,0,0,,然后将所有内容连接在一起。
Dialogue: 0,0:33:22.54,0:33:32.86,english,,0,0,0,,And in fact, if you think back a few minutes ago to when I did this -lcs50, the reason I had to add that, and the reason my code did not compile at first, was because I
Dialogue: 0,0:33:22.54,0:33:32.86,chinese,,0,0,0,,事实上，如果你回想一下几分钟前我做这个 -lcs50 的时候，我之所以要添加这个，以及我的代码一开始无法编译的原因，是因为我
Dialogue: 0,0:33:32.86,0:33:38.65,english,,0,0,0,,forgot to tell clang to link in CS50's zeros and ones per that last step.
Dialogue: 0,0:33:32.86,0:33:38.65,chinese,,0,0,0,,忘了告诉 clang 在最后一步连接 CS50 的 0 和 1。
Dialogue: 0,0:33:38.65,0:33:44.48,english,,0,0,0,,I don't need to do -lstdio because it comes with C, so that would just be tedious for everyone in the world.
Dialogue: 0,0:33:38.65,0:33:44.48,chinese,,0,0,0,,我不需要使用 -lstdio，因为它是 C 语言自带的，所以这对世界上的每个人来说都很乏味。
Dialogue: 0,0:33:44.48,0:33:47.14,english,,0,0,0,,But CS50 does not come with C, so we link that in.
Dialogue: 0,0:33:44.48,0:33:47.14,chinese,,0,0,0,,但是，CS50 不带 C，因此我们将其连接进来。
Dialogue: 0,0:33:47.14,0:33:49.78,english,,0,0,0,,And to be clear, too, we won't always use CS50's library.
Dialogue: 0,0:33:47.14,0:33:49.78,chinese,,0,0,0,,我们也要明确一点，我们不会一直使用 CS50 的资料库。
Dialogue: 0,0:33:49.78,0:33:53.07,english,,0,0,0,,That'll be yet another pair of training wheels we take off in the coming weeks.
Dialogue: 0,0:33:49.78,0:33:53.07,chinese,,0,0,0,,这将是我们在未来几周内摘下的又一副训练轮。
Dialogue: 0,0:33:53.07,0:33:55.00,english,,0,0,0,,But for now, it makes a few things simpler.
Dialogue: 0,0:33:53.07,0:33:55.00,chinese,,0,0,0,,但现在，它让一些事情变得更简单了。
Dialogue: 0,0:33:55.00,0:33:57.28,english,,0,0,0,,Yeah?
Dialogue: 0,0:33:57.28,0:33:59.75,english,,0,0,0,,AUDIENCE: What is the [INAUDIBLE]?
Dialogue: 0,0:33:57.28,0:33:59.75,chinese,,0,0,0,,听众：什么是[INNAUDIBLE]？
Dialogue: 0,0:34:08.87,0:34:10.17,english,,0,0,0,,DAVID MALAN: Short answer, yes.
Dialogue: 0,0:34:08.87,0:34:10.17,chinese,,0,0,0,,大卫-马兰：简而言之，是的。
Dialogue: 0,0:34:10.17,0:34:12.87,english,,0,0,0,,So what do the zeros and ones, the machine code, translate to?
Dialogue: 0,0:34:10.17,0:34:12.87,chinese,,0,0,0,,那么，机器码中的 0 和 1 又是什么意思呢？
Dialogue: 0,0:34:12.87,0:34:17.34,english,,0,0,0,,Yes, there is a one-to-one relationship between the machine code and the assembly code.
Dialogue: 0,0:34:12.87,0:34:17.34,chinese,,0,0,0,,是的，机器代码和汇编代码之间是一对一的关系。
Dialogue: 0,0:34:17.34,0:34:21.51,english,,0,0,0,,Assembly code, it's not really English, but at least it's symbols I recognize.
Dialogue: 0,0:34:17.34,0:34:21.51,chinese,,0,0,0,,汇编代码，虽然不是真正的英语，但至少是我认识的符号。
Dialogue: 0,0:34:21.51,0:34:22.80,english,,0,0,0,,It's not zeros and ones.
Dialogue: 0,0:34:21.51,0:34:22.80,chinese,,0,0,0,,不是 0 和 1。
Dialogue: 0,0:34:22.80,0:34:24.81,english,,0,0,0,,Machine code, of course, is just zeros and ones.
Dialogue: 0,0:34:22.80,0:34:24.81,chinese,,0,0,0,,当然，机器代码只是 0 和 1。
Dialogue: 0,0:34:24.81,0:34:30.63,english,,0,0,0,,So back in the day, before C existed, people were programming only in assembly code.
Dialogue: 0,0:34:24.81,0:34:30.63,chinese,,0,0,0,,因此，在 C 语言出现之前，人们只能用汇编代码编程。
Dialogue: 0,0:34:30.63,0:34:34.46,english,,0,0,0,,Before assembly code existed, people were coding in zeros and ones.
Dialogue: 0,0:34:30.63,0:34:34.46,chinese,,0,0,0,,在汇编代码出现之前，人们用 0 和 1 进行编码。
Dialogue: 0,0:34:34.46,0:34:40.11,english,,0,0,0,,And you can imagine just how painful that was, and so each of these languages makes life, for us, sort of easier and easier.
Dialogue: 0,0:34:34.46,0:34:40.11,chinese,,0,0,0,,你可以想象那是多么痛苦，所以每一种语言都让我们的生活变得越来越轻松。
Dialogue: 0,0:34:40.11,0:34:48.09,english,,0,0,0,,In a few weeks, we'll transition to Python, which will, in turn, make C even simpler-- or coding, in general, simpler to do too.
Dialogue: 0,0:34:40.11,0:34:48.09,chinese,,0,0,0,,几周后，我们将过渡到 Python，而 Python 又会让 C 语言变得更加简单，或者说让一般的编码工作变得更加简单。
Dialogue: 0,0:34:48.09,0:34:55.06,english,,0,0,0,,All right, so with that said, what now can we-- what could go wrong with this?
Dialogue: 0,0:34:48.09,0:34:55.06,chinese,,0,0,0,,好了，说了这么多，我们现在能 -- 这可能会出什么问题？
Dialogue: 0,0:34:55.06,0:34:59.23,english,,0,0,0,,Well, it turns out that besides compiling, technically speaking, there's decompiling.
Dialogue: 0,0:34:55.06,0:34:59.23,chinese,,0,0,0,,原来，除了编译，从技术上讲，还有反编译。
Dialogue: 0,0:34:59.23,0:35:01.15,english,,0,0,0,,And we've not done this, and we won't do this.
Dialogue: 0,0:34:59.23,0:35:01.15,chinese,,0,0,0,,我们没有这样做，也不会这样做。
Dialogue: 0,0:35:01.15,0:35:04.08,english,,0,0,0,,But it's worth considering for just a moment.
Dialogue: 0,0:35:01.15,0:35:04.08,chinese,,0,0,0,,但这值得我们思考片刻。
Dialogue: 0,0:35:04.08,0:35:14.58,english,,0,0,0,,If you were to not compile your code, but decompile it-- as the word suggests, this just means reversing the process, converting it, ideally, from machine code-- zeros and ones--
Dialogue: 0,0:35:04.08,0:35:14.58,chinese,,0,0,0,,如果不对代码进行编译，而是进行反编译--顾名思义，反编译就是颠倒过程，最好是从机器码--0 和 1--进行转换。
Dialogue: 0,0:35:14.58,0:35:22.08,english,,0,0,0,,maybe back to C. Now this would be cool, perhaps, if all you have is a program, you can convert it and see the actual source code.
Dialogue: 0,0:35:14.58,0:35:22.08,chinese,,0,0,0,,如果你有的只是一个程序，你可以转换它并查看实际的源代码。
Dialogue: 0,0:35:22.08,0:35:28.65,english,,0,0,0,,What might a downside be, if anyone on the internet is able to decompile code on their machine?
Dialogue: 0,0:35:22.08,0:35:28.65,chinese,,0,0,0,,如果互联网上的任何人都能在自己的机器上反编译代码，那会有什么坏处呢？
Dialogue: 0,0:35:28.65,0:35:29.16,english,,0,0,0,,Yeah?
Dialogue: 0,0:35:29.16,0:35:30.27,english,,0,0,0,,AUDIENCE: [INAUDIBLE]
Dialogue: 0,0:35:30.27,0:35:35.43,english,,0,0,0,,DAVID MALAN: OK, so it's easier to find bugs in the code that-- oh, to exploit.
Dialogue: 0,0:35:30.27,0:35:35.43,chinese,,0,0,0,,好吧，那就更容易在代码中找到漏洞，哦，利用漏洞。
Dialogue: 0,0:35:35.43,0:35:45.08,english,,0,0,0,,So it might be easier to hack into the software by finding mistakes you and I made because, literally, they're staring at you in code, whereas the zeros and ones make it way less obvious.
Dialogue: 0,0:35:35.43,0:35:45.08,chinese,,0,0,0,,因此，通过查找你我所犯的错误来黑进软件可能会更容易，因为从字面上看，它们是用代码盯着你看的，而 0 和 1 就不那么明显了。
Dialogue: 0,0:35:45.08,0:35:48.14,english,,0,0,0,,Other downsides of what I called decompiling?
Dialogue: 0,0:35:45.08,0:35:48.14,chinese,,0,0,0,,我所说的反编译的其他缺点？
Dialogue: 0,0:35:48.14,0:35:49.97,english,,0,0,0,,Yeah?
Dialogue: 0,0:35:49.97,0:35:53.69,english,,0,0,0,,AUDIENCE: If stuff is copyrighted or you don't even know how to get it--
Dialogue: 0,0:35:49.97,0:35:53.69,chinese,,0,0,0,,如果东西是有版权的，或者你甚至不知道如何得到它 --
Dialogue: 0,0:35:53.69,0:35:54.44,english,,0,0,0,,DAVID MALAN: Yeah.
Dialogue: 0,0:35:53.69,0:35:54.44,chinese,,0,0,0,,是的
Dialogue: 0,0:35:54.44,0:35:55.94,english,,0,0,0,,AUDIENCE: [INAUDIBLE]
Dialogue: 0,0:35:55.94,0:36:03.66,english,,0,0,0,,DAVID MALAN: Yeah, if your code, your work, is your intellectual property, copyrighted or otherwise, that's kind of obnoxious that someone can just run a command, and boom,
Dialogue: 0,0:35:55.94,0:36:03.66,chinese,,0,0,0,,戴维-马兰：是的，如果你的代码、你的作品是你的知识产权，不管是否有版权，有人可以随便运行一个命令，然后 "嘭 "的一声，这就有点令人讨厌了、
Dialogue: 0,0:36:03.66,0:36:05.57,english,,0,0,0,,they can see the original code that you wrote.
Dialogue: 0,0:36:03.66,0:36:05.57,chinese,,0,0,0,,他们可以看到你编写的原始代码。
Dialogue: 0,0:36:05.57,0:36:08.49,english,,0,0,0,,Now, it turns out it's not quite as simple as that.
Dialogue: 0,0:36:05.57,0:36:08.49,chinese,,0,0,0,,现在看来，事情并非如此简单。
Dialogue: 0,0:36:08.49,0:36:19.40,english,,0,0,0,,And so even though, yes, you could take a program like Hello, or even Microsoft Word, and convert it from zeros and ones back to some form of source code-- be it in C or Java
Dialogue: 0,0:36:08.49,0:36:19.40,chinese,,0,0,0,,因此，尽管你可以使用 Hello 或 Microsoft Word 这样的程序，并将其从 0 和 1 转换回某种形式的源代码--无论是 C 语言还是 Java 语言
Dialogue: 0,0:36:19.40,0:36:25.80,english,,0,0,0,,or Python or something else, whatever it was originally written in-- odds are it's going to be an utter mess to look at.
Dialogue: 0,0:36:19.40,0:36:25.80,chinese,,0,0,0,,或 Python 或其他语言，不管它最初是用什么语言编写的--都有可能是一团糟。
Dialogue: 0,0:36:25.80,0:36:26.30,english,,0,0,0,,Why?
Dialogue: 0,0:36:26.30,0:36:30.89,english,,0,0,0,,Because things variable names are not retained in the zeros and ones, typically.
Dialogue: 0,0:36:26.30,0:36:30.89,chinese,,0,0,0,,因为变量名通常不会保留在 0 和 1 中。
Dialogue: 0,0:36:30.89,0:36:33.98,english,,0,0,0,,Function names might not be retained in the zeros and ones.
Dialogue: 0,0:36:30.89,0:36:33.98,chinese,,0,0,0,,函数名可能不会保留在 0 和 1 中。
Dialogue: 0,0:36:33.98,0:36:42.89,english,,0,0,0,,The code is, the logic is, but the computer doesn't care what pretty variables you chose and how nicely named your functions were, it just needs to know them as zeros and ones.
Dialogue: 0,0:36:33.98,0:36:42.89,chinese,,0,0,0,,代码是代码，逻辑是逻辑，但计算机并不关心你选择了什么漂亮的变量，也不关心你的函数名称有多好听，它只需要知道它们是 0 和 1。
Dialogue: 0,0:36:42.89,0:36:46.37,english,,0,0,0,,Moreover, if you think about last week, we introduced things like loops in C.
Dialogue: 0,0:36:42.89,0:36:46.37,chinese,,0,0,0,,此外，回想一下上周，我们介绍了 C 语言中的循环等内容。
Dialogue: 0,0:36:46.37,0:36:49.74,english,,0,0,0,,And besides for loops, there's what other kind of loop, for instance?
Dialogue: 0,0:36:46.37,0:36:49.74,chinese,,0,0,0,,除了 for 循环，还有哪种循环？
Dialogue: 0,0:36:49.74,0:36:50.62,english,,0,0,0,,AUDIENCE: [INAUDIBLE]
Dialogue: 0,0:36:50.62,0:36:59.91,english,,0,0,0,,DAVID MALAN: So, a while loop-- and even though they look different and you have to write different code, they achieve exactly the same functionality, which is to say, when you compile a for loop
Dialogue: 0,0:36:50.62,0:36:59.91,chinese,,0,0,0,,DAVID MALAN：所以，while 循环--尽管它们看起来不同，你必须写不同的代码，但它们实现的功能完全相同，也就是说，当你编译 for 循环时
Dialogue: 0,0:36:59.91,0:37:07.42,english,,0,0,0,,or you compile a while loop, if they logically do the same thing, they might end up looking identical as zeros and ones.
Dialogue: 0,0:36:59.91,0:37:07.42,chinese,,0,0,0,,或编译一个 while 循环，如果它们在逻辑上做的是同一件事，那么它们最终可能看起来就像 0 和 1 一样。
Dialogue: 0,0:37:07.42,0:37:11.82,english,,0,0,0,,And so, therefore, it's not necessarily predictable that you'll get back the original code, why?
Dialogue: 0,0:37:07.42,0:37:11.82,chinese,,0,0,0,,因此，并不一定能预测你能拿回原始代码，为什么？
Dialogue: 0,0:37:11.82,0:37:19.35,english,,0,0,0,,Because the zeros and ones might not know, so to speak, whether it was a for loop or a while loop, so maybe compiling will show you one or the other.
Dialogue: 0,0:37:11.82,0:37:19.35,chinese,,0,0,0,,因为 0 和 1 可能不知道是 for 循环还是 while 循环，所以编译时可能会显示其中一个。
Dialogue: 0,0:37:19.35,0:37:24.57,english,,0,0,0,,And honestly, decompiling, while possible-- and it's one way of reverse engineering someone's product.
Dialogue: 0,0:37:19.35,0:37:24.57,chinese,,0,0,0,,老实说，反编译虽然可行，但也是逆向工程的一种方法。
Dialogue: 0,0:37:24.57,0:37:34.02,english,,0,0,0,,Odds are, if you're good enough to start reading code that's been decompiled and reading through the messiness of it, odds are you have the talent probably to just write that same program from scratch
Dialogue: 0,0:37:24.57,0:37:34.02,chinese,,0,0,0,,如果你有足够的能力开始阅读已经反编译过的代码，并能读懂其中的杂乱无章，那么你就有可能具备从头开始编写相同程序的才能。
Dialogue: 0,0:37:34.02,0:37:34.65,english,,0,0,0,,yourself.
Dialogue: 0,0:37:34.65,0:37:40.41,english,,0,0,0,,Now, that's an overstatement, perhaps, but it's not quite as easy or threatening as you might first think.
Dialogue: 0,0:37:34.65,0:37:40.41,chinese,,0,0,0,,现在看来，这也许有点言过其实，但它并不像你最初想象的那样容易或具有威胁性。
Dialogue: 0,0:37:40.41,0:37:50.04,english,,0,0,0,,So in general, once code is compiled, it's pretty challenging, time consuming, costly to reverse engineer it, much like it would be in the real world, right?
Dialogue: 0,0:37:40.41,0:37:50.04,chinese,,0,0,0,,因此，一般来说，代码一旦编译完成，要对其进行逆向工程就相当具有挑战性，既费时又费钱，就像在现实世界中一样，对吗？
Dialogue: 0,0:37:50.04,0:37:52.86,english,,0,0,0,,Like all of us have some kind of phone, probably, nowadays in our pocket.
Dialogue: 0,0:37:50.04,0:37:52.86,chinese,,0,0,0,,如今，我们每个人的口袋里都可能装着某种手机。
Dialogue: 0,0:37:52.86,0:37:57.06,english,,0,0,0,,There's nothing stopping you from opening it up somehow, poking around, recreating what's there.
Dialogue: 0,0:37:52.86,0:37:57.06,chinese,,0,0,0,,没有什么能阻止你以某种方式打开它，四处探寻，重现那里的一切。
Dialogue: 0,0:37:57.06,0:37:59.13,english,,0,0,0,,That's a huge amount of effort, most likely.
Dialogue: 0,0:37:57.06,0:37:59.13,chinese,,0,0,0,,这很可能是一个巨大的工作量。
Dialogue: 0,0:37:59.13,0:38:03.31,english,,0,0,0,,And at that point, maybe you should just invent the phone, instead of trying to reverse engineer it.
Dialogue: 0,0:37:59.13,0:38:03.31,chinese,,0,0,0,,到那时，也许你应该发明手机，而不是试图逆向工程它。
Dialogue: 0,0:38:03.31,0:38:06.33,english,,0,0,0,,So same kind of idea in the physical world.
Dialogue: 0,0:38:03.31,0:38:06.33,chinese,,0,0,0,,因此，在物理世界中也有同样的想法。
Dialogue: 0,0:38:06.33,0:38:13.05,english,,0,0,0,,Any questions, then, on compiling, or even decompiling in these forms?
Dialogue: 0,0:38:06.33,0:38:13.05,chinese,,0,0,0,,那么，对于这些形式的编译甚至反编译有什么问题吗？
Dialogue: 0,0:38:13.05,0:38:17.16,english,,0,0,0,,All right, so odds are, at this point, not only I, but you have made mistakes.
Dialogue: 0,0:38:13.05,0:38:17.16,chinese,,0,0,0,,好吧，现在看来，不仅是我，你们也有可能犯错。
Dialogue: 0,0:38:17.16,0:38:26.49,english,,0,0,0,,And you've written buggy code-- a bug in a code is just a mistake, a logical error or otherwise, where the code just does not behave correctly as you intend.
Dialogue: 0,0:38:17.16,0:38:26.49,chinese,,0,0,0,,你写的代码有漏洞--代码中的漏洞就是一个错误，不管是逻辑错误还是其他错误，代码就是不能按照你的意图正确运行。
Dialogue: 0,0:38:26.49,0:38:35.32,english,,0,0,0,,And up until now, odds are, your debugging techniques have been to maybe look back at what I did in class, maybe ask a question online or in-person.
Dialogue: 0,0:38:26.49,0:38:35.32,chinese,,0,0,0,,到目前为止，你的调试技巧很可能就是回顾我在课堂上的表现，或者在网上或当面提问。
Dialogue: 0,0:38:35.32,0:38:39.57,english,,0,0,0,,But ultimately, it'd be nice if you had some tools of your own with which to debug code.
Dialogue: 0,0:38:35.32,0:38:39.57,chinese,,0,0,0,,但归根结底，如果你有一些自己的工具来调试代码，那就更好了。
Dialogue: 0,0:38:39.57,0:38:41.58,english,,0,0,0,,And this, honestly, is a lifelong skill.
Dialogue: 0,0:38:39.57,0:38:41.58,chinese,,0,0,0,,老实说，这是一项终身技能。
Dialogue: 0,0:38:41.58,0:38:47.91,english,,0,0,0,,You're not going to emerge from CS50-- and even 20 years from now, you're not going to be writing-- if you're writing code at all-- correct code all of the time.
Dialogue: 0,0:38:41.58,0:38:47.91,chinese,,0,0,0,,你不可能从 CS50 中脱颖而出，甚至 20 年后，你也不可能一直写出正确的代码（如果你写的是代码的话）。
Dialogue: 0,0:38:47.91,0:38:50.82,english,,0,0,0,,Like, all of us on the staff continue to write bugs.
Dialogue: 0,0:38:47.91,0:38:50.82,chinese,,0,0,0,,比如，我们所有员工都在继续写 bug。
Dialogue: 0,0:38:50.82,0:38:55.54,english,,0,0,0,,Hopefully, they get a little more sophisticated, and not sort of like, oops, I missed a semicolon.
Dialogue: 0,0:38:50.82,0:38:55.54,chinese,,0,0,0,,希望他们能变得更成熟一些，而不是像 "哎呀，我漏掉了一个分号 "那样。
Dialogue: 0,0:38:55.54,0:38:57.66,english,,0,0,0,,But even those kinds of mistakes, we make too.
Dialogue: 0,0:38:55.54,0:38:57.66,chinese,,0,0,0,,但即使是这样的错误，我们也会犯。
Dialogue: 0,0:38:57.66,0:39:03.55,english,,0,0,0,,But there's tools out there and techniques that can make your life easier when it comes to solving those problems.
Dialogue: 0,0:38:57.66,0:39:03.55,chinese,,0,0,0,,但是，在解决这些问题时，有一些工具和技术可以让你的生活变得更轻松。
Dialogue: 0,0:39:03.55,0:39:06.36,english,,0,0,0,,Now, the term bug has actually been around for decades.
Dialogue: 0,0:39:03.55,0:39:06.36,chinese,,0,0,0,,现在，"窃听器 "这个词实际上已经存在了几十年。
Dialogue: 0,0:39:06.36,0:39:13.65,english,,0,0,0,,But a fun story to tell is that the first documented actual bug was actually somehow connected to Harvard.
Dialogue: 0,0:39:06.36,0:39:13.65,chinese,,0,0,0,,不过，有一个有趣的故事是，第一个记录在案的真正错误实际上与哈佛大学有某种联系。
Dialogue: 0,0:39:13.65,0:39:22.89,english,,0,0,0,,In fact, this is the logbook relating to the Harvard Mark II computer from 1947, whereby if you read the notes here-- and I'll Zoom in-- this
Dialogue: 0,0:39:13.65,0:39:22.89,chinese,,0,0,0,,事实上，这是 1947 年与哈佛 Mark II 计算机有关的日志，如果你读了这里的注释--我将放大--这个
Dialogue: 0,0:39:22.89,0:39:29.16,english,,0,0,0,,was an actual moth discovered inside of this big mainframe computer that was causing some kind of problems.
Dialogue: 0,0:39:22.89,0:39:29.16,chinese,,0,0,0,,是在这台大型计算机主机内发现了一只真正的蛀虫，它造成了某种问题。
Dialogue: 0,0:39:29.16,0:39:33.61,english,,0,0,0,,And the engineers there at the time actually thought it was funny that, wow, physical bug actually explains the issue.
Dialogue: 0,0:39:29.16,0:39:33.61,chinese,,0,0,0,,当时在场的工程师们还觉得这很有趣：哇，物理错误居然能解释这个问题。
Dialogue: 0,0:39:33.61,0:39:39.09,english,,0,0,0,,And it's been forever taped to this sheet of paper, which I believe now is on display in the Smithsonian.
Dialogue: 0,0:39:33.61,0:39:39.09,chinese,,0,0,0,,它被永远地粘在了这张纸上，我相信这张纸现在正在史密森尼博物馆展出。
Dialogue: 0,0:39:39.09,0:39:43.26,english,,0,0,0,,With that said, this is just representative, too, of a logical bug.
Dialogue: 0,0:39:39.09,0:39:43.26,chinese,,0,0,0,,尽管如此，这也只是一个逻辑错误的代表。
Dialogue: 0,0:39:43.26,0:39:53.64,english,,0,0,0,,And that story is actually-- that story was often retold by a famous mathematician, then computer scientist really, Dr. Grace Hopper, who actually worked not only on the Harvard Mark II
Dialogue: 0,0:39:43.26,0:39:53.64,chinese,,0,0,0,,实际上，这个故事经常被一位著名的数学家，也就是后来的计算机科学家格蕾丝-霍珀博士复述。
Dialogue: 0,0:39:53.64,0:39:57.21,english,,0,0,0,,computer, but its predecessor, the Harvard Mark I.
Dialogue: 0,0:39:53.64,0:39:57.21,chinese,,0,0,0,,它的前身是哈佛 Mark I 计算机。
Dialogue: 0,0:39:57.21,0:40:04.10,english,,0,0,0,,And if you ever spent time, yet, in the engineering building across the river here, you can actually see much of this computer, which
Dialogue: 0,0:39:57.21,0:40:04.10,chinese,,0,0,0,,如果你曾在河对岸的工程大楼里待过一段时间，你就能看到这台计算机的许多部分。
Dialogue: 0,0:40:04.10,0:40:07.02,english,,0,0,0,,is along the wall when you first walk into the Science and Engineering
Dialogue: 0,0:40:04.10,0:40:07.02,chinese,,0,0,0,,当你第一次走进科学与工程学院的时候，你会发现墙边有一个"......
Dialogue: 0,0:40:07.02,0:40:07.53,english,,0,0,0,,Complex.
Dialogue: 0,0:40:07.53,0:40:11.07,english,,0,0,0,,And indeed, as you've probably heard growing up, this is a mainframe computer.
Dialogue: 0,0:40:07.53,0:40:11.07,chinese,,0,0,0,,事实上，正如你在成长过程中可能听说过的，这是一台大型计算机。
Dialogue: 0,0:40:11.07,0:40:18.24,english,,0,0,0,,This is what Macs and PCs, so to speak, looked like back in the day, with very physical things that essentially implemented the zeros
Dialogue: 0,0:40:11.07,0:40:18.24,chinese,,0,0,0,,这就是 Mac 和 PC 当年的样子，它们都有一个非常实体的东西，基本上实现了零的功能
Dialogue: 0,0:40:18.24,0:40:22.41,english,,0,0,0,,and ones that you and I take for granted now being miniaturized in our laptops and phones.
Dialogue: 0,0:40:18.24,0:40:22.41,chinese,,0,0,0,,而你我认为理所当然的那些东西，现在都已微型化，装进了我们的笔记本电脑和手机中。
Dialogue: 0,0:40:22.41,0:40:23.91,english,,0,0,0,,So there's a piece of history there.
Dialogue: 0,0:40:22.41,0:40:23.91,chinese,,0,0,0,,所以这里有一段历史。
Dialogue: 0,0:40:23.91,0:40:27.39,english,,0,0,0,,If you visit that side of campus sometime, do take a look.
Dialogue: 0,0:40:23.91,0:40:27.39,chinese,,0,0,0,,如果有机会去校园那边看看，一定要去。
Dialogue: 0,0:40:27.39,0:40:31.35,english,,0,0,0,,But let's consider, then, how we solve not, of course, physical bugs, but logical bugs.
Dialogue: 0,0:40:27.39,0:40:31.35,chinese,,0,0,0,,但是，让我们考虑一下，我们如何解决的当然不是物理上的错误，而是逻辑上的错误。
Dialogue: 0,0:40:31.35,0:40:40.32,english,,0,0,0,,And let's consider something like this from last week, whereby, we were trying very simply to print like this column of three bricks using hashtags of sorts.
Dialogue: 0,0:40:31.35,0:40:40.32,chinese,,0,0,0,,让我们考虑一下上周发生的事情，我们试图用标签打印这三块砖头，非常简单。
Dialogue: 0,0:40:40.32,0:40:44.40,english,,0,0,0,,So let me go over here in just a moment to VS Code.
Dialogue: 0,0:40:40.32,0:40:44.40,chinese,,0,0,0,,所以，让我马上去看看 VS Code。
Dialogue: 0,0:40:44.40,0:40:47.08,english,,0,0,0,,And I'm going to go ahead and open a program I wrote in advance.
Dialogue: 0,0:40:44.40,0:40:47.08,chinese,,0,0,0,,我现在要打开一个事先写好的程序。
Dialogue: 0,0:40:47.08,0:40:51.51,english,,0,0,0,,And I'm bringing it to class because there's a bug in it, and I'd like to figure out how to solve this bug.
Dialogue: 0,0:40:47.08,0:40:51.51,chinese,,0,0,0,,我把它带到课堂上是因为它有一个漏洞，我想知道如何解决这个漏洞。
Dialogue: 0,0:40:51.51,0:40:56.16,english,,0,0,0,,So let me open up a buggy0.c, which is version 0 of my code.
Dialogue: 0,0:40:51.51,0:40:56.16,chinese,,0,0,0,,因此，让我打开 buggy0.c，这是我代码的第 0 版。
Dialogue: 0,0:40:56.16,0:40:58.20,english,,0,0,0,,And let's just take a quick peek at what's here.
Dialogue: 0,0:40:56.16,0:40:58.20,chinese,,0,0,0,,让我们快速浏览一下这里的内容。
Dialogue: 0,0:40:58.20,0:40:58.95,english,,0,0,0,,It's pretty short.
Dialogue: 0,0:40:58.20,0:40:58.95,chinese,,0,0,0,,很短。
Dialogue: 0,0:40:58.95,0:41:07.79,english,,0,0,0,,It includes only stdio.h, it uses printf, it uses a for loop, and the goal, quite simply, is to print out that column of three bricks.
Dialogue: 0,0:40:58.95,0:41:07.79,chinese,,0,0,0,,它只包含 stdio.h，使用 printf，使用 for 循环，目的很简单，就是打印出那列三个砖块。
Dialogue: 0,0:41:07.79,0:41:13.36,english,,0,0,0,,Now, it's short enough that some of you, if you're getting comfy already with C, you might already see the logical bug.
Dialogue: 0,0:41:07.79,0:41:13.36,chinese,,0,0,0,,现在，它已经足够短了，如果你们中的一些人已经熟悉了 C 语言，你们可能已经看到了逻辑错误。
Dialogue: 0,0:41:13.36,0:41:16.20,english,,0,0,0,,It's not a syntax error, like it will compile and run.
Dialogue: 0,0:41:13.36,0:41:16.20,chinese,,0,0,0,,这不是语法错误，因为它可以编译和运行。
Dialogue: 0,0:41:16.20,0:41:17.28,english,,0,0,0,,But there's a bug there.
Dialogue: 0,0:41:16.20,0:41:17.28,chinese,,0,0,0,,但这里有个漏洞。
Dialogue: 0,0:41:17.28,0:41:27.74,english,,0,0,0,,And suppose that I'm very new to C, I'm very uncomfortable with C, it's 2:00 AM and I just can't see the bug, what are my recourses here for actually finding a mistake like this?
Dialogue: 0,0:41:17.28,0:41:27.74,chinese,,0,0,0,,假设我是 C 语言的新手，我对 C 语言很不熟悉，现在是凌晨 2 点，我就是看不到这个错误，那么我有什么办法来发现这样的错误呢？
Dialogue: 0,0:41:27.74,0:41:29.37,english,,0,0,0,,Well, first, let's look at the symptom.
Dialogue: 0,0:41:27.74,0:41:29.37,chinese,,0,0,0,,首先，我们来看看症状。
Dialogue: 0,0:41:29.37,0:41:31.74,english,,0,0,0,,Let me go down to my terminal window.
Dialogue: 0,0:41:29.37,0:41:31.74,chinese,,0,0,0,,让我进入终端窗口。
Dialogue: 0,0:41:31.74,0:41:36.12,english,,0,0,0,,I'm going to use make buggy0 because, again, the file is called buggyo.c.
Dialogue: 0,0:41:31.74,0:41:36.12,chinese,,0,0,0,,我将使用 make buggy0，因为文件名还是 buggyo.c。
Dialogue: 0,0:41:36.12,0:41:37.26,english,,0,0,0,,I'm not going to use clang.
Dialogue: 0,0:41:36.12,0:41:37.26,chinese,,0,0,0,,我不会用 clang。
Dialogue: 0,0:41:37.26,0:41:39.88,english,,0,0,0,,In fact, I'm never really going to use clang manually here on out.
Dialogue: 0,0:41:37.26,0:41:39.88,chinese,,0,0,0,,事实上，从现在开始我再也不会手动使用 clang 了。
Dialogue: 0,0:41:39.88,0:41:42.43,english,,0,0,0,,I'm just going to use make because it makes our lives easier.
Dialogue: 0,0:41:39.88,0:41:42.43,chinese,,0,0,0,,我只想用 make，因为它能让我们的生活更轻松。
Dialogue: 0,0:41:42.43,0:41:43.56,english,,0,0,0,,It does compile.
Dialogue: 0,0:41:42.43,0:41:43.56,chinese,,0,0,0,,确实可以编译。
Dialogue: 0,0:41:43.56,0:41:45.39,english,,0,0,0,,No errors, so it's not syntax.
Dialogue: 0,0:41:43.56,0:41:45.39,chinese,,0,0,0,,没有错误，所以不是语法问题。
Dialogue: 0,0:41:45.39,0:41:47.67,english,,0,0,0,,It's not something silly like a missing semicolon.
Dialogue: 0,0:41:45.39,0:41:47.67,chinese,,0,0,0,,这不是什么分号丢失之类的傻事。
Dialogue: 0,0:41:47.67,0:41:59.61,english,,0,0,0,,But when I run ./buggy0, I, of course, see one, two, three, four-- and this, of course, does not match the one, two, three bricks that I actually intended for that column.
Dialogue: 0,0:41:47.67,0:41:59.61,chinese,,0,0,0,,但是，当我运行 ./buggy0 时，我当然会看到 1、2、3、4 -- 当然，这与我为该列设计的 1、2、3 块砖并不一致。
Dialogue: 0,0:41:59.61,0:42:02.97,english,,0,0,0,,And yet, I'm starting counting at 0, as I usually do.
Dialogue: 0,0:41:59.61,0:42:02.97,chinese,,0,0,0,,然而，我还是像往常一样，从 0 开始计数。
Dialogue: 0,0:42:02.97,0:42:03.93,english,,0,0,0,,I've got three.
Dialogue: 0,0:42:02.97,0:42:03.93,chinese,,0,0,0,,我有三个。
Dialogue: 0,0:42:03.93,0:42:05.28,english,,0,0,0,,I'm going up to three.
Dialogue: 0,0:42:03.93,0:42:05.28,chinese,,0,0,0,,我要去三个。
Dialogue: 0,0:42:05.28,0:42:06.78,english,,0,0,0,,So where is my logical error?
Dialogue: 0,0:42:05.28,0:42:06.78,chinese,,0,0,0,,那么，我的逻辑错误在哪里？
Dialogue: 0,0:42:06.78,0:42:10.15,english,,0,0,0,,If it hasn't obviously jumped out at you already, well, how can I solve this?
Dialogue: 0,0:42:06.78,0:42:10.15,chinese,,0,0,0,,如果你还没有明显地意识到这一点，那么，我该如何解决这个问题呢？
Dialogue: 0,0:42:10.15,0:42:16.08,english,,0,0,0,,Well, first and foremost, perhaps the best technique for solving bugs, at least early on, is just use printf.
Dialogue: 0,0:42:10.15,0:42:16.08,chinese,,0,0,0,,首先，解决 bug 的最佳方法也许就是使用 printf，至少在早期是这样。
Dialogue: 0,0:42:16.08,0:42:20.02,english,,0,0,0,,Like thus far, we've used sprint say, Hello, and other things on the screen.
Dialogue: 0,0:42:16.08,0:42:20.02,chinese,,0,0,0,,到目前为止，我们已经在屏幕上使用了 "冲刺说"、"你好 "等功能。
Dialogue: 0,0:42:20.02,0:42:22.53,english,,0,0,0,,But printf is just a function for printing anything.
Dialogue: 0,0:42:20.02,0:42:22.53,chinese,,0,0,0,,但 printf 只是一个用于打印任何内容的函数。
Dialogue: 0,0:42:22.53,0:42:31.35,english,,0,0,0,,And there's no reason you can't temporarily use printf to print out the contents of variables, what's going on inside of your program, just to figure out where your mistake is.
Dialogue: 0,0:42:22.53,0:42:31.35,chinese,,0,0,0,,你没有理由不临时使用 printf 来打印变量的内容、程序内部的情况，以便找出错误所在。
Dialogue: 0,0:42:31.35,0:42:32.94,english,,0,0,0,,And then you can delete that line of code later.
Dialogue: 0,0:42:31.35,0:42:32.94,chinese,,0,0,0,,之后你就可以删除这行代码了。
Dialogue: 0,0:42:32.94,0:42:34.60,english,,0,0,0,,It doesn't have to stay there forever.
Dialogue: 0,0:42:32.94,0:42:34.60,chinese,,0,0,0,,它不必永远留在那里。
Dialogue: 0,0:42:34.60,0:42:35.74,english,,0,0,0,,So let me do this.
Dialogue: 0,0:42:34.60,0:42:35.74,chinese,,0,0,0,,那就让我来吧。
Dialogue: 0,0:42:35.74,0:42:45.69,english,,0,0,0,,Instead of just printing out in VS Code the hash symbol, let me do a little safety check here and print out the value of i.
Dialogue: 0,0:42:35.74,0:42:45.69,chinese,,0,0,0,,与其在 VS 代码中直接打印出哈希符号，不如让我在这里做一下安全检查，打印出 i 的值。
Dialogue: 0,0:42:45.69,0:42:51.61,english,,0,0,0,,So let me go ahead and say something like, i is-- now I want to say i is this.
Dialogue: 0,0:42:45.69,0:42:51.61,chinese,,0,0,0,,所以，让我继续说，i is -- 现在我想说 i is this。
Dialogue: 0,0:42:51.61,0:42:54.54,english,,0,0,0,,But, of course, this is not how I print out the value of i.
Dialogue: 0,0:42:51.61,0:42:54.54,chinese,,0,0,0,,当然，我并不是这样打印出 i 的值的。
Dialogue: 0,0:42:54.54,0:42:58.93,english,,0,0,0,,If I want to print out the value of i, what should I put here?
Dialogue: 0,0:42:54.54,0:42:58.93,chinese,,0,0,0,,如果我想打印出 i 的值，应该在这里输入什么？
Dialogue: 0,0:42:58.93,0:43:02.16,english,,0,0,0,,So %i for integer, instead of %s for string.
Dialogue: 0,0:42:58.93,0:43:02.16,chinese,,0,0,0,,所以 %i 表示整数，而不是 %s 表示字符串。
Dialogue: 0,0:43:02.16,0:43:03.41,english,,0,0,0,,So they're still placeholders.
Dialogue: 0,0:43:02.16,0:43:03.41,chinese,,0,0,0,,因此，它们仍然是占位符。
Dialogue: 0,0:43:03.41,0:43:04.93,english,,0,0,0,,But we use %s for integers.
Dialogue: 0,0:43:03.41,0:43:04.93,chinese,,0,0,0,,但我们使用 %s 表示整数。
Dialogue: 0,0:43:04.93,0:43:09.25,english,,0,0,0,,And now if I want to print out i, I just need the comma as the second argument, and then i.
Dialogue: 0,0:43:04.93,0:43:09.25,chinese,,0,0,0,,现在，如果我想打印出 i，只需将逗号作为第二个参数，然后再打印出 i。
Dialogue: 0,0:43:09.25,0:43:13.00,english,,0,0,0,,All right, let me go ahead and back to my terminal window.
Dialogue: 0,0:43:09.25,0:43:13.00,chinese,,0,0,0,,好了，让我回到终端窗口。
Dialogue: 0,0:43:13.00,0:43:15.76,english,,0,0,0,,Let me recompile the program because I've changed it.
Dialogue: 0,0:43:13.00,0:43:15.76,chinese,,0,0,0,,让我重新编译程序，因为我改动了它。
Dialogue: 0,0:43:15.76,0:43:18.88,english,,0,0,0,,That still works fine, ./buggy0.
Dialogue: 0,0:43:15.76,0:43:18.88,chinese,,0,0,0,,./buggy0 仍能正常工作。
Dialogue: 0,0:43:18.88,0:43:22.54,english,,0,0,0,,And now, let me increase the size of my terminal window here.
Dialogue: 0,0:43:18.88,0:43:22.54,chinese,,0,0,0,,现在，让我增大终端窗口的大小。
Dialogue: 0,0:43:22.54,0:43:25.51,english,,0,0,0,,You just see some diagnostic information, if you will.
Dialogue: 0,0:43:22.54,0:43:25.51,chinese,,0,0,0,,你可以看到一些诊断信息。
Dialogue: 0,0:43:25.51,0:43:26.56,english,,0,0,0,,This is not the goal.
Dialogue: 0,0:43:25.51,0:43:26.56,chinese,,0,0,0,,这不是我们的目标。
Dialogue: 0,0:43:26.56,0:43:30.07,english,,0,0,0,,This is not what you should be submitting for this homework problem, were it one.
Dialogue: 0,0:43:26.56,0:43:30.07,chinese,,0,0,0,,这不是你应该提交的作业问题（如果有的话）。
Dialogue: 0,0:43:30.07,0:43:34.45,english,,0,0,0,,But it is helping us diagnostically know that, OK, when i is zero, here's a hash.
Dialogue: 0,0:43:30.07,0:43:34.45,chinese,,0,0,0,,但它可以帮助我们诊断地知道，好的，当 i 为零时，这里有一个哈希值。
Dialogue: 0,0:43:34.45,0:43:36.18,english,,0,0,0,,When i is 1, here's a hash.
Dialogue: 0,0:43:34.45,0:43:36.18,chinese,,0,0,0,,当 i 为 1 时，这里有一个哈希值。
Dialogue: 0,0:43:36.18,0:43:37.39,english,,0,0,0,,When i is two, here's a hash.
Dialogue: 0,0:43:36.18,0:43:37.39,chinese,,0,0,0,,当 i 是 2 时，这里有一个散列。
Dialogue: 0,0:43:37.39,0:43:39.01,english,,0,0,0,,When i is 3, here's a hash.
Dialogue: 0,0:43:37.39,0:43:39.01,chinese,,0,0,0,,当 i 为 3 时，这里有一个散列。
Dialogue: 0,0:43:39.01,0:43:39.85,english,,0,0,0,,Well, wait a minute.
Dialogue: 0,0:43:39.01,0:43:39.85,chinese,,0,0,0,,等一下
Dialogue: 0,0:43:39.85,0:43:41.53,english,,0,0,0,,That's one, two, three, four.
Dialogue: 0,0:43:39.85,0:43:41.53,chinese,,0,0,0,,一、二、三、四。
Dialogue: 0,0:43:41.53,0:43:44.36,english,,0,0,0,,So clearly, I'm printing it one too many times.
Dialogue: 0,0:43:41.53,0:43:44.36,chinese,,0,0,0,,很明显，我打印的次数太多了。
Dialogue: 0,0:43:44.36,0:43:48.13,english,,0,0,0,,So let me look back at the code here by shrinking my terminal window.
Dialogue: 0,0:43:44.36,0:43:48.13,chinese,,0,0,0,,因此，让我缩小终端窗口，回顾一下这里的代码。
Dialogue: 0,0:43:48.13,0:43:53.08,english,,0,0,0,,And let me just ask the group, where is, in fact, the mistake?
Dialogue: 0,0:43:48.13,0:43:53.08,chinese,,0,0,0,,我想问问大家，错误究竟出在哪里？
Dialogue: 0,0:43:53.08,0:43:56.08,english,,0,0,0,,Or what, equivalently, would be the solution?
Dialogue: 0,0:43:53.08,0:43:56.08,chinese,,0,0,0,,或者说，相应的解决方案是什么？
Dialogue: 0,0:43:56.08,0:43:57.56,english,,0,0,0,,Yeah, in the middle.
Dialogue: 0,0:43:56.08,0:43:57.56,chinese,,0,0,0,,是的，在中间。
Dialogue: 0,0:43:57.56,0:44:00.02,english,,0,0,0,,AUDIENCE: [INAUDIBLE]
Dialogue: 0,0:44:00.02,0:44:03.55,english,,0,0,0,,DAVID MALAN: Yeah, instead of less than or equal to, use just less than.
Dialogue: 0,0:44:00.02,0:44:03.55,chinese,,0,0,0,,DAVID MALAN：是的，与其用小于或等于，不如用小于。
Dialogue: 0,0:44:03.55,0:44:05.30,english,,0,0,0,,So you've got to kind of pick a lane here.
Dialogue: 0,0:44:03.55,0:44:05.30,chinese,,0,0,0,,所以，你得在这里选一条道。
Dialogue: 0,0:44:05.30,0:44:10.88,english,,0,0,0,,If you're going to start counting from 0, you generally use less than, and go up to, but not through the value.
Dialogue: 0,0:44:05.30,0:44:10.88,chinese,,0,0,0,,如果要从 0 开始计数，一般使用小于，直至，但不是通过值。
Dialogue: 0,0:44:10.88,0:44:17.30,english,,0,0,0,,Or if you prefer, like in the human world, counting from 1 on up, you can use less than or equal to, but you have to be consistent.
Dialogue: 0,0:44:10.88,0:44:17.30,chinese,,0,0,0,,或者，如果你愿意，就像人类世界一样，从 1 开始往上数，你也可以使用小于或等于，但必须保持一致。
Dialogue: 0,0:44:17.30,0:44:22.61,english,,0,0,0,,And in general, as a programmer, just always start counting from 0 if you're doing something canonical like this.
Dialogue: 0,0:44:17.30,0:44:22.61,chinese,,0,0,0,,一般来说，作为程序员，如果要做类似这样的规范性工作，就一定要从 0 开始计数。
Dialogue: 0,0:44:22.61,0:44:27.86,english,,0,0,0,,But the solution is, indeed, just to change this by changing the greater less than or equal to the less than.
Dialogue: 0,0:44:22.61,0:44:27.86,chinese,,0,0,0,,但实际上，解决的办法就是通过将大于小于或等于小于来改变这种情况。
Dialogue: 0,0:44:27.86,0:44:36.50,english,,0,0,0,,If I recompile this program with make buggy0, and then do .buggy0 again-- and let me increase the size of my terminal window.
Dialogue: 0,0:44:27.86,0:44:36.50,chinese,,0,0,0,,如果我用 make buggy0 重新编译这个程序，然后再做一次 .buggy0 -- 让我增大终端窗口的大小。
Dialogue: 0,0:44:36.50,0:44:39.05,english,,0,0,0,,Now, you see, OK, almost the same output.
Dialogue: 0,0:44:36.50,0:44:39.05,chinese,,0,0,0,,现在，你看，OK，输出几乎一样。
Dialogue: 0,0:44:39.05,0:44:44.33,english,,0,0,0,,But indeed, i starts at 0 and goes up to, but not through, three.
Dialogue: 0,0:44:39.05,0:44:44.33,chinese,,0,0,0,,但事实上，i 从 0 开始，一直到 3，但不是通过 3。
Dialogue: 0,0:44:44.33,0:44:48.92,english,,0,0,0,,All right, so printf, in short, can be your first diagnostic tool.
Dialogue: 0,0:44:44.33,0:44:48.92,chinese,,0,0,0,,好了，简而言之，printf 可以成为你的第一个诊断工具。
Dialogue: 0,0:44:48.92,0:44:51.50,english,,0,0,0,,Instead of just staring at the screen or raising your hand--
Dialogue: 0,0:44:48.92,0:44:51.50,chinese,,0,0,0,,而不是只盯着屏幕或举起手
Dialogue: 0,0:44:51.50,0:44:57.28,english,,0,0,0,,I mean, use printf to see, literally, what's going on inside of your program by just printing out things of interest.
Dialogue: 0,0:44:51.50,0:44:57.28,chinese,,0,0,0,,我的意思是，使用 printf 可以打印出感兴趣的内容，从而了解程序内部发生了什么。
Dialogue: 0,0:44:57.28,0:45:02.84,english,,0,0,0,,And then once you've solved the problem, you can go back into your code, as I'll do here, by shrinking my terminal window.
Dialogue: 0,0:44:57.28,0:45:02.84,chinese,,0,0,0,,一旦你解决了问题，你就可以回到你的代码中，就像我在这里做的那样，缩小我的终端窗口。
Dialogue: 0,0:45:02.84,0:45:04.61,english,,0,0,0,,I'll delete the printf line.
Dialogue: 0,0:45:02.84,0:45:04.61,chinese,,0,0,0,,我会删除 printf 行。
Dialogue: 0,0:45:04.61,0:45:08.87,english,,0,0,0,,And now I'm ready to share this program with the world or submit it as homework or the like.
Dialogue: 0,0:45:04.61,0:45:08.87,chinese,,0,0,0,,现在，我已经准备好与全世界分享这个程序，或者把它作为家庭作业之类的提交。
Dialogue: 0,0:45:08.87,0:45:11.39,english,,0,0,0,,It's just meant there to be temporary.
Dialogue: 0,0:45:08.87,0:45:11.39,chinese,,0,0,0,,这只是暂时的。
Dialogue: 0,0:45:11.39,0:45:15.44,english,,0,0,0,,Any questions on printf as a debugging tool?
Dialogue: 0,0:45:11.39,0:45:15.44,chinese,,0,0,0,,有关于 printf 作为调试工具的问题吗？
Dialogue: 0,0:45:18.01,0:45:18.51,english,,0,0,0,,No?
Dialogue: 0,0:45:18.51,0:45:20.97,english,,0,0,0,,All right, well, that only gets us so far.
Dialogue: 0,0:45:18.51,0:45:20.97,chinese,,0,0,0,,好吧，那也只能到此为止了。
Dialogue: 0,0:45:20.97,0:45:28.86,english,,0,0,0,,And honestly, as your programs grow and grow and grow, it's going to actually get really annoying to start going in and adding printf's, then removing them, and figuring out,
Dialogue: 0,0:45:20.97,0:45:28.86,chinese,,0,0,0,,老实说，随着程序的不断发展壮大，开始添加 printf、删除 printf 并找出问题所在会变得非常烦人、
Dialogue: 0,0:45:28.86,0:45:31.86,english,,0,0,0,,if you've got multiple printf's, well, which one printed what?
Dialogue: 0,0:45:28.86,0:45:31.86,chinese,,0,0,0,,如果你有多个 printf，那么，哪个 printf 打印了什么？
Dialogue: 0,0:45:31.86,0:45:34.56,english,,0,0,0,,It just gets messy, eventually, to rely on printf alone.
Dialogue: 0,0:45:31.86,0:45:34.56,chinese,,0,0,0,,仅仅依靠 printf 最终会变得一团糟。
Dialogue: 0,0:45:34.56,0:45:41.04,english,,0,0,0,,So being a computer scientist, computer scientists have written software to make it easier to debug code.
Dialogue: 0,0:45:34.56,0:45:41.04,chinese,,0,0,0,,因此，作为一名计算机科学家，计算机科学家编写的软件可以让调试代码变得更容易。
Dialogue: 0,0:45:41.04,0:45:48.61,english,,0,0,0,,That software is what we would generally call a debugger, which would be the second tool of the trade that you can use to actually solve problems in your code.
Dialogue: 0,0:45:41.04,0:45:48.61,chinese,,0,0,0,,这个软件就是我们通常所说的调试器，它是你可以用来实际解决代码问题的第二个工具。
Dialogue: 0,0:45:48.61,0:45:52.69,english,,0,0,0,,Now, in the world of VS code, there's actually a debugger built in.
Dialogue: 0,0:45:48.61,0:45:52.69,chinese,,0,0,0,,现在，在 VS 代码的世界里，实际上已经内置了一个调试器。
Dialogue: 0,0:45:52.69,0:45:58.26,english,,0,0,0,,So the graphical user interface you're about to see in VS Code isn't specific to CS50, it actually comes with VS Code.
Dialogue: 0,0:45:52.69,0:45:58.26,chinese,,0,0,0,,所以，你将在 VS Code 中看到的图形用户界面并不是 CS50 特有的，它实际上是 VS Code 自带的。
Dialogue: 0,0:45:58.26,0:46:03.03,english,,0,0,0,,And it supports C, and C++, and Java, and Python, and lots of other languages too.
Dialogue: 0,0:45:58.26,0:46:03.03,chinese,,0,0,0,,它还支持 C、C++、Java、Python 和许多其他语言。
Dialogue: 0,0:46:03.03,0:46:07.65,english,,0,0,0,,But it's, admittedly, a little complicated to just start using the debugger.
Dialogue: 0,0:46:03.03,0:46:07.65,chinese,,0,0,0,,但不得不承认，刚开始使用调试器有点复杂。
Dialogue: 0,0:46:07.65,0:46:13.48,english,,0,0,0,,You have to create a configuration file and do some annoying steps that just get in the way of solving real problems.
Dialogue: 0,0:46:07.65,0:46:13.48,chinese,,0,0,0,,你必须创建一个配置文件，并执行一些恼人的步骤，这些步骤只会妨碍你解决实际问题。
Dialogue: 0,0:46:13.48,0:46:17.07,english,,0,0,0,,So we have automated the process for you of just starting the debugger.
Dialogue: 0,0:46:13.48,0:46:17.07,chinese,,0,0,0,,因此，我们为您自动完成了启动调试器的过程。
Dialogue: 0,0:46:17.07,0:46:19.68,english,,0,0,0,,And thereafter, it's sort of industry standard how you use it.
Dialogue: 0,0:46:17.07,0:46:19.68,chinese,,0,0,0,,此后，如何使用它就成了行业标准。
Dialogue: 0,0:46:19.68,0:46:23.38,english,,0,0,0,,But we save you the headache of having to create those configuration files.
Dialogue: 0,0:46:19.68,0:46:23.38,chinese,,0,0,0,,但我们为您省去了创建这些配置文件的麻烦。
Dialogue: 0,0:46:23.38,0:46:25.33,english,,0,0,0,,So, suppose I want to do this.
Dialogue: 0,0:46:23.38,0:46:25.33,chinese,,0,0,0,,所以，假设我想这样做。
Dialogue: 0,0:46:25.33,0:46:30.33,english,,0,0,0,,Suppose I want to try to debug this program step by step using special software.
Dialogue: 0,0:46:25.33,0:46:30.33,chinese,,0,0,0,,假设我想尝试使用专用软件逐步调试这个程序。
Dialogue: 0,0:46:30.33,0:46:31.81,english,,0,0,0,,Well, how can I do that?
Dialogue: 0,0:46:30.33,0:46:31.81,chinese,,0,0,0,,我该怎么做呢？
Dialogue: 0,0:46:31.81,0:46:41.79,english,,0,0,0,,Well, let me propose that if I revert this back to the original version where i was less than or equal to 3, I'm pretty sure that I was printing too many hashes.
Dialogue: 0,0:46:31.81,0:46:41.79,chinese,,0,0,0,,好吧，让我来提议一下，如果我把它恢复到 i 小于或等于 3 的原始版本，我很确定我打印了太多的哈希值。
Dialogue: 0,0:46:41.79,0:46:45.16,english,,0,0,0,,So I'm going to do this-- and you might have done this accidentally or never at all.
Dialogue: 0,0:46:41.79,0:46:45.16,chinese,,0,0,0,,所以我要这么做 -- 你可能不小心这么做了，或者根本就没这么做。
Dialogue: 0,0:46:45.16,0:46:54.39,english,,0,0,0,,But notice if you hover over the gutter, so to speak, in VS Code, the part of it all the way to the left of the editor, you see this sort of grayed out red dot.
Dialogue: 0,0:46:45.16,0:46:54.39,chinese,,0,0,0,,但请注意，如果你将鼠标悬停在 VS 代码中的 "沟槽 "上，也就是编辑器左侧的部分，你会看到一个灰色的红点。
Dialogue: 0,0:46:54.39,0:46:57.24,english,,0,0,0,,If you click there, it becomes a brighter red dot.
Dialogue: 0,0:46:54.39,0:46:57.24,chinese,,0,0,0,,如果点击这里，它就会变成一个更亮的红点。
Dialogue: 0,0:46:57.24,0:46:59.67,english,,0,0,0,,And this represents what we're going to call a breakpoint.
Dialogue: 0,0:46:57.24,0:46:59.67,chinese,,0,0,0,,这就是我们所说的断点。
Dialogue: 0,0:46:59.67,0:47:07.35,english,,0,0,0,,And this is just a visual indicator that you've put like a stop sign equivalent there, and you're telling the debugger in a moment, stop running my code there.
Dialogue: 0,0:46:59.67,0:47:07.35,chinese,,0,0,0,,这只是一个可视化的指示器，你在这里设置了一个等同于停止的标志，你在告诉调试器，停止在这里运行我的代码。
Dialogue: 0,0:47:07.35,0:47:07.92,english,,0,0,0,,Why?
Dialogue: 0,0:47:07.92,0:47:14.38,english,,0,0,0,,Because I prefer to step through my code at sort of a human speed, and not as computer speed where it runs all at once.
Dialogue: 0,0:47:07.92,0:47:14.38,chinese,,0,0,0,,因为我更喜欢以人的速度而不是电脑的速度来浏览我的代码。
Dialogue: 0,0:47:14.38,0:47:16.75,english,,0,0,0,,So I've set my breakpoint, which is step one.
Dialogue: 0,0:47:14.38,0:47:16.75,chinese,,0,0,0,,所以我设置了断点，这是第一步。
Dialogue: 0,0:47:16.75,0:47:18.58,english,,0,0,0,,And then step two is quite simply this.
Dialogue: 0,0:47:16.75,0:47:18.58,chinese,,0,0,0,,第二步就很简单了。
Dialogue: 0,0:47:18.58,0:47:26.01,english,,0,0,0,,Instead of running the program itself, run the command called debug50, and then ./buggy0.
Dialogue: 0,0:47:18.58,0:47:26.01,chinese,,0,0,0,,不要运行程序本身，而是运行名为 debug50 的命令，然后运行 ./buggy0。
Dialogue: 0,0:47:26.01,0:47:33.06,english,,0,0,0,,And now this will start your program, but inside of the debugger, which is a special program that smart people wrote that will empower
Dialogue: 0,0:47:26.01,0:47:33.06,chinese,,0,0,0,,现在，这将启动你的程序，但在调试器内部，调试器是聪明人编写的一个特殊程序，它将赋予你
Dialogue: 0,0:47:33.06,0:47:38.97,english,,0,0,0,,you to now step through your code line by line, and again, at your own comfort pace.
Dialogue: 0,0:47:33.06,0:47:38.97,chinese,,0,0,0,,现在，您可以按照自己的节奏逐行查看代码。
Dialogue: 0,0:47:38.97,0:47:43.08,english,,0,0,0,,I'm going to hit Enter, some stuff's going to happen on the screen-- whoops.
Dialogue: 0,0:47:38.97,0:47:43.08,chinese,,0,0,0,,我按下回车键，屏幕上就会出现一些东西--哎呀。
Dialogue: 0,0:47:43.08,0:47:45.76,english,,0,0,0,,Notice, this is a common mistake that I made accidentally here.
Dialogue: 0,0:47:43.08,0:47:45.76,chinese,,0,0,0,,注意，这是我不小心犯的一个常见错误。
Dialogue: 0,0:47:45.76,0:47:47.10,english,,0,0,0,,Looks like I've changed my code.
Dialogue: 0,0:47:45.76,0:47:47.10,chinese,,0,0,0,,看来我修改了代码。
Dialogue: 0,0:47:47.10,0:47:49.89,english,,0,0,0,,I did because I went in and changed the less than or equal to sign.
Dialogue: 0,0:47:47.10,0:47:49.89,chinese,,0,0,0,,我这样做是因为我修改了小于或等于号。
Dialogue: 0,0:47:49.89,0:47:52.86,english,,0,0,0,,So let me go ahead and rerun make buggy0--
Dialogue: 0,0:47:49.89,0:47:52.86,chinese,,0,0,0,,因此，让我继续重新运行 make buggy0--
Dialogue: 0,0:47:52.86,0:47:53.52,english,,0,0,0,,Enter.
Dialogue: 0,0:47:53.52,0:47:55.59,english,,0,0,0,,Good, now let me rerun debug50--
Dialogue: 0,0:47:53.52,0:47:55.59,chinese,,0,0,0,,很好，现在让我重新运行 debug50--
Dialogue: 0,0:47:55.59,0:47:57.81,english,,0,0,0,,Enter.
Dialogue: 0,0:47:57.81,0:48:06.01,english,,0,0,0,,And now some stuff just happened on the screen and it takes a moment to get started but once it's started you'll see this you'll still see your code.
Dialogue: 0,0:47:57.81,0:48:06.01,chinese,,0,0,0,,现在屏幕上出现了一些东西，启动需要一些时间，但一旦启动，你就会看到这个，你仍然会看到你的代码。
Dialogue: 0,0:48:06.01,0:48:09.41,english,,0,0,0,,But you'll see this yellow highlight, which you've probably not seen before.
Dialogue: 0,0:48:06.01,0:48:09.41,chinese,,0,0,0,,但你会看到这个黄色高亮，这可能是你以前从未见过的。
Dialogue: 0,0:48:09.41,0:48:13.44,english,,0,0,0,,And notice that it's specifically highlighting the same line that I set a breakpoint on.
Dialogue: 0,0:48:09.41,0:48:13.44,chinese,,0,0,0,,注意，它特别强调了我设置断点的那一行。
Dialogue: 0,0:48:13.44,0:48:13.95,english,,0,0,0,,Why?
Dialogue: 0,0:48:13.95,0:48:20.67,english,,0,0,0,,That just means the debugger has executed all of these lines, except for line 7.
Dialogue: 0,0:48:13.95,0:48:20.67,chinese,,0,0,0,,这意味着除第 7 行外，调试器已执行了所有这些行。
Dialogue: 0,0:48:20.67,0:48:23.34,english,,0,0,0,,It has broken at-- not in a bad way.
Dialogue: 0,0:48:20.67,0:48:23.34,chinese,,0,0,0,,它已经坏了，不是坏了。
Dialogue: 0,0:48:23.34,0:48:27.58,english,,0,0,0,,But it has paused execution on line 7, so it hasn't yet printed any hashes.
Dialogue: 0,0:48:23.34,0:48:27.58,chinese,,0,0,0,,但它在第 7 行暂停执行，因此尚未打印任何哈希值。
Dialogue: 0,0:48:27.58,0:48:30.45,english,,0,0,0,,And you can see that-- no hashes in the terminal window yet.
Dialogue: 0,0:48:27.58,0:48:30.45,chinese,,0,0,0,,你可以看到终端窗口中还没有哈希值。
Dialogue: 0,0:48:30.45,0:48:31.98,english,,0,0,0,,It's paused execution.
Dialogue: 0,0:48:30.45,0:48:31.98,chinese,,0,0,0,,这是暂停执行。
Dialogue: 0,0:48:31.98,0:48:37.41,english,,0,0,0,,But what's interesting with the debugger is the stuff over here on the left-hand side.
Dialogue: 0,0:48:31.98,0:48:37.41,chinese,,0,0,0,,但调试器的有趣之处在于左侧的内容。
Dialogue: 0,0:48:37.41,0:48:41.91,english,,0,0,0,,In the debugger here, you'll see, under variables, all of your so-called local variables.
Dialogue: 0,0:48:37.41,0:48:41.91,chinese,,0,0,0,,在调试器中，你会在变量下看到所有所谓的局部变量。
Dialogue: 0,0:48:41.91,0:48:45.32,english,,0,0,0,,And we haven't really made a distinction between local and something called global.
Dialogue: 0,0:48:41.91,0:48:45.32,chinese,,0,0,0,,我们还没有真正区分本地和所谓的全球。
Dialogue: 0,0:48:45.32,0:48:49.39,english,,0,0,0,,But for now, local variables just means all of the variables that exist in your function.
Dialogue: 0,0:48:45.32,0:48:49.39,chinese,,0,0,0,,但现在，局部变量只是指函数中存在的所有变量。
Dialogue: 0,0:48:49.39,0:48:52.11,english,,0,0,0,,So i currently has a value of 0.
Dialogue: 0,0:48:49.39,0:48:52.11,chinese,,0,0,0,,因此，i 目前的值为 0。
Dialogue: 0,0:48:52.11,0:48:53.41,english,,0,0,0,,OK, and that makes sense.
Dialogue: 0,0:48:52.11,0:48:53.41,chinese,,0,0,0,,好吧，这就说得通了。
Dialogue: 0,0:48:53.41,0:48:57.36,english,,0,0,0,,So now, how do I step through my code and see what it's doing?
Dialogue: 0,0:48:53.41,0:48:57.36,chinese,,0,0,0,,那么，现在我该如何逐步查看我的代码并了解它在做什么呢？
Dialogue: 0,0:48:57.36,0:49:03.63,english,,0,0,0,,Well, at the top of the screen here, you'll see some playback icons, kind of like a video player, but they have special meaning.
Dialogue: 0,0:48:57.36,0:49:03.63,chinese,,0,0,0,,在屏幕顶部，你会看到一些播放图标，有点像视频播放器，但它们有特殊含义。
Dialogue: 0,0:49:03.63,0:49:07.89,english,,0,0,0,,This first one will just play the rest of your program all the way to the end.
Dialogue: 0,0:49:03.63,0:49:07.89,chinese,,0,0,0,,第一个程序会一直播放到节目结束。
Dialogue: 0,0:49:07.89,0:49:13.11,english,,0,0,0,,So you only click that if you've sort of solved the problem and you just want to run it to completion like before.
Dialogue: 0,0:49:07.89,0:49:13.11,chinese,,0,0,0,,因此，只有当你已经解决了问题，只想像以前一样运行完成时，才会点击这个按钮。
Dialogue: 0,0:49:13.11,0:49:16.92,english,,0,0,0,,But the next three-- or next two, really, are really the juiciest.
Dialogue: 0,0:49:13.11,0:49:16.92,chinese,,0,0,0,,但接下来的三个，或者接下来的两个，真的，才是最精彩的。
Dialogue: 0,0:49:16.92,0:49:21.93,english,,0,0,0,,The second one here, if you hover over it, eventually, you'll see that it's called Step Over.
Dialogue: 0,0:49:16.92,0:49:21.93,chinese,,0,0,0,,这里的第二个，如果你把鼠标悬停在它上面，最终你会看到它叫做 "跨步"。
Dialogue: 0,0:49:21.93,0:49:28.63,english,,0,0,0,,Step Over means that the debugger will run this currently highlighted line of code, but it's not going to dive into it.
Dialogue: 0,0:49:21.93,0:49:28.63,chinese,,0,0,0,,步骤结束意味着调试器将运行当前高亮显示的这行代码，但不会深入研究。
Dialogue: 0,0:49:28.63,0:49:32.82,english,,0,0,0,,So if it's a function like printf, it's not going to start stepping through printf line by line.
Dialogue: 0,0:49:28.63,0:49:32.82,chinese,,0,0,0,,因此，如果是像 printf 这样的函数，它就不会开始逐行执行 printf。
Dialogue: 0,0:49:32.82,0:49:33.32,english,,0,0,0,,Why?
Dialogue: 0,0:49:33.32,0:49:36.42,english,,0,0,0,,Because I can pretty much assume printf, written decades ago, is correct.
Dialogue: 0,0:49:33.32,0:49:36.42,chinese,,0,0,0,,因为我基本可以认为几十年前写的 printf 是正确的。
Dialogue: 0,0:49:36.42,0:49:38.05,english,,0,0,0,,Problem's probably with me.
Dialogue: 0,0:49:36.42,0:49:38.05,chinese,,0,0,0,,问题可能出在我身上。
Dialogue: 0,0:49:38.05,0:49:46.11,english,,0,0,0,,But this next line, if I did really want to step into the printf code to figure out how it works or find some problem in it all these years later,
Dialogue: 0,0:49:38.05,0:49:46.11,chinese,,0,0,0,,但接下来这一行，如果我真的想走进 printf 代码，弄清楚它是如何工作的，或者在多年后发现其中的某些问题、
Dialogue: 0,0:49:46.11,0:49:54.25,english,,0,0,0,,you can step into printf, and then the screen would change, and you'd see each of the lines for printf, line by line-- at least if you have the source code for printf installed.
Dialogue: 0,0:49:46.11,0:49:54.25,chinese,,0,0,0,,你可以进入 printf，然后屏幕会发生变化，你会看到 printf 的每一行，一行接一行--至少如果你安装了 printf 的源代码的话。
Dialogue: 0,0:49:54.25,0:49:56.49,english,,0,0,0,,All right, I'm going to use the first one, Step Over.
Dialogue: 0,0:49:54.25,0:49:56.49,chinese,,0,0,0,,好了，我要用第一个，"跨步"。
Dialogue: 0,0:49:56.49,0:49:59.13,english,,0,0,0,,And watch as the yellow highlight moves.
Dialogue: 0,0:49:56.49,0:49:59.13,chinese,,0,0,0,,注意黄色亮点的移动。
Dialogue: 0,0:49:59.13,0:50:03.06,english,,0,0,0,,And watch as, in the terminal window, there's a hash symbol.
Dialogue: 0,0:49:59.13,0:50:03.06,chinese,,0,0,0,,看，终端窗口中出现了一个哈希符号。
Dialogue: 0,0:50:03.06,0:50:03.78,english,,0,0,0,,Here we go.
Dialogue: 0,0:50:03.06,0:50:03.78,chinese,,0,0,0,,开始了
Dialogue: 0,0:50:03.78,0:50:05.13,english,,0,0,0,,There's one hash.
Dialogue: 0,0:50:03.78,0:50:05.13,chinese,,0,0,0,,有一个散列。
Dialogue: 0,0:50:05.13,0:50:07.23,english,,0,0,0,,Now, notice line 5 is highlighted.
Dialogue: 0,0:50:05.13,0:50:07.23,chinese,,0,0,0,,现在，请注意第 5 行已突出显示。
Dialogue: 0,0:50:07.23,0:50:09.48,english,,0,0,0,,That means it has paused on line 5.
Dialogue: 0,0:50:07.23,0:50:09.48,chinese,,0,0,0,,这意味着它在第 5 行暂停。
Dialogue: 0,0:50:09.48,0:50:11.35,english,,0,0,0,,Line 5 has not yet been executed.
Dialogue: 0,0:50:09.48,0:50:11.35,chinese,,0,0,0,,第 5 行尚未执行。
Dialogue: 0,0:50:11.35,0:50:12.60,english,,0,0,0,,So what does that mean?
Dialogue: 0,0:50:11.35,0:50:12.60,chinese,,0,0,0,,这意味着什么？
Dialogue: 0,0:50:12.60,0:50:16.32,english,,0,0,0,,The value of i, per the top left-hand corner, is still 0.
Dialogue: 0,0:50:12.60,0:50:16.32,chinese,,0,0,0,,左上角的 i 值仍为 0。
Dialogue: 0,0:50:16.32,0:50:24.47,english,,0,0,0,,But as soon as I click Step Over again, watch what happens at the top left, where i is a variable on the screen.
Dialogue: 0,0:50:16.32,0:50:24.47,chinese,,0,0,0,,但当我再次点击 "Step Over "时，请注意左上方的情况，i 是屏幕上的一个变量。
Dialogue: 0,0:50:24.47,0:50:27.92,english,,0,0,0,,Now i-- and it flashed briefly-- has a value of 1.
Dialogue: 0,0:50:24.47,0:50:27.92,chinese,,0,0,0,,现在 i -- 短暂闪烁 -- 值为 1。
Dialogue: 0,0:50:27.92,0:50:30.65,english,,0,0,0,,And now if I step over again, watch the terminal window.
Dialogue: 0,0:50:27.92,0:50:30.65,chinese,,0,0,0,,现在，如果我再走过去，注意终端窗口。
Dialogue: 0,0:50:30.65,0:50:32.12,english,,0,0,0,,There's my second hash.
Dialogue: 0,0:50:30.65,0:50:32.12,chinese,,0,0,0,,这是我的第二个哈希。
Dialogue: 0,0:50:32.12,0:50:36.38,english,,0,0,0,,Now, let me click Step Over on for loop, watch the variable at top left.
Dialogue: 0,0:50:32.12,0:50:36.38,chinese,,0,0,0,,现在，让我点击 For 循环的 Step Over，注意左上角的变量。
Dialogue: 0,0:50:36.38,0:50:38.56,english,,0,0,0,,Now 1 goes to 2.
Dialogue: 0,0:50:36.38,0:50:38.56,chinese,,0,0,0,,现在 1 变为 2。
Dialogue: 0,0:50:38.56,0:50:39.65,english,,0,0,0,,Now let me click it again.
Dialogue: 0,0:50:38.56,0:50:39.65,chinese,,0,0,0,,现在让我再点击一次。
Dialogue: 0,0:50:39.65,0:50:43.22,english,,0,0,0,,Third hash-- and here's where the logical error is perhaps revealed.
Dialogue: 0,0:50:39.65,0:50:43.22,chinese,,0,0,0,,第三次散列--这里可能暴露了逻辑错误。
Dialogue: 0,0:50:43.22,0:50:45.21,english,,0,0,0,,Let me go ahead and step over the loop.
Dialogue: 0,0:50:43.22,0:50:45.21,chinese,,0,0,0,,让我先跨过这个环。
Dialogue: 0,0:50:45.21,0:50:46.52,english,,0,0,0,,Now i is 3.
Dialogue: 0,0:50:45.21,0:50:46.52,chinese,,0,0,0,,现在 i 是 3。
Dialogue: 0,0:50:46.52,0:50:49.28,english,,0,0,0,,Wait a minute, I'm still going to print out a hash.
Dialogue: 0,0:50:46.52,0:50:49.28,chinese,,0,0,0,,等等，我还是要打印一份散列。
Dialogue: 0,0:50:49.28,0:50:49.81,english,,0,0,0,,There it is.
Dialogue: 0,0:50:49.28,0:50:49.81,chinese,,0,0,0,,就在那儿。
Dialogue: 0,0:50:49.81,0:50:50.81,english,,0,0,0,,There's the fourth hash.
Dialogue: 0,0:50:49.81,0:50:50.81,chinese,,0,0,0,,还有第四根哈希线。
Dialogue: 0,0:50:50.81,0:50:53.85,english,,0,0,0,,And at this point, hopefully, the light bulb, proverbially, has gone off.
Dialogue: 0,0:50:50.81,0:50:53.85,chinese,,0,0,0,,在这一点上，希望灯泡，俗话说，已经熄灭了。
Dialogue: 0,0:50:53.85,0:50:55.02,english,,0,0,0,,I realize, oh, I screwed up.
Dialogue: 0,0:50:53.85,0:50:55.02,chinese,,0,0,0,,我意识到，哦，我搞砸了。
Dialogue: 0,0:50:55.02,0:51:02.49,english,,0,0,0,,I can either stop the program altogether with the red square, or I can just let it run all the way to the end, which just terminates everything.
Dialogue: 0,0:50:55.02,0:51:02.49,chinese,,0,0,0,,我可以用红色方块完全停止程序，也可以让程序一直运行到最后，这样就可以终止一切。
Dialogue: 0,0:51:02.49,0:51:05.66,english,,0,0,0,,At this point, I just want to get back into my code and start fixing things.
Dialogue: 0,0:51:02.49,0:51:05.66,chinese,,0,0,0,,此时此刻，我只想回到我的代码中，开始修复问题。
Dialogue: 0,0:51:05.66,0:51:10.67,english,,0,0,0,,And you can close, for instance, as I will here, the File Explorer, just to hide the panel that opened.
Dialogue: 0,0:51:05.66,0:51:10.67,chinese,,0,0,0,,例如，你可以关闭文件资源管理器，以隐藏打开的面板。
Dialogue: 0,0:51:10.67,0:51:12.32,english,,0,0,0,,So that's debug50.
Dialogue: 0,0:51:10.67,0:51:12.32,chinese,,0,0,0,,这就是 debug50。
Dialogue: 0,0:51:12.32,0:51:19.52,english,,0,0,0,,But it's not a CS50 thing, that just starts the debugger for you, which is something you'd find in most any programming environment nowadays.
Dialogue: 0,0:51:12.32,0:51:19.52,chinese,,0,0,0,,但这并不是 CS50 的问题，它只是为你启动调试器，这在当今大多数编程环境中都能找到。
Dialogue: 0,0:51:19.52,0:51:23.67,english,,0,0,0,,Questions on debugging?
Dialogue: 0,0:51:19.52,0:51:23.67,chinese,,0,0,0,,关于调试的问题？
Dialogue: 0,0:51:23.67,0:51:24.17,english,,0,0,0,,Questions?
Dialogue: 0,0:51:24.17,0:51:24.67,english,,0,0,0,,Yeah?
Dialogue: 0,0:51:24.67,0:51:27.29,english,,0,0,0,,AUDIENCE: Where does it tell you where it went wrong?
Dialogue: 0,0:51:24.67,0:51:27.29,chinese,,0,0,0,,听众：它告诉你哪里出了问题？
Dialogue: 0,0:51:27.29,0:51:28.42,english,,0,0,0,,DAVID MALAN: Good question.
Dialogue: 0,0:51:27.29,0:51:28.42,chinese,,0,0,0,,大卫-马兰：问得好。
Dialogue: 0,0:51:28.42,0:51:30.31,english,,0,0,0,,Where does it tell you where it went wrong?
Dialogue: 0,0:51:28.42,0:51:30.31,chinese,,0,0,0,,它在哪里告诉你哪里出了问题？
Dialogue: 0,0:51:30.31,0:51:33.19,english,,0,0,0,,So, sadly, it does not tell you any of that.
Dialogue: 0,0:51:30.31,0:51:33.19,chinese,,0,0,0,,因此，很遗憾，它并没有告诉你这些。
Dialogue: 0,0:51:33.19,0:51:39.58,english,,0,0,0,,The onus is still on you, the human, to use this tool productively to walk through your code at a saner pace.
Dialogue: 0,0:51:33.19,0:51:39.58,chinese,,0,0,0,,您，人类，仍有责任有效地使用这一工具，以更理智的速度浏览您的代码。
Dialogue: 0,0:51:39.58,0:51:42.07,english,,0,0,0,,But your brain is the one that still needs to solve it.
Dialogue: 0,0:51:39.58,0:51:42.07,chinese,,0,0,0,,但你的大脑仍然需要解决这个问题。
Dialogue: 0,0:51:42.07,0:51:49.16,english,,0,0,0,,And I don't doubt, down the line, with artificial intelligence and more, programs like this will get all the more helpful, and start answering questions like that for us.
Dialogue: 0,0:51:42.07,0:51:49.16,chinese,,0,0,0,,我毫不怀疑，随着人工智能等技术的发展，这样的程序会越来越有用，并开始为我们解答类似的问题。
Dialogue: 0,0:51:49.16,0:51:52.99,english,,0,0,0,,And there are other tools we'll introduce you this semester that are even more powerful than this.
Dialogue: 0,0:51:49.16,0:51:52.99,chinese,,0,0,0,,本学期我们还将向你介绍比这更强大的其他工具。
Dialogue: 0,0:51:52.99,0:51:57.82,english,,0,0,0,,But for now, it's just a tool, really, to slow things down and not have to change your code.
Dialogue: 0,0:51:52.99,0:51:57.82,chinese,,0,0,0,,但就目前而言，它只是一个工具，真正的作用是减慢速度，而不必更改代码。
Dialogue: 0,0:51:57.82,0:52:06.82,english,,0,0,0,,The fact that I had that panel on the left that just showed me i's changing value is just an alternative to printf, and I can step through it a little more slowly.
Dialogue: 0,0:51:57.82,0:52:06.82,chinese,,0,0,0,,事实上，左边的面板只是向我显示 i 的变化值，这只是 printf 的一种替代方法，我可以更慢地完成它。
Dialogue: 0,0:52:06.82,0:52:10.58,english,,0,0,0,,Other questions on debugging?
Dialogue: 0,0:52:06.82,0:52:10.58,chinese,,0,0,0,,有关调试的其他问题？
Dialogue: 0,0:52:10.58,0:52:11.08,english,,0,0,0,,No?
Dialogue: 0,0:52:11.08,0:52:14.95,english,,0,0,0,,Let me show you one final example with this debugger here.
Dialogue: 0,0:52:11.08,0:52:14.95,chinese,,0,0,0,,让我用这个调试器给你演示最后一个例子。
Dialogue: 0,0:52:14.95,0:52:16.75,english,,0,0,0,,And this one, too, I wrote in advance.
Dialogue: 0,0:52:14.95,0:52:16.75,chinese,,0,0,0,,这个也是我提前写好的。
Dialogue: 0,0:52:16.75,0:52:18.73,english,,0,0,0,,Let me close buggy0.c.
Dialogue: 0,0:52:16.75,0:52:18.73,chinese,,0,0,0,,让我关闭 buggy0.c。
Dialogue: 0,0:52:18.73,0:52:22.32,english,,0,0,0,,And let me open up buggy1.c, my second version thereof.
Dialogue: 0,0:52:18.73,0:52:22.32,chinese,,0,0,0,,让我打开 buggy1.c，这是我的第二个版本。
Dialogue: 0,0:52:22.32,0:52:28.03,english,,0,0,0,,Let me close my terminal window for a second and give you a quick tour of this program, which similarly, has a mistake.
Dialogue: 0,0:52:22.32,0:52:28.03,chinese,,0,0,0,,让我先关闭终端窗口，给你快速浏览一下这个程序，同样，它也有一个错误。
Dialogue: 0,0:52:28.03,0:52:32.83,english,,0,0,0,,Now, at the top of this program, some familiar includes, cs50.h and stdio.h.
Dialogue: 0,0:52:28.03,0:52:32.83,chinese,,0,0,0,,现在，在这个程序的顶端，有一些我们熟悉的包括：cs50.h 和 stdio.h。
Dialogue: 0,0:52:32.83,0:52:34.73,english,,0,0,0,,This is not something we've seen before.
Dialogue: 0,0:52:32.83,0:52:34.73,chinese,,0,0,0,,这是我们以前从未见过的。
Dialogue: 0,0:52:34.73,0:52:38.83,english,,0,0,0,,It's specific to this example-- a function called getNegativeInt.
Dialogue: 0,0:52:34.73,0:52:38.83,chinese,,0,0,0,,这是本例中的一个特殊函数，名为 getNegativeInt。
Dialogue: 0,0:52:38.83,0:52:41.04,english,,0,0,0,,Takes no arguments, and it returns an integer.
Dialogue: 0,0:52:38.83,0:52:41.04,chinese,,0,0,0,,不带参数，返回一个整数。
Dialogue: 0,0:52:41.04,0:52:41.71,english,,0,0,0,,What does it do?
Dialogue: 0,0:52:41.04,0:52:41.71,chinese,,0,0,0,,它有什么作用？
Dialogue: 0,0:52:41.71,0:52:45.04,english,,0,0,0,,It literally gets a negative integer, ideally, from the user.
Dialogue: 0,0:52:41.71,0:52:45.04,chinese,,0,0,0,,从字面上看，它可以从用户那里得到一个负整数，理想情况下是这样。
Dialogue: 0,0:52:45.04,0:52:47.20,english,,0,0,0,,Fun fact, though, it doesn't correctly.
Dialogue: 0,0:52:45.04,0:52:47.20,chinese,,0,0,0,,但有趣的是，这并不正确。
Dialogue: 0,0:52:47.20,0:52:50.09,english,,0,0,0,,That's the bug. getNegativeInt is broken at the moment.
Dialogue: 0,0:52:47.20,0:52:50.09,chinese,,0,0,0,,这就是问题所在，目前 getNegativeInt 已被破坏。
Dialogue: 0,0:52:50.09,0:52:51.47,english,,0,0,0,,So what does main do?
Dialogue: 0,0:52:50.09,0:52:51.47,chinese,,0,0,0,,那么，主要做什么呢？
Dialogue: 0,0:52:51.47,0:52:55.69,english,,0,0,0,,Well, main just calls this function, passing in nothing in parentheses, no inputs.
Dialogue: 0,0:52:51.47,0:52:55.69,chinese,,0,0,0,,好吧，main 只是调用这个函数，在括号中什么都没输入，也没有输入。
Dialogue: 0,0:52:55.69,0:52:58.24,english,,0,0,0,,And it stores the return value in i.
Dialogue: 0,0:52:55.69,0:52:58.24,chinese,,0,0,0,,并将返回值保存在 i 中。
Dialogue: 0,0:52:58.24,0:53:00.26,english,,0,0,0,,And then it just prints out i on the screen.
Dialogue: 0,0:52:58.24,0:53:00.26,chinese,,0,0,0,,然后它就会在屏幕上打印出 i。
Dialogue: 0,0:53:00.26,0:53:06.36,english,,0,0,0,,So honestly, just by eyeballing this, I feel comfortable enough with programming in C, I think main is correct.
Dialogue: 0,0:53:00.26,0:53:06.36,chinese,,0,0,0,,因此，老实说，仅凭目测，我觉得用 C 语言编程已经足够自如了，我认为 main 是正确的。
Dialogue: 0,0:53:06.36,0:53:07.99,english,,0,0,0,,Let me just stipulate, main is correct.
Dialogue: 0,0:53:06.36,0:53:07.99,chinese,,0,0,0,,让我来说明一下，main 是正确的。
Dialogue: 0,0:53:07.99,0:53:09.69,english,,0,0,0,,But there is going to be a bug down here.
Dialogue: 0,0:53:07.99,0:53:09.69,chinese,,0,0,0,,但下面会有一个窃听器。
Dialogue: 0,0:53:09.69,0:53:11.21,english,,0,0,0,,Now, what's the bug down here?
Dialogue: 0,0:53:09.69,0:53:11.21,chinese,,0,0,0,,下面的窃听器是什么？
Dialogue: 0,0:53:11.21,0:53:14.83,english,,0,0,0,,Well, let me look at getNegativeInt's implementation.
Dialogue: 0,0:53:11.21,0:53:14.83,chinese,,0,0,0,,让我看看 getNegativeInt 的实现。
Dialogue: 0,0:53:14.83,0:53:18.97,english,,0,0,0,,Notice, this first line, 12, is identical to the prototype up here.
Dialogue: 0,0:53:14.83,0:53:18.97,chinese,,0,0,0,,注意，第一行 12 与上面的原型相同。
Dialogue: 0,0:53:18.97,0:53:26.69,english,,0,0,0,,The prototype is sort of stupidly required up here because C reads things top to bottom, left to right-- the compiler technically does.
Dialogue: 0,0:53:18.97,0:53:26.69,chinese,,0,0,0,,因为 C 语言是从上到下、从左到右读取数据的--编译器在技术上是这样做的。
Dialogue: 0,0:53:26.69,0:53:36.82,english,,0,0,0,,So if you reference getNegativeInt here, but you don't implement it until down here, and you haven't told C in advance that it will exist, again, you get the error we saw last week.
Dialogue: 0,0:53:26.69,0:53:36.82,chinese,,0,0,0,,因此，如果你在这里引用了 getNegativeInt，但直到下面才实现它，而且没有提前告诉 C 它将存在，那么你将再次出现上周我们看到的错误。
Dialogue: 0,0:53:36.82,0:53:39.01,english,,0,0,0,,All right, so how does getNegativeInt work?
Dialogue: 0,0:53:36.82,0:53:39.01,chinese,,0,0,0,,好了，getNegativeInt 如何工作？
Dialogue: 0,0:53:39.01,0:53:40.96,english,,0,0,0,,We declare a variable called n.
Dialogue: 0,0:53:39.01,0:53:40.96,chinese,,0,0,0,,我们声明一个名为 n 的变量。
Dialogue: 0,0:53:40.96,0:53:43.54,english,,0,0,0,,We've got to do while loop that does what?
Dialogue: 0,0:53:40.96,0:53:43.54,chinese,,0,0,0,,我们必须做一个 while 循环，做什么？
Dialogue: 0,0:53:43.54,0:53:47.11,english,,0,0,0,,It uses getInt, which comes with the cs50 library, per last week.
Dialogue: 0,0:53:43.54,0:53:47.11,chinese,,0,0,0,,它使用的是 cs50 库自带的 getInt，与上周相同。
Dialogue: 0,0:53:47.11,0:53:51.67,english,,0,0,0,,It prompts the user for negative integer, quote unquote, and stores the value in n.
Dialogue: 0,0:53:47.11,0:53:51.67,chinese,,0,0,0,,它提示用户输入负整数，加引号不加引号，并将数值存储在 n 中。
Dialogue: 0,0:53:51.67,0:53:56.80,english,,0,0,0,,I then do all of this while n is less than 0, right?
Dialogue: 0,0:53:51.67,0:53:56.80,chinese,,0,0,0,,然后，我在 n 小于 0 的情况下完成所有这些操作，对吗？
Dialogue: 0,0:53:56.80,0:54:04.97,english,,0,0,0,,Remember, we used to do while loop last week to make sure the human cooperates and doesn't give us the wrong type of value, be it positive or negative or something else.
Dialogue: 0,0:53:56.80,0:54:04.97,chinese,,0,0,0,,还记得吗，上周我们曾经做了一个循环，以确保人类合作，不会给我们错误的值，无论是正值、负值还是其他值。
Dialogue: 0,0:54:04.97,0:54:06.40,english,,0,0,0,,And then we return n.
Dialogue: 0,0:54:04.97,0:54:06.40,chinese,,0,0,0,,然后我们返回 n。
Dialogue: 0,0:54:06.40,0:54:07.57,english,,0,0,0,,And there's some subtleties.
Dialogue: 0,0:54:06.40,0:54:07.57,chinese,,0,0,0,,还有一些微妙之处。
Dialogue: 0,0:54:07.57,0:54:15.79,english,,0,0,0,,Anyone recall-- or have an intuition for why I've declared n on line 14, instead of line 17?
Dialogue: 0,0:54:07.57,0:54:15.79,chinese,,0,0,0,,有谁记得--或者有直觉告诉我为什么我在第 14 行而不是第 17 行声明了 n？
Dialogue: 0,0:54:15.79,0:54:17.62,english,,0,0,0,,This is a C specific thing.
Dialogue: 0,0:54:15.79,0:54:17.62,chinese,,0,0,0,,这是 C 语言的特殊情况。
Dialogue: 0,0:54:17.62,0:54:23.46,english,,0,0,0,,AUDIENCE: [INAUDIBLE]
Dialogue: 0,0:54:23.46,0:54:24.34,english,,0,0,0,,DAVID MALAN: Exactly.
Dialogue: 0,0:54:23.46,0:54:24.34,chinese,,0,0,0,,大卫-马兰：没错。
Dialogue: 0,0:54:24.34,0:54:33.56,english,,0,0,0,,There's this notion of scope in C. And we'll continue to see this over time, whereby, a variable only exists inside of the most recent curly braces that you've opened.
Dialogue: 0,0:54:24.34,0:54:33.56,chinese,,0,0,0,,在 C 语言中，有这样一个作用域的概念，我们将继续看到这个概念，即一个变量只存在于你最近打开的大括号中。
Dialogue: 0,0:54:33.56,0:54:40.90,english,,0,0,0,,So if I've declared n here on line 14, I can use it anywhere between lines 13 and 21 because those are the nearest curly braces.
Dialogue: 0,0:54:33.56,0:54:40.90,chinese,,0,0,0,,因此，如果我在第 14 行声明了 n，我就可以在第 13 行和第 21 行之间的任何地方使用它，因为这些都是最近的大括号。
Dialogue: 0,0:54:40.90,0:54:53.47,english,,0,0,0,,If by contrast, as you note, if I instead said this, int n equals getInt and so forth, and didn't have the current line 14, well, n would exist inside of these curly braces, but not here, which
Dialogue: 0,0:54:40.90,0:54:53.47,chinese,,0,0,0,,相比之下，正如你所指出的，如果我改成这样说，int n 等于 getInt 等等，并且没有当前的第 14 行，那么，n 就会存在于这些大括号内，但不会存在于这里，这就意味着
Dialogue: 0,0:54:53.47,0:54:55.34,english,,0,0,0,,is too late, and definitely not here.
Dialogue: 0,0:54:53.47,0:54:55.34,chinese,,0,0,0,,太迟了，而且绝对不是在这里。
Dialogue: 0,0:54:55.34,0:54:59.48,english,,0,0,0,,So you just have to declare it first, and then use and reuse it as such.
Dialogue: 0,0:54:55.34,0:54:59.48,chinese,,0,0,0,,因此，你只需先声明它，然后再使用和重复使用它。
Dialogue: 0,0:54:59.48,0:55:01.54,english,,0,0,0,,Now, let me just show you how I can debug this.
Dialogue: 0,0:54:59.48,0:55:01.54,chinese,,0,0,0,,现在，让我来告诉你如何调试它。
Dialogue: 0,0:55:01.54,0:55:03.17,english,,0,0,0,,But let me show you the symptoms first.
Dialogue: 0,0:55:01.54,0:55:03.17,chinese,,0,0,0,,不过，让我先给你看看症状。
Dialogue: 0,0:55:03.17,0:55:04.93,english,,0,0,0,,Let me open my terminal window.
Dialogue: 0,0:55:03.17,0:55:04.93,chinese,,0,0,0,,让我打开终端窗口。
Dialogue: 0,0:55:04.93,0:55:06.97,english,,0,0,0,,Let me run make buggy1.
Dialogue: 0,0:55:04.93,0:55:06.97,chinese,,0,0,0,,让我运行 buggy1。
Dialogue: 0,0:55:06.97,0:55:13.66,english,,0,0,0,,Compiles OK, so it's not something silly like a semicolon. ./buggy1, and I'm asked for a negative integer.
Dialogue: 0,0:55:06.97,0:55:13.66,chinese,,0,0,0,,./buggy1，我被要求输入一个负整数。
Dialogue: 0,0:55:13.66,0:55:15.28,english,,0,0,0,,All right, let me give it negative 1--
Dialogue: 0,0:55:13.66,0:55:15.28,chinese,,0,0,0,,好吧，让我给它负1 --
Dialogue: 0,0:55:15.28,0:55:16.71,english,,0,0,0,,Enter.
Dialogue: 0,0:55:16.71,0:55:20.88,english,,0,0,0,,Well, the main function is supposed to print out what I typed, but it clearly didn't.
Dialogue: 0,0:55:16.71,0:55:20.88,chinese,,0,0,0,,主函数应该打印出我输入的内容，但显然没有。
Dialogue: 0,0:55:20.88,0:55:21.88,english,,0,0,0,,It's prompting me again.
Dialogue: 0,0:55:20.88,0:55:21.88,chinese,,0,0,0,,它又在提示我了。
Dialogue: 0,0:55:21.88,0:55:23.83,english,,0,0,0,,All right, so maybe it'll like negative 2.
Dialogue: 0,0:55:21.88,0:55:23.83,chinese,,0,0,0,,好吧，也许是负 2。
Dialogue: 0,0:55:23.83,0:55:24.33,english,,0,0,0,,No?
Dialogue: 0,0:55:24.33,0:55:26.38,english,,0,0,0,,Maybe negative 3.
Dialogue: 0,0:55:24.33,0:55:26.38,chinese,,0,0,0,,也许是负 3。
Dialogue: 0,0:55:26.38,0:55:27.57,english,,0,0,0,,50?
Dialogue: 0,0:55:27.57,0:55:29.16,english,,0,0,0,,OK, so it's definitely broken, right?
Dialogue: 0,0:55:27.57,0:55:29.16,chinese,,0,0,0,,好吧，它肯定坏了，对吗？
Dialogue: 0,0:55:29.16,0:55:31.52,english,,0,0,0,,It kind of seems logically to be doing the opposite.
Dialogue: 0,0:55:29.16,0:55:31.52,chinese,,0,0,0,,从逻辑上讲，这似乎是在做相反的事情。
Dialogue: 0,0:55:31.52,0:55:33.82,english,,0,0,0,,Now, you can perhaps see why this is happening already.
Dialogue: 0,0:55:31.52,0:55:33.82,chinese,,0,0,0,,现在，你或许已经明白为什么会出现这种情况了。
Dialogue: 0,0:55:33.82,0:55:37.17,english,,0,0,0,,These are deliberately simple programs for demonstrations sake.
Dialogue: 0,0:55:33.82,0:55:37.17,chinese,,0,0,0,,这些都是为了演示而特意设计的简单程序。
Dialogue: 0,0:55:37.17,0:55:38.47,english,,0,0,0,,But let's do this.
Dialogue: 0,0:55:37.17,0:55:38.47,chinese,,0,0,0,,但让我们这样做吧。
Dialogue: 0,0:55:38.47,0:55:42.87,english,,0,0,0,,Let me go ahead and set a breakpoint in main, even though I'm pretty sure main is correct.
Dialogue: 0,0:55:38.47,0:55:42.87,chinese,,0,0,0,,让我继续在 main 中设置断点，尽管我很确定 main 是正确的。
Dialogue: 0,0:55:42.87,0:55:47.01,english,,0,0,0,,But it just helps me start my thought process-- start with main, and then take it from there.
Dialogue: 0,0:55:42.87,0:55:47.01,chinese,,0,0,0,,但这只是帮助我开始我的思考过程--从主要的开始，然后从那里继续。
Dialogue: 0,0:55:47.01,0:55:51.84,english,,0,0,0,,Let me run now, debug50 ./buggy1--
Dialogue: 0,0:55:47.01,0:55:51.84,chinese,,0,0,0,,现在让我运行 debug50 ./buggy1--
Dialogue: 0,0:55:51.84,0:55:52.92,english,,0,0,0,,Enter.
Dialogue: 0,0:55:52.92,0:55:53.70,english,,0,0,0,,And let's see.
Dialogue: 0,0:55:52.92,0:55:53.70,chinese,,0,0,0,,让我们看看
Dialogue: 0,0:55:53.70,0:55:56.88,english,,0,0,0,,With that breakpoint now, the GUI is going to reconfigure itself.
Dialogue: 0,0:55:53.70,0:55:56.88,chinese,,0,0,0,,有了这个断点，图形用户界面就会重新配置。
Dialogue: 0,0:55:56.88,0:56:01.26,english,,0,0,0,,It's going to pause on line 8 because that's the first interesting line inside of main.
Dialogue: 0,0:55:56.88,0:56:01.26,chinese,,0,0,0,,它会在第 8 行暂停，因为这是 main 中第一行有趣的内容。
Dialogue: 0,0:56:01.26,0:56:03.78,english,,0,0,0,,So I could have just put the breakpoint on line 8 too.
Dialogue: 0,0:56:01.26,0:56:03.78,chinese,,0,0,0,,所以我也可以把断点放在第 8 行。
Dialogue: 0,0:56:03.78,0:56:09.57,english,,0,0,0,,It's smart enough to know that if I set it on 6, you really mean line 8 because that's the first actual line of code.
Dialogue: 0,0:56:03.78,0:56:09.57,chinese,,0,0,0,,它很聪明，知道如果我把它设置为 6，你指的其实是第 8 行，因为那是第一行实际代码。
Dialogue: 0,0:56:09.57,0:56:11.28,english,,0,0,0,,And watch, now, what happens.
Dialogue: 0,0:56:09.57,0:56:11.28,chinese,,0,0,0,,现在，看看会发生什么。
Dialogue: 0,0:56:11.28,0:56:19.47,english,,0,0,0,,If I step over this line, notice that i, which at the moment seems to have a default value of 0-- more on that another time.
Dialogue: 0,0:56:11.28,0:56:19.47,chinese,,0,0,0,,如果我跨过这一行，请注意 i，它目前的默认值似乎是 0 -- 下次再谈。
Dialogue: 0,0:56:19.47,0:56:24.75,english,,0,0,0,,But if I click Step Over like before, I'm prompted for a negative integer.
Dialogue: 0,0:56:19.47,0:56:24.75,chinese,,0,0,0,,但如果我像以前一样点击 "跨步"，系统会提示我输入一个负整数。
Dialogue: 0,0:56:24.75,0:56:25.75,english,,0,0,0,,Let me type negative 1--
Dialogue: 0,0:56:24.75,0:56:25.75,chinese,,0,0,0,,让我输入负 1
Dialogue: 0,0:56:25.75,0:56:27.30,english,,0,0,0,,Enter.
Dialogue: 0,0:56:27.30,0:56:32.47,english,,0,0,0,,And now, notice, there's no additional yellow highlight.
Dialogue: 0,0:56:27.30,0:56:32.47,chinese,,0,0,0,,现在请注意，没有额外的黄色亮点。
Dialogue: 0,0:56:32.47,0:56:32.97,english,,0,0,0,,Why?
Dialogue: 0,0:56:32.97,0:56:35.16,english,,0,0,0,,Where am I currently stuck, logically?
Dialogue: 0,0:56:32.97,0:56:35.16,chinese,,0,0,0,,从逻辑上讲，我目前卡在哪里？
Dialogue: 0,0:56:35.16,0:56:37.93,english,,0,0,0,,AUDIENCE: [INAUDIBLE]
Dialogue: 0,0:56:37.93,0:56:40.77,english,,0,0,0,,DAVID MALAN: Yeah, just logically, I must be in that do, while loop.
Dialogue: 0,0:56:37.93,0:56:40.77,chinese,,0,0,0,,戴维-马兰：是的，从逻辑上讲，我一定是在那个 do, while 循环中。
Dialogue: 0,0:56:40.77,0:56:43.56,english,,0,0,0,,And even if you don't understand it, like that's the only explanation.
Dialogue: 0,0:56:40.77,0:56:43.56,chinese,,0,0,0,,即使你不理解，好像这是唯一的解释。
Dialogue: 0,0:56:43.56,0:56:46.14,english,,0,0,0,,If you keep getting prompted, surely, there's a loop going on.
Dialogue: 0,0:56:43.56,0:56:46.14,chinese,,0,0,0,,如果您一直收到提示，肯定是出现了循环。
Dialogue: 0,0:56:46.14,0:56:49.27,english,,0,0,0,,There's only one loop in my code, so there's probably a problem there.
Dialogue: 0,0:56:46.14,0:56:49.27,chinese,,0,0,0,,我的代码中只有一个循环，所以可能有问题。
Dialogue: 0,0:56:49.27,0:56:52.90,english,,0,0,0,,So I can't just set a breakpoint in main, and then wait for this to work.
Dialogue: 0,0:56:49.27,0:56:52.90,chinese,,0,0,0,,因此，我不能只在 main 中设置一个断点，然后等待它起作用。
Dialogue: 0,0:56:52.90,0:56:56.28,english,,0,0,0,,So let me just-- let me stop this with the red square.
Dialogue: 0,0:56:52.90,0:56:56.28,chinese,,0,0,0,,所以，让我 -- 让我用红色方块来阻止这一切。
Dialogue: 0,0:56:56.28,0:56:58.86,english,,0,0,0,,And let me think, all right, instead of--
Dialogue: 0,0:56:56.28,0:56:58.86,chinese,,0,0,0,,让我想想，好吧，而不是 --
Dialogue: 0,0:56:58.86,0:57:02.77,english,,0,0,0,,I can still set my breakpoint in main, but let me rerun the debugger instead.
Dialogue: 0,0:56:58.86,0:57:02.77,chinese,,0,0,0,,我仍然可以在主程序中设置断点，但让我重新运行调试器。
Dialogue: 0,0:57:02.77,0:57:07.93,english,,0,0,0,,And this time, not step over that line of code, let me step into that line of code.
Dialogue: 0,0:57:02.77,0:57:07.93,chinese,,0,0,0,,这一次，不是跨过那行代码，而是让我走进那行代码。
Dialogue: 0,0:57:07.93,0:57:09.27,english,,0,0,0,,So watch what happens now.
Dialogue: 0,0:57:07.93,0:57:09.27,chinese,,0,0,0,,所以，看看现在会发生什么。
Dialogue: 0,0:57:09.27,0:57:14.61,english,,0,0,0,,Instead of clicking the second icon here, let me click the third, whose name is, indeed, Step Into.
Dialogue: 0,0:57:09.27,0:57:14.61,chinese,,0,0,0,,与其点击这里的第二个图标，不如让我点击第三个图标，它的名字确实叫 "走进"。
Dialogue: 0,0:57:14.61,0:57:17.88,english,,0,0,0,,And watch as the yellow highlight does not move to line 9.
Dialogue: 0,0:57:14.61,0:57:17.88,chinese,,0,0,0,,注意黄色高亮显示不会移动到第 9 行。
Dialogue: 0,0:57:17.88,0:57:25.17,english,,0,0,0,,It dives into line 8-- the function on line 8, thereby, bringing me down to line 17.
Dialogue: 0,0:57:17.88,0:57:25.17,chinese,,0,0,0,,它潜入第 8 行 -- 第 8 行的函数，从而把我带到第 17 行。
Dialogue: 0,0:57:25.17,0:57:28.27,english,,0,0,0,,It's kind of going down into that next function.
Dialogue: 0,0:57:25.17,0:57:28.27,chinese,,0,0,0,,这是一种进入下一个功能的方式。
Dialogue: 0,0:57:28.27,0:57:34.38,english,,0,0,0,,Now, it didn't bother pausing on line 12 or 13 or 14 because there's nothing intellectually interesting there happening yet.
Dialogue: 0,0:57:28.27,0:57:34.38,chinese,,0,0,0,,现在，在第 12 行、第 13 行或第 14 行时，它懒得暂停，因为那里还没有发生任何有趣的事情。
Dialogue: 0,0:57:34.38,0:57:37.08,english,,0,0,0,,The juicy part really starts, it would seem, in line 17.
Dialogue: 0,0:57:34.38,0:57:37.08,chinese,,0,0,0,,看来，多汁的部分是从第 17 行开始的。
Dialogue: 0,0:57:37.08,0:57:40.98,english,,0,0,0,,So, now notice, n is my variable at the top left.
Dialogue: 0,0:57:37.08,0:57:40.98,chinese,,0,0,0,,请注意，n 是左上角的变量。
Dialogue: 0,0:57:40.98,0:57:42.27,english,,0,0,0,,If I click--
Dialogue: 0,0:57:40.98,0:57:42.27,chinese,,0,0,0,,如果我点击
Dialogue: 0,0:57:42.27,0:57:45.42,english,,0,0,0,,I don't want to click Step Into now, though.
Dialogue: 0,0:57:42.27,0:57:45.42,chinese,,0,0,0,,但我现在不想点击 "进入"。
Dialogue: 0,0:57:45.42,0:57:52.48,english,,0,0,0,,What would go wrong if I click on Step Into-- or what would it do that I don't think I want to do?
Dialogue: 0,0:57:45.42,0:57:52.48,chinese,,0,0,0,,如果我点击 "进入步骤"，会出现什么问题？
Dialogue: 0,0:57:52.48,0:57:52.99,english,,0,0,0,,Yeah?
Dialogue: 0,0:57:52.99,0:57:54.75,english,,0,0,0,,AUDIENCE: [INAUDIBLE]
Dialogue: 0,0:57:54.75,0:57:56.63,english,,0,0,0,,DAVID MALAN: Yeah, it would step into getInt.
Dialogue: 0,0:57:54.75,0:57:56.63,chinese,,0,0,0,,戴维-马兰：是的，这将使我们进入 "获取信息 "阶段。
Dialogue: 0,0:57:56.63,0:58:02.12,english,,0,0,0,,But I'd like to think that the staff's version of getInt is correct, and that's not our problem today, so I want to step over it.
Dialogue: 0,0:57:56.63,0:58:02.12,chinese,,0,0,0,,但我认为工作人员对 getInt 的说法是正确的，这不是我们今天的问题，所以我想跨过这个问题。
Dialogue: 0,0:58:02.12,0:58:10.67,english,,0,0,0,,And watch now at top left that nothing happens yet to the value of n until I go to the terminal window now, and I type in something like negative 1.
Dialogue: 0,0:58:02.12,0:58:10.67,chinese,,0,0,0,,现在请注意左上角，在我进入终端窗口并输入负 1 这样的内容之前，n 的值不会发生任何变化。
Dialogue: 0,0:58:10.67,0:58:14.60,english,,0,0,0,,Now notice, it jumps to line 19, which is the next interesting line.
Dialogue: 0,0:58:10.67,0:58:14.60,chinese,,0,0,0,,现在请注意，它跳转到了第 19 行，也就是下一个有趣的行。
Dialogue: 0,0:58:14.60,0:58:17.24,english,,0,0,0,,Top left, n, indeed, is negative 1.
Dialogue: 0,0:58:14.60,0:58:17.24,chinese,,0,0,0,,左上方的 n 的确是负 1。
Dialogue: 0,0:58:17.24,0:58:22.76,english,,0,0,0,,And here's where I can now pause as a human and think, all right, so while n is less than 0.
Dialogue: 0,0:58:17.24,0:58:22.76,chinese,,0,0,0,,现在我可以暂停一下，想一想，好吧，当 n 小于 0 的时候。
Dialogue: 0,0:58:22.76,0:58:25.28,english,,0,0,0,,All right, n, per the top left corner, is negative 1.
Dialogue: 0,0:58:22.76,0:58:25.28,chinese,,0,0,0,,好了，左上角的 n 是负 1。
Dialogue: 0,0:58:25.28,0:58:29.78,english,,0,0,0,,So all right, while negative 1 is less than 0, well, obviously that's true mathematically.
Dialogue: 0,0:58:25.28,0:58:29.78,chinese,,0,0,0,,好吧，虽然负 1 小于 0，但显然这在数学上是正确的。
Dialogue: 0,0:58:29.78,0:58:30.93,english,,0,0,0,,So what's going to happen?
Dialogue: 0,0:58:29.78,0:58:30.93,chinese,,0,0,0,,那么会发生什么呢？
Dialogue: 0,0:58:30.93,0:58:32.13,english,,0,0,0,,It's a do while loop.
Dialogue: 0,0:58:30.93,0:58:32.13,chinese,,0,0,0,,这是一个 do while 循环。
Dialogue: 0,0:58:32.13,0:58:39.41,english,,0,0,0,,So when I click on Step Over again, it's going to go to this line because it's at the end of the inside of that loop.
Dialogue: 0,0:58:32.13,0:58:39.41,chinese,,0,0,0,,因此，当我再次点击 "Step Over "时，它会转到这一行，因为它位于循环内部的末尾。
Dialogue: 0,0:58:39.41,0:58:42.71,english,,0,0,0,,And now here, it's looping through again and again.
Dialogue: 0,0:58:39.41,0:58:42.71,chinese,,0,0,0,,而现在，它在这里一次又一次地循环。
Dialogue: 0,0:58:42.71,0:58:44.24,english,,0,0,0,,All right, let me do this once more.
Dialogue: 0,0:58:42.71,0:58:44.24,chinese,,0,0,0,,好吧，让我再来一次。
Dialogue: 0,0:58:44.24,0:58:45.98,english,,0,0,0,,I'm going to step over, all right?
Dialogue: 0,0:58:44.24,0:58:45.98,chinese,,0,0,0,,我要走过去，好吗？
Dialogue: 0,0:58:45.98,0:58:48.77,english,,0,0,0,,I'm going to type in negative 2, and it's the exact same thing.
Dialogue: 0,0:58:45.98,0:58:48.77,chinese,,0,0,0,,我要输入负 2，情况完全一样。
Dialogue: 0,0:58:48.77,0:58:50.36,english,,0,0,0,,Now is my chance, on the yellow line--
Dialogue: 0,0:58:48.77,0:58:50.36,chinese,,0,0,0,,现在是我的机会，在黄线上 --
Dialogue: 0,0:58:50.36,0:58:51.26,english,,0,0,0,,OK, wait a minute.
Dialogue: 0,0:58:50.36,0:58:51.26,chinese,,0,0,0,,好吧，等一下。
Dialogue: 0,0:58:51.26,0:58:53.45,english,,0,0,0,,Negative 2 is obviously less than 0.
Dialogue: 0,0:58:51.26,0:58:53.45,chinese,,0,0,0,,负 2 显然小于 0。
Dialogue: 0,0:58:53.45,0:58:56.08,english,,0,0,0,,Let me try this one more time.
Dialogue: 0,0:58:53.45,0:58:56.08,chinese,,0,0,0,,让我再试一次。
Dialogue: 0,0:58:56.08,0:58:57.57,english,,0,0,0,,Click it once here.
Dialogue: 0,0:58:56.08,0:58:57.57,chinese,,0,0,0,,在此点击一次。
Dialogue: 0,0:58:57.57,0:58:59.04,english,,0,0,0,,All right, let me give it 50.
Dialogue: 0,0:58:57.57,0:58:59.04,chinese,,0,0,0,,好吧，让我给它50。
Dialogue: 0,0:58:59.04,0:59:08.97,english,,0,0,0,,And now, OK, while 50 is less than 0, that's not true, so the loop is over because it's not going to do it while 50 is less than 0.
Dialogue: 0,0:58:59.04,0:59:08.97,chinese,,0,0,0,,现在，好了，当 50 小于 0 时，这不是真的，所以循环结束了，因为它不会在 50 小于 0 时执行。
Dialogue: 0,0:59:08.97,0:59:09.73,english,,0,0,0,,That's not true.
Dialogue: 0,0:59:08.97,0:59:09.73,chinese,,0,0,0,,事实并非如此。
Dialogue: 0,0:59:09.73,0:59:15.81,english,,0,0,0,,So now watch, when I click Step Over once more, it then finishes the loop, even though there's nothing more to do.
Dialogue: 0,0:59:09.73,0:59:15.81,chinese,,0,0,0,,所以现在看，当我再点击一次 Step Over 时，它就会完成循环，即使没有其他事情要做。
Dialogue: 0,0:59:15.81,0:59:17.61,english,,0,0,0,,It's now about to return n.
Dialogue: 0,0:59:15.81,0:59:17.61,chinese,,0,0,0,,现在即将返回 n。
Dialogue: 0,0:59:17.61,0:59:21.36,english,,0,0,0,,It jumps back up to main, where I left off on line 9.
Dialogue: 0,0:59:17.61,0:59:21.36,chinese,,0,0,0,,它会跳回到主界面，也就是我在第 9 行离开的地方。
Dialogue: 0,0:59:21.36,0:59:23.77,english,,0,0,0,,It now prints, in my terminal window, the number 50.
Dialogue: 0,0:59:21.36,0:59:23.77,chinese,,0,0,0,,现在，它在我的终端窗口中打印出了数字 50。
Dialogue: 0,0:59:23.77,0:59:30.70,english,,0,0,0,,And hopefully, at this point, to your question earlier, my human brain has realized, oh, I'm an idiot, like I flipped my sign there.
Dialogue: 0,0:59:23.77,0:59:30.70,chinese,,0,0,0,,希望在这一点上，对于你刚才的问题，我的人脑已经意识到，哦，我是个白痴，就像我在那里翻了牌子一样。
Dialogue: 0,0:59:30.70,0:59:32.46,english,,0,0,0,,So I probably-- let me stop this.
Dialogue: 0,0:59:30.70,0:59:32.46,chinese,,0,0,0,,所以，我可能 - 让我停止这一点。
Dialogue: 0,0:59:32.46,0:59:34.78,english,,0,0,0,,I probably want to do something like this.
Dialogue: 0,0:59:32.46,0:59:34.78,chinese,,0,0,0,,我可能想做这样的事情。
Dialogue: 0,0:59:34.78,0:59:45.07,english,,0,0,0,,If the goal is to get a negative integer, I probably want to say, while n is, for instance, greater than or equal to 0 would work.
Dialogue: 0,0:59:34.78,0:59:45.07,chinese,,0,0,0,,如果目标是得到一个负整数，我可能想说，比如 n 大于或等于 0 也行。
Dialogue: 0,0:59:45.07,0:59:48.63,english,,0,0,0,,So while n is greater than or equal to 0, keep doing this.
Dialogue: 0,0:59:45.07,0:59:48.63,chinese,,0,0,0,,因此，当 n 大于或等于 0 时，继续这样做。
Dialogue: 0,0:59:48.63,0:59:50.43,english,,0,0,0,,And that's the logic I wanted to express.
Dialogue: 0,0:59:48.63,0:59:50.43,chinese,,0,0,0,,这就是我想表达的逻辑。
Dialogue: 0,0:59:50.43,0:59:54.90,english,,0,0,0,,So the debugger just saves me from staring at the screen, raising a hand, sort of asking someone else.
Dialogue: 0,0:59:50.43,0:59:54.90,chinese,,0,0,0,,因此，调试器可以让我不必盯着屏幕，举起一只手，向其他人询问。
Dialogue: 0,0:59:54.90,0:59:58.65,english,,0,0,0,,At least in this case, it allows me to go through it at a healthier pace.
Dialogue: 0,0:59:54.90,0:59:58.65,chinese,,0,0,0,,至少在这种情况下，它能让我以更健康的速度完成它。
Dialogue: 0,0:59:58.65,1:00:04.94,english,,0,0,0,,Questions now on debug50, which should be your new friend, even if it's not your first instinct after printf?
Dialogue: 0,0:59:58.65,1:00:04.94,chinese,,0,0,0,,关于 debug50 的问题，即使它不是你在 printf 之后的第一反应，它也应该是你的新朋友。
Dialogue: 0,1:00:07.69,1:00:09.19,english,,0,0,0,,Any questions on debug50?
Dialogue: 0,1:00:07.69,1:00:09.19,chinese,,0,0,0,,有关于 debug50 的问题吗？
Dialogue: 0,1:00:09.19,1:00:09.73,english,,0,0,0,,No?
Dialogue: 0,1:00:09.73,1:00:13.96,english,,0,0,0,,All right, well, there's one last technique we can equip you with here.
Dialogue: 0,1:00:09.73,1:00:13.96,chinese,,0,0,0,,好吧，我们还可以教你最后一个技巧。
Dialogue: 0,1:00:13.96,1:00:22.72,english,,0,0,0,,And that is, in addition to printf and a debugger, no joke, a rubber duck is actually a reasonably recommended solution to finding bugs in your code.
Dialogue: 0,1:00:13.96,1:00:22.72,chinese,,0,0,0,,也就是说，除了 printf 和调试器（不是开玩笑）之外，橡皮鸭其实也是一个值得推荐的查找代码错误的解决方案。
Dialogue: 0,1:00:22.72,1:00:26.39,english,,0,0,0,,To your question earlier, the duck two is not going to solve the problem for you.
Dialogue: 0,1:00:22.72,1:00:26.39,chinese,,0,0,0,,对于你刚才的问题，鸭子二号并不能为你解决问题。
Dialogue: 0,1:00:26.39,1:00:33.76,english,,0,0,0,,But if you've wondered why this little guy has been here for so long, there's this technique, has its own Wikipedia article of called rubber duck debugging.
Dialogue: 0,1:00:26.39,1:00:33.76,chinese,,0,0,0,,不过，如果你想知道为什么这个小家伙在这里呆了这么久，那么有一种技术，在维基百科上有自己的文章，叫做橡皮鸭调试。
Dialogue: 0,1:00:33.76,1:00:42.82,english,,0,0,0,,The idea of which is that if you're home in your dorm room, wrestling with some bug in your code, printf didn't quite reveal the source to you, debugger isn't really helping,
Dialogue: 0,1:00:33.76,1:00:42.82,chinese,,0,0,0,,这样做的目的是，如果你在宿舍里与代码中的某个错误搏斗，printf 并没有完全向你揭示源代码，调试器也帮不上什么忙、
Dialogue: 0,1:00:42.82,1:00:46.96,english,,0,0,0,,honestly, maybe it would help to just sound out what problem you're having.
Dialogue: 0,1:00:42.82,1:00:46.96,chinese,,0,0,0,,老实说，如果能把你遇到的问题说清楚，也许会有帮助。
Dialogue: 0,1:00:46.96,1:00:54.73,english,,0,0,0,,Similar to going to office hours, talking to a TA or a professor, just walking through your problems because in sort of talking to the duck about the fact
Dialogue: 0,1:00:46.96,1:00:54.73,chinese,,0,0,0,,类似于去办公室，与助教或教授交谈，把你的问题一一道来，因为在与鸭子交谈的过程中，事实上
Dialogue: 0,1:00:54.73,1:01:01.18,english,,0,0,0,,that you're doing this while n is less than 0, and then if it is-- wait a minute.
Dialogue: 0,1:00:54.73,1:01:01.18,chinese,,0,0,0,,在 n 小于 0 的情况下进行，如果 n 小于 0 -- 请稍候。
Dialogue: 0,1:01:01.18,1:01:03.82,english,,0,0,0,,I'm an idiot, not just for talking to the rubber duck.
Dialogue: 0,1:01:01.18,1:01:03.82,chinese,,0,0,0,,我是个白痴，不只是因为和橡皮鸭说话。
Dialogue: 0,1:01:03.82,1:01:11.86,english,,0,0,0,,You realize, hopefully, in expressing yourself, literally verbally, you probably will hear with non-zero probability, like some illogic in your statement.
Dialogue: 0,1:01:03.82,1:01:11.86,chinese,,0,0,0,,你意识到，希望在表达自己时，从字面上看，你可能会听到非零概率的说法，比如你的陈述中存在一些不合逻辑的地方。
Dialogue: 0,1:01:11.86,1:01:16.43,english,,0,0,0,,And just by sounding things out, you'll realize like, oh, that's my problem.
Dialogue: 0,1:01:11.86,1:01:16.43,chinese,,0,0,0,,只要把事情说清楚，你就会意识到，哦，这就是我的问题所在。
Dialogue: 0,1:01:16.43,1:01:19.72,english,,0,0,0,,And so, frankly, if you have roommates, you can also use a roommate for this.
Dialogue: 0,1:01:16.43,1:01:19.72,chinese,,0,0,0,,因此，坦率地说，如果你有室友，你也可以用室友来做这件事。
Dialogue: 0,1:01:19.72,1:01:28.15,english,,0,0,0,,But the rubber duck is just sort of a go-to when your roommates have no interest in your C problem set, talking something through that as such.
Dialogue: 0,1:01:19.72,1:01:28.15,chinese,,0,0,0,,但是，当室友们对你的 C 题集不感兴趣时，橡皮鸭就成了他们的首选。
Dialogue: 0,1:01:28.15,1:01:29.93,english,,0,0,0,,And this is an invaluable technique.
Dialogue: 0,1:01:28.15,1:01:29.93,chinese,,0,0,0,,这是一项非常宝贵的技术。
Dialogue: 0,1:01:29.93,1:01:34.51,english,,0,0,0,,I admittedly tend not to do it so much with a rubber duck, but ideally with colleagues, human colleagues.
Dialogue: 0,1:01:29.93,1:01:34.51,chinese,,0,0,0,,我承认，我不太喜欢和橡皮鸭一起玩，但我更喜欢和同事，人类同事一起玩。
Dialogue: 0,1:01:34.51,1:01:40.36,english,,0,0,0,,But just talking through things often will help you just realize, oh, I said something illogical.
Dialogue: 0,1:01:34.51,1:01:40.36,chinese,,0,0,0,,但是，只要经常把事情说清楚，你就会意识到，哦，我说了一些不合逻辑的话。
Dialogue: 0,1:01:40.36,1:01:41.86,english,,0,0,0,,Now I can go back to the code.
Dialogue: 0,1:01:40.36,1:01:41.86,chinese,,0,0,0,,现在我可以回去写代码了。
Dialogue: 0,1:01:41.86,1:01:46.24,english,,0,0,0,,So don't solve problems by staring at your screen endlessly for minutes, for hours.
Dialogue: 0,1:01:41.86,1:01:46.24,chinese,,0,0,0,,因此，不要通过无休止地盯着屏幕几分钟、几个小时来解决问题。
Dialogue: 0,1:01:46.24,1:01:52.90,english,,0,0,0,,At that point, it's time for a break, time to walk away, time to talk to the duck, if you've already exhausted some of those other tools.
Dialogue: 0,1:01:46.24,1:01:52.90,chinese,,0,0,0,,这时，如果你已经用尽了其他工具，就该休息一下，该走开了，该和鸭子谈谈了。
Dialogue: 0,1:01:52.90,1:01:59.02,english,,0,0,0,,As an aside, on your way out today at the end of class, we have, clearly, plenty of rubber ducks for you.
Dialogue: 0,1:01:52.90,1:01:59.02,chinese,,0,0,0,,顺便说一句，今天下课的时候，我们为你们准备了很多橡皮鸭。
Dialogue: 0,1:01:59.02,1:02:05.77,english,,0,0,0,,And it's become a thing over the years, at least among some, to bring the duck with them when they travel and send us photos.
Dialogue: 0,1:01:59.02,1:02:05.77,chinese,,0,0,0,,多年来，至少在一些人当中，他们旅行时带上鸭子并给我们寄照片已经成为一种习惯。
Dialogue: 0,1:02:05.77,1:02:15.94,english,,0,0,0,,Here, for instance, is CS50's rubber duck debugger, A.K.A. DDB, for Duck Debugger, which is a pun on a geekier program called GDB, the GNU
Dialogue: 0,1:02:05.77,1:02:15.94,chinese,,0,0,0,,例如，这里是 CS50 的橡皮鸭调试器，又名 DDB（鸭子调试器），这是一个双关语，意为 GDB（GNU 调试器）。
Dialogue: 0,1:02:15.94,1:02:18.74,english,,0,0,0,,Debugger, which is an actual piece of software for debugging.
Dialogue: 0,1:02:15.94,1:02:18.74,chinese,,0,0,0,,调试器，这是一个实际的调试软件。
Dialogue: 0,1:02:18.74,1:02:25.27,english,,0,0,0,,This is CS50's debugger in the hills of Puerto Rico, also, here on the sea.
Dialogue: 0,1:02:18.74,1:02:25.27,chinese,,0,0,0,,这是 CS50 在波多黎各山上的调试器，也在海边。
Dialogue: 0,1:02:25.27,1:02:28.31,english,,0,0,0,,He made its way to San Francisco here.
Dialogue: 0,1:02:25.27,1:02:28.31,chinese,,0,0,0,,他在这里前往旧金山。
Dialogue: 0,1:02:28.31,1:02:30.64,english,,0,0,0,,Also, down by Fisherman's Wharf by the sea lions.
Dialogue: 0,1:02:28.31,1:02:30.64,chinese,,0,0,0,,另外，在渔人码头海狮旁边。
Dialogue: 0,1:02:30.64,1:02:31.66,english,,0,0,0,,Familiar?
Dialogue: 0,1:02:31.66,1:02:38.95,english,,0,0,0,,Here at Stanford, where there's a William Gates Computer Science building for computer science, down the road in SF at Google.
Dialogue: 0,1:02:31.66,1:02:38.95,chinese,,0,0,0,,在斯坦福大学，有一座威廉-盖茨计算机科学大楼，专门用于计算机科学；在三藩市的谷歌公司，也有一座威廉-盖茨计算机科学大楼。
Dialogue: 0,1:02:38.95,1:02:41.65,english,,0,0,0,,And this is the Trevi Fountain in Rome.
Dialogue: 0,1:02:38.95,1:02:41.65,chinese,,0,0,0,,这就是罗马的许愿泉。
Dialogue: 0,1:02:41.65,1:02:43.81,english,,0,0,0,,And lastly, the Colosseum.
Dialogue: 0,1:02:41.65,1:02:43.81,chinese,,0,0,0,,最后是斗兽场。
Dialogue: 0,1:02:43.81,1:02:46.99,english,,0,0,0,,So we'll be curious to see in the coming years where your duck two travels.
Dialogue: 0,1:02:43.81,1:02:46.99,chinese,,0,0,0,,因此，我们很想知道，在未来的几年里，你的鸭子二号会去哪里旅行。
Dialogue: 0,1:02:46.99,1:02:49.12,english,,0,0,0,,So that, then, was quite a bit.
Dialogue: 0,1:02:46.99,1:02:49.12,chinese,,0,0,0,,所以，那就相当多了。
Dialogue: 0,1:02:49.12,1:02:51.85,english,,0,0,0,,Why don't we go ahead here and take a short 5 minute break?
Dialogue: 0,1:02:49.12,1:02:51.85,chinese,,0,0,0,,我们为什么不在这里休息 5 分钟呢？
Dialogue: 0,1:02:51.85,1:02:52.76,english,,0,0,0,,No snacks yet.
Dialogue: 0,1:02:51.85,1:02:52.76,chinese,,0,0,0,,还没有点心。
Dialogue: 0,1:02:52.76,1:02:54.40,english,,0,0,0,,You're welcome to get up or sit down.
Dialogue: 0,1:02:52.76,1:02:54.40,chinese,,0,0,0,,欢迎起身或坐下。
Dialogue: 0,1:02:54.40,1:02:56.62,english,,0,0,0,,We'll return in about five.
Dialogue: 0,1:02:54.40,1:02:56.62,chinese,,0,0,0,,我们五分钟后回来
Dialogue: 0,1:02:56.62,1:03:00.02,english,,0,0,0,,All right, so we are back.
Dialogue: 0,1:02:56.62,1:03:00.02,chinese,,0,0,0,,好了，我们回来了。
Dialogue: 0,1:03:00.02,1:03:09.19,english,,0,0,0,,And if the goal, ultimately, today is to have a better understanding of things like strings so that we can solve problems with text, let's consider some simpler types of data
Dialogue: 0,1:03:00.02,1:03:09.19,chinese,,0,0,0,,如果我们今天的最终目标是更好地理解字符串之类的东西，从而解决文本问题，那么我们不妨考虑一些更简单的数据类型
Dialogue: 0,1:03:09.19,1:03:17.33,english,,0,0,0,,first, how we might represent those, and then see if that doesn't lead us to a discovery as to how strings, and just today's modern software is using things like that.
Dialogue: 0,1:03:09.19,1:03:17.33,chinese,,0,0,0,,首先，我们可以如何表示这些，然后看看这是否会让我们发现字符串是如何使用的，以及今天的现代软件是如何使用类似的东西的。
Dialogue: 0,1:03:17.33,1:03:27.64,english,,0,0,0,,So when we talked on week zero about representation of data, we had different ways of doing it, in terms of binary and decimal, and unary even.
Dialogue: 0,1:03:17.33,1:03:27.64,chinese,,0,0,0,,因此，当我们在第零周讨论数据的表示法时，我们有不同的方法，有二进制和十进制，甚至还有一元制。
Dialogue: 0,1:03:27.64,1:03:33.98,english,,0,0,0,,When we started talking about the same last week in code, we started talking about data types instead.
Dialogue: 0,1:03:27.64,1:03:33.98,chinese,,0,0,0,,当我们上周开始讨论同样的代码时，我们开始讨论数据类型。
Dialogue: 0,1:03:33.98,1:03:45.07,english,,0,0,0,,And these data types were a way of telling the computer, like do you want an integer, do you want a character, do you want a floating point value, like a real number, or even a string, as we've seen?
Dialogue: 0,1:03:33.98,1:03:45.07,chinese,,0,0,0,,这些数据类型是告诉计算机的一种方式，比如你想要一个整数、一个字符、一个浮点数值（如实数），甚至是一个字符串，正如我们已经看到的那样。
Dialogue: 0,1:03:45.07,1:03:49.93,english,,0,0,0,,But it turns out that computers, of course, only have finite amounts of resources.
Dialogue: 0,1:03:45.07,1:03:49.93,chinese,,0,0,0,,但事实证明，计算机的资源当然是有限的。
Dialogue: 0,1:03:49.93,1:03:53.74,english,,0,0,0,,Your computer only has a fixed amount of memory or RAM.
Dialogue: 0,1:03:49.93,1:03:53.74,chinese,,0,0,0,,您的电脑只有固定数量的内存或 RAM。
Dialogue: 0,1:03:53.74,1:03:55.91,english,,0,0,0,,And that actually has very real world implications.
Dialogue: 0,1:03:53.74,1:03:55.91,chinese,,0,0,0,,这实际上具有非常现实的意义。
Dialogue: 0,1:03:55.91,1:03:59.63,english,,0,0,0,,So for instance, here are some of the data types we've seen thus far.
Dialogue: 0,1:03:55.91,1:03:59.63,chinese,,0,0,0,,举例来说，下面是我们迄今为止看到的一些数据类型。
Dialogue: 0,1:03:59.63,1:04:05.65,english,,0,0,0,,And it turns out that each of these in C has a specific number of bits allocated to it.
Dialogue: 0,1:03:59.63,1:04:05.65,chinese,,0,0,0,,事实证明，C 语言中的每一个比特都有特定的位数分配。
Dialogue: 0,1:04:05.65,1:04:08.35,english,,0,0,0,,Now, admittedly, this can vary by system.
Dialogue: 0,1:04:05.65,1:04:08.35,chinese,,0,0,0,,当然，这也会因系统而异。
Dialogue: 0,1:04:08.35,1:04:13.10,english,,0,0,0,,It's not so much the case nowadays, but for many years, for decades, computers were getting better and better.
Dialogue: 0,1:04:08.35,1:04:13.10,chinese,,0,0,0,,现在的情况并非如此，但多年来，几十年来，计算机的性能越来越好。
Dialogue: 0,1:04:13.10,1:04:16.60,english,,0,0,0,,The earliest computers might have used fewer bits for some of these data types.
Dialogue: 0,1:04:13.10,1:04:16.60,chinese,,0,0,0,,最早的计算机可能使用较少的比特来处理其中一些数据类型。
Dialogue: 0,1:04:16.60,1:04:18.66,english,,0,0,0,,More modern computers might use more bits.
Dialogue: 0,1:04:16.60,1:04:18.66,chinese,,0,0,0,,更现代化的计算机可能会使用更多比特。
Dialogue: 0,1:04:18.66,1:04:21.83,english,,0,0,0,,So the numbers you're about to see are pretty much where we are present day.
Dialogue: 0,1:04:18.66,1:04:21.83,chinese,,0,0,0,,因此，你们即将看到的数字就是我们目前的基本情况。
Dialogue: 0,1:04:21.83,1:04:32.38,english,,0,0,0,,So when it comes to these data types, a bool, which is true or false, somewhat curiously, uses a whole byte, even though that's way overkill because for a bool, true or false,
Dialogue: 0,1:04:21.83,1:04:32.38,chinese,,0,0,0,,因此，说到这些数据类型，"真 "或 "假 "的 bool 会使用一整个字节，这有点奇怪，因为对于 bool 而言，"真 "或 "假 "都是 "真 "或 "假"、
Dialogue: 0,1:04:32.38,1:04:33.94,english,,0,0,0,,you, of course, only need one bit.
Dialogue: 0,1:04:32.38,1:04:33.94,chinese,,0,0,0,,当然，你只需要一个位。
Dialogue: 0,1:04:33.94,1:04:41.23,english,,0,0,0,,But it turns out, even though it's wasteful to use eight bits, or one byte, just to represent true or false, it's just easier for computers.
Dialogue: 0,1:04:33.94,1:04:41.23,chinese,,0,0,0,,但事实证明，尽管用八个比特或一个字节来表示 "真 "或 "假 "很浪费，但对计算机来说却更容易。
Dialogue: 0,1:04:41.23,1:04:42.82,english,,0,0,0,,So a bool tends to be one byte.
Dialogue: 0,1:04:41.23,1:04:42.82,chinese,,0,0,0,,因此，一个 bool 往往是一个字节。
Dialogue: 0,1:04:42.82,1:04:47.59,english,,0,0,0,,An int, which we've been using a lot, uses 4 bytes, typically, or 32 bits.
Dialogue: 0,1:04:42.82,1:04:47.59,chinese,,0,0,0,,我们经常使用的 int 通常使用 4 个字节，即 32 位。
Dialogue: 0,1:04:47.59,1:04:54.04,english,,0,0,0,,And if I do some quick math from week zero, with 32 bits, you have 4 billion possible values, roughly.
Dialogue: 0,1:04:47.59,1:04:54.04,chinese,,0,0,0,,如果我从零开始快速计算一下，32 位大概有 40 亿个可能的值。
Dialogue: 0,1:04:54.04,1:05:01.02,english,,0,0,0,,But if you want to represent positive and negative, that means you can represent roughly negative 2 billion, all the way up to positive 2 billion.
Dialogue: 0,1:04:54.04,1:05:01.02,chinese,,0,0,0,,但是，如果你想表示正数和负数，这意味着你可以大致表示负 20 亿，一直到正 20 亿。
Dialogue: 0,1:05:01.02,1:05:02.77,english,,0,0,0,,So that's the range, typically, with ints.
Dialogue: 0,1:05:01.02,1:05:02.77,chinese,,0,0,0,,这就是 ints 的典型范围。
Dialogue: 0,1:05:02.77,1:05:06.82,english,,0,0,0,,If that's too few numbers for you, turns out there's things called longs.
Dialogue: 0,1:05:02.77,1:05:06.82,chinese,,0,0,0,,如果你觉得数字太少，那么还有一种叫多头的东西。
Dialogue: 0,1:05:06.82,1:05:15.73,english,,0,0,0,,And longs use 64 bits, which allow you to have like a quintillion number of possibilities, which is a lot, certainly, a lot more than 4 billion.
Dialogue: 0,1:05:06.82,1:05:15.73,chinese,,0,0,0,,而长字符使用 64 位，这就允许你拥有五亿种可能性，当然，这比 40 亿要多得多。
Dialogue: 0,1:05:15.73,1:05:17.41,english,,0,0,0,,So sometimes you might use a long.
Dialogue: 0,1:05:15.73,1:05:17.41,chinese,,0,0,0,,因此，有时您可能会使用长号。
Dialogue: 0,1:05:17.41,1:05:18.67,english,,0,0,0,,But even that's finite.
Dialogue: 0,1:05:17.41,1:05:18.67,chinese,,0,0,0,,但即便如此，也是有限的。
Dialogue: 0,1:05:18.67,1:05:28.33,english,,0,0,0,,And so as we discussed at the end of last week, bad things can happen if you make certain assumptions as to the data because of things like integer overflow or the like, where things wrap around.
Dialogue: 0,1:05:18.67,1:05:28.33,chinese,,0,0,0,,因此，正如我们在上周末所讨论的那样，如果你对数据做出某些假设，就会发生不好的事情，因为会出现整数溢出或类似的情况，即事情缠绕在一起。
Dialogue: 0,1:05:28.33,1:05:31.53,english,,0,0,0,,Then there's a float, which is a real number, something with a decimal point.
Dialogue: 0,1:05:28.33,1:05:31.53,chinese,,0,0,0,,然后是浮点数，它是一个实数，带有小数点。
Dialogue: 0,1:05:31.53,1:05:37.81,english,,0,0,0,,By convention, it's 4 bytes or 32 bits, which gives you, in short, only a specific amount of precision.
Dialogue: 0,1:05:31.53,1:05:37.81,chinese,,0,0,0,,按照惯例，它是 4 字节或 32 位，简而言之，只有特定的精度。
Dialogue: 0,1:05:37.81,1:05:41.62,english,,0,0,0,,It doesn't necessarily dictate how many numbers to the left or to the right.
Dialogue: 0,1:05:37.81,1:05:41.62,chinese,,0,0,0,,它并不一定决定左边或右边有多少个数字。
Dialogue: 0,1:05:41.62,1:05:45.25,english,,0,0,0,,In the aggregate, ultimately, you have though,
Dialogue: 0,1:05:41.62,1:05:45.25,chinese,,0,0,0,,不过，总的来说，你还是有的、
Dialogue: 0,1:05:45.25,1:05:47.65,english,,0,0,0,,4 billion possible permutations still.
Dialogue: 0,1:05:45.25,1:05:47.65,chinese,,0,0,0,,仍有 40 亿种可能的排列组合。
Dialogue: 0,1:05:47.65,1:05:57.70,english,,0,0,0,,If you need more precision for scientific, for medical, for financial applications, you might use 8 bytes, A.K.A. a double, which just gives you more digits of precision.
Dialogue: 0,1:05:47.65,1:05:57.70,chinese,,0,0,0,,如果在科学、医疗和金融应用中需要更高的精度，可以使用 8 字节，也就是双倍，这样可以获得更多位数的精度。
Dialogue: 0,1:05:57.70,1:06:03.61,english,,0,0,0,,They eventually get imprecise per the example we looked at last week, but it at least gets you further down the line.
Dialogue: 0,1:05:57.70,1:06:03.61,chinese,,0,0,0,,按照我们上周看的例子，它们最终会变得不精确，但至少能让你更进一步。
Dialogue: 0,1:06:03.61,1:06:12.64,english,,0,0,0,,As an aside, in really, really important applications, in finance, in medicine, in military operations, and the like where you really can't have rounding errors--
Dialogue: 0,1:06:03.61,1:06:12.64,chinese,,0,0,0,,另外，在非常非常重要的应用领域，如金融、医学、军事行动等，真的不能有四舍五入误差-----------------。
Dialogue: 0,1:06:12.64,1:06:19.31,english,,0,0,0,,long story short, humans have developed libraries in C and other languages that use more, even, than 8 bytes.
Dialogue: 0,1:06:12.64,1:06:19.31,chinese,,0,0,0,,长话短说，人类已经用 C 语言和其他语言开发出了甚至超过 8 字节的库。
Dialogue: 0,1:06:19.31,1:06:22.15,english,,0,0,0,,So there are solutions to these problems, but they're always finite.
Dialogue: 0,1:06:19.31,1:06:22.15,chinese,,0,0,0,,因此，这些问题是有解决办法的，但办法总是有限的。
Dialogue: 0,1:06:22.15,1:06:24.07,english,,0,0,0,,You have to pick an upper bound.
Dialogue: 0,1:06:22.15,1:06:24.07,chinese,,0,0,0,,你必须选择一个上限。
Dialogue: 0,1:06:24.07,1:06:29.47,english,,0,0,0,,Then there's char, which we saw briefly last week when I asked the user for y or n, for yes or no.
Dialogue: 0,1:06:24.07,1:06:29.47,chinese,,0,0,0,,然后是 char，上周我在询问用户 "y "或 "n"、"是 "或 "否 "时，我们简单地看到了 char。
Dialogue: 0,1:06:29.47,1:06:34.36,english,,0,0,0,,And then there's a string, which I'm going to propose as a question mark because a string totally depends.
Dialogue: 0,1:06:29.47,1:06:34.36,chinese,,0,0,0,,然后还有一个字符串，我打算用问号来表示，因为字符串完全取决于实际情况。
Dialogue: 0,1:06:34.36,1:06:35.38,english,,0,0,0,,Like, Hi!
Dialogue: 0,1:06:35.38,1:06:38.89,english,,0,0,0,,H-I, exclamation point, would seem to be three bytes.
Dialogue: 0,1:06:35.38,1:06:38.89,chinese,,0,0,0,,H-I，感叹号，似乎是三个字节。
Dialogue: 0,1:06:38.89,1:06:41.14,english,,0,0,0,,D-A-V-I-D, would seem to be five.
Dialogue: 0,1:06:38.89,1:06:41.14,chinese,,0,0,0,,D-A-V-I-D，似乎是五个。
Dialogue: 0,1:06:41.14,1:06:45.40,english,,0,0,0,,So the strings, clearly, are variable based on what you or the human type in.
Dialogue: 0,1:06:41.14,1:06:45.40,chinese,,0,0,0,,因此，字符串显然是可变的，取决于你或人类输入的内容。
Dialogue: 0,1:06:45.40,1:06:48.14,english,,0,0,0,,So we'll see what this means, though, in just a bit.
Dialogue: 0,1:06:45.40,1:06:48.14,chinese,,0,0,0,,我们稍后就会知道这意味着什么。
Dialogue: 0,1:06:48.14,1:06:51.58,english,,0,0,0,,This though, is the thing inside of your Mac, your PC, your phone.
Dialogue: 0,1:06:48.14,1:06:51.58,chinese,,0,0,0,,不过，这是你的 Mac、PC 和手机里的东西。
Dialogue: 0,1:06:51.58,1:06:56.18,english,,0,0,0,,It might not look exactly like this, but this is a memory module for a modern computer.
Dialogue: 0,1:06:51.58,1:06:56.18,chinese,,0,0,0,,它可能看起来并不完全像这样，但这是现代计算机的内存模块。
Dialogue: 0,1:06:56.18,1:06:57.52,english,,0,0,0,,And let's go ahead and use this.
Dialogue: 0,1:06:56.18,1:06:57.52,chinese,,0,0,0,,让我们继续使用它。
Dialogue: 0,1:06:57.52,1:07:01.36,english,,0,0,0,,Really, it's just representative of the finite amount of memory that any computer, indeed, has.
Dialogue: 0,1:06:57.52,1:07:01.36,chinese,,0,0,0,,实际上，这只是代表了任何计算机内存的有限性。
Dialogue: 0,1:07:01.36,1:07:06.16,english,,0,0,0,,Let's zoom in on one of these little black chips on the circuit board here.
Dialogue: 0,1:07:01.36,1:07:06.16,chinese,,0,0,0,,让我们放大电路板上的这些黑色小芯片。
Dialogue: 0,1:07:06.16,1:07:16.75,english,,0,0,0,,Zoom in, and let me propose that this rectangle really represents some number of bytes, like tucked inside of this little black circuit on the board is maybe, I don't know, a gigabyte,
Dialogue: 0,1:07:06.16,1:07:16.75,chinese,,0,0,0,,放大，让我提议，这个矩形确实代表了一定数量的字节，就像藏在电路板上这个黑色小电路里面的，我不知道，可能是一个千兆字节、
Dialogue: 0,1:07:16.75,1:07:19.30,english,,0,0,0,,a billion bytes, maybe it's 100 bytes-- some number of bytes.
Dialogue: 0,1:07:16.75,1:07:19.30,chinese,,0,0,0,,十亿字节，也许是 100 字节--某个字节数。
Dialogue: 0,1:07:19.30,1:07:22.70,english,,0,0,0,,It totally depends on the computer and how much you paid for the stick of memory.
Dialogue: 0,1:07:19.30,1:07:22.70,chinese,,0,0,0,,这完全取决于电脑和内存条的价格。
Dialogue: 0,1:07:22.70,1:07:32.41,english,,0,0,0,,But if there's a finite number of bytes physically implemented somehow digitally inside of this hardware, well, then it stands to reason that we could number those bytes.
Dialogue: 0,1:07:22.70,1:07:32.41,chinese,,0,0,0,,但是，如果硬件内部以某种数字方式物理实现的字节数是有限的，那么我们就有理由对这些字节进行编号。
Dialogue: 0,1:07:32.41,1:07:38.80,english,,0,0,0,,We can just arbitrarily decide that the top left corner is byte number one, or really byte number zero.
Dialogue: 0,1:07:32.41,1:07:38.80,chinese,,0,0,0,,我们可以任意决定左上角是 1 号字节，或者真的是 0 号字节。
Dialogue: 0,1:07:38.80,1:07:46.09,english,,0,0,0,,The one next to it is number one, then number two, number 3, dot, dot, dot, number 2 billion or whatever it is, however big this memory is.
Dialogue: 0,1:07:38.80,1:07:46.09,chinese,,0,0,0,,旁边的是 1 号，然后是 2 号、3 号、点、点、点、20 亿或其他数字，不管这个存储器有多大。
Dialogue: 0,1:07:46.09,1:07:50.53,english,,0,0,0,,So if you use a variable in a C program, that's only one byte.
Dialogue: 0,1:07:46.09,1:07:50.53,chinese,,0,0,0,,因此，如果您在 C 语言程序中使用一个变量，它只有一个字节。
Dialogue: 0,1:07:50.53,1:07:55.12,english,,0,0,0,,Like a char, it might literally be stored in that top left-hand corner of the memory.
Dialogue: 0,1:07:50.53,1:07:55.12,chinese,,0,0,0,,就像字符一样，它可能就存储在内存的左上角。
Dialogue: 0,1:07:55.12,1:07:57.76,english,,0,0,0,,In practice, you don't care where, physically, it is.
Dialogue: 0,1:07:55.12,1:07:57.76,chinese,,0,0,0,,实际上，你并不关心它的物理位置。
Dialogue: 0,1:07:57.76,1:08:04.33,english,,0,0,0,,But really, the artist's rendition would be this-- a char might use one of those single bytes somewhere in the computer's memory.
Dialogue: 0,1:07:57.76,1:08:04.33,chinese,,0,0,0,,但实际上，艺术家的演绎是这样的--一个字符可能会使用计算机内存中的某个单字节。
Dialogue: 0,1:08:04.33,1:08:07.45,english,,0,0,0,,If you use an int, which is 4 bytes, it would give you
Dialogue: 0,1:08:04.33,1:08:07.45,chinese,,0,0,0,,如果使用 int（4 个字节），则可以得到
Dialogue: 0,1:08:07.45,1:08:10.84,english,,0,0,0,,4 bytes, contiguous-- that is left to right, top to bottom.
Dialogue: 0,1:08:07.45,1:08:10.84,chinese,,0,0,0,,4 字节，连续 - 即从左到右，从上到下。
Dialogue: 0,1:08:10.84,1:08:16.14,english,,0,0,0,,But all 32 bits would be next to each other so the computer knows that those, indeed, all belong to the same int.
Dialogue: 0,1:08:10.84,1:08:16.14,chinese,,0,0,0,,但所有 32 位都会紧挨着，这样计算机就知道这些位确实都属于同一个 int。
Dialogue: 0,1:08:16.14,1:08:21.14,english,,0,0,0,,If you need a long, or a double for that matter, then you might use a full 8 bytes in this case.
Dialogue: 0,1:08:16.14,1:08:21.14,chinese,,0,0,0,,如果您需要长数据或双倍数据，在这种情况下您可能需要使用整整 8 个字节。
Dialogue: 0,1:08:21.14,1:08:29.84,english,,0,0,0,,And you just keep using and using this memory, kind of like a canvas, almost in Photoshop or a spreadsheet where you can just move pixels or you can move data around,
Dialogue: 0,1:08:21.14,1:08:29.84,chinese,,0,0,0,,你只需不断地使用这个内存，就像在 Photoshop 或电子表格中的画布一样，你可以随意移动像素或数据、
Dialogue: 0,1:08:29.84,1:08:36.70,english,,0,0,0,,that's really what your computer's memory is, a canvas for storing information in units of bytes or 8 bits.
Dialogue: 0,1:08:29.84,1:08:36.70,chinese,,0,0,0,,这就是计算机内存的真正含义，它是以字节或 8 位为单位存储信息的画布。
Dialogue: 0,1:08:36.70,1:08:39.16,english,,0,0,0,,Now, we don't need to keep looking at these circuit boards.
Dialogue: 0,1:08:36.70,1:08:39.16,chinese,,0,0,0,,现在，我们不需要继续看这些电路板了。
Dialogue: 0,1:08:39.16,1:08:41.28,english,,0,0,0,,We can abstract it away, as we often do.
Dialogue: 0,1:08:39.16,1:08:41.28,chinese,,0,0,0,,我们可以把它抽象出来，我们经常这样做。
Dialogue: 0,1:08:41.28,1:08:45.74,english,,0,0,0,,And let's go ahead and zoom in on this grid, just to consider some very specific variables.
Dialogue: 0,1:08:41.28,1:08:45.74,chinese,,0,0,0,,让我们继续放大这个网格，考虑一些非常具体的变量。
Dialogue: 0,1:08:45.74,1:08:51.58,english,,0,0,0,,So let me zoom in, and now I see fewer, but larger boxes on the screen, each of which, again, represents a byte.
Dialogue: 0,1:08:45.74,1:08:51.58,chinese,,0,0,0,,因此，让我放大，现在我看到屏幕上的方框更少但更大，每个方框同样代表一个字节。
Dialogue: 0,1:08:51.58,1:08:55.13,english,,0,0,0,,And now let me propose that we play with some actual code.
Dialogue: 0,1:08:51.58,1:08:55.13,chinese,,0,0,0,,现在，让我提议我们来玩一些实际的代码。
Dialogue: 0,1:08:55.13,1:09:01.06,english,,0,0,0,,So here in C, albeit without a full program, are three ints-- score1, score2, score3.
Dialogue: 0,1:08:55.13,1:09:01.06,chinese,,0,0,0,,因此，在 C 语言中，尽管没有完整的程序，却有三个 ints：score1、score2、score3。
Dialogue: 0,1:09:01.06,1:09:09.04,english,,0,0,0,,I have, coincidentally, given myself two scores around 72 and 73, and then a pretty low score at 33.
Dialogue: 0,1:09:01.06,1:09:09.04,chinese,,0,0,0,,巧合的是，我给自己打出了 72 分和 73 分左右的两个分数，然后又打出了 33 分这个相当低的分数。
Dialogue: 0,1:09:09.04,1:09:12.04,english,,0,0,0,,Of course, last week or two weeks ago, this would have been high.
Dialogue: 0,1:09:09.04,1:09:12.04,chinese,,0,0,0,,当然，在上周或两周前，这个数字还会很高。
Dialogue: 0,1:09:12.04,1:09:13.84,english,,0,0,0,,But now we're dealing with actual integers.
Dialogue: 0,1:09:12.04,1:09:13.84,chinese,,0,0,0,,但现在我们面对的是实际的整数。
Dialogue: 0,1:09:13.84,1:09:17.75,english,,0,0,0,,So these are three so-so scores on my quizzes or tests or the like.
Dialogue: 0,1:09:13.84,1:09:17.75,chinese,,0,0,0,,因此，这是我在测验或考试中的三个一般分数。
Dialogue: 0,1:09:17.75,1:09:19.25,english,,0,0,0,,So let me go to VS Code here.
Dialogue: 0,1:09:17.75,1:09:19.25,chinese,,0,0,0,,所以，让我来看看 VS 代码。
Dialogue: 0,1:09:19.25,1:09:22.21,english,,0,0,0,,And let's make a program called scores.c.
Dialogue: 0,1:09:19.25,1:09:22.21,chinese,,0,0,0,,让我们制作一个名为 scores.c 的程序。
Dialogue: 0,1:09:22.21,1:09:24.39,english,,0,0,0,,So I'm going to write, code scores.c.
Dialogue: 0,1:09:22.21,1:09:24.39,chinese,,0,0,0,,因此，我要编写代码 scores.c。
Dialogue: 0,1:09:24.39,1:09:26.14,english,,0,0,0,,That's going to give me my new file.
Dialogue: 0,1:09:24.39,1:09:26.14,chinese,,0,0,0,,这将为我提供新文件。
Dialogue: 0,1:09:26.14,1:09:28.42,english,,0,0,0,,And let me go ahead and implement something like this.
Dialogue: 0,1:09:26.14,1:09:28.42,chinese,,0,0,0,,让我来实现这样的功能。
Dialogue: 0,1:09:28.42,1:09:37.68,english,,0,0,0,,Include stdio.h, int main(void), and then inside of here, let me do int score1 will be 72.
Dialogue: 0,1:09:28.42,1:09:37.68,chinese,,0,0,0,,包括 stdio.h，int main(void)，然后在这里，让我做 int score1 将是 72。
Dialogue: 0,1:09:37.68,1:09:40.02,english,,0,0,0,,Int score2 will be 73.
Dialogue: 0,1:09:37.68,1:09:40.02,chinese,,0,0,0,,Int score2 将为 73。
Dialogue: 0,1:09:40.02,1:09:43.14,english,,0,0,0,,And int score3 will be 33.
Dialogue: 0,1:09:40.02,1:09:43.14,chinese,,0,0,0,,int score3 将是 33。
Dialogue: 0,1:09:43.14,1:09:48.04,english,,0,0,0,,And then let me just do something like write a program to average my three test scores together, something like that.
Dialogue: 0,1:09:43.14,1:09:48.04,chinese,,0,0,0,,然后让我做一些事情，比如写一个程序，把我的三次考试成绩平均起来，诸如此类。
Dialogue: 0,1:09:48.04,1:09:56.47,english,,0,0,0,,So let me do printf, quote unquote, my average is-- and I'm going to go ahead and do, say, %i, /n.
Dialogue: 0,1:09:48.04,1:09:56.47,chinese,,0,0,0,,所以，让我来打印一下，引号后加引号，我的平均值是-- 我要继续打印，比如说，%i, /n。
Dialogue: 0,1:09:56.47,1:09:58.29,english,,0,0,0,,And now, let me plug in the results.
Dialogue: 0,1:09:56.47,1:09:58.29,chinese,,0,0,0,,现在，让我输入结果。
Dialogue: 0,1:09:58.29,1:10:00.04,english,,0,0,0,,And this is kind of grade school math now.
Dialogue: 0,1:09:58.29,1:10:00.04,chinese,,0,0,0,,这已经是小学数学了。
Dialogue: 0,1:10:00.04,1:10:02.21,english,,0,0,0,,How do I compute the average of three values?
Dialogue: 0,1:10:00.04,1:10:02.21,chinese,,0,0,0,,如何计算三个值的平均值？
Dialogue: 0,1:10:02.21,1:10:14.45,english,,0,0,0,,Well, just like on paper, I can do score1 plus score2 plus score3 in parentheses, because of order of operations, divided by 3, since there's three total scores.
Dialogue: 0,1:10:02.21,1:10:14.45,chinese,,0,0,0,,嗯，就像在纸上一样，我可以用 score1 加上 score2 再加上括号里的 score3，因为运算顺序是除以 3，因为一共有三个分数。
Dialogue: 0,1:10:14.45,1:10:16.04,english,,0,0,0,,All right, so I think this checks out.
Dialogue: 0,1:10:14.45,1:10:16.04,chinese,,0,0,0,,好吧，我想这是正确的。
Dialogue: 0,1:10:16.04,1:10:23.18,english,,0,0,0,,And indeed, you can use parentheses and operators like plus in your code like this in C. Let me go ahead now and do make scores.
Dialogue: 0,1:10:16.04,1:10:23.18,chinese,,0,0,0,,事实上，您可以在 C 语言代码中使用括号和加号等运算符。
Dialogue: 0,1:10:23.18,1:10:24.32,english,,0,0,0,,No syntax error.
Dialogue: 0,1:10:23.18,1:10:24.32,chinese,,0,0,0,,无语法错误。
Dialogue: 0,1:10:24.32,1:10:25.91,english,,0,0,0,,So that's good, nothing missing there.
Dialogue: 0,1:10:24.32,1:10:25.91,chinese,,0,0,0,,这样很好，没有什么遗漏。
Dialogue: 0,1:10:25.91,1:10:28.85,english,,0,0,0,,And now let me do ./scores and see what my test average is.
Dialogue: 0,1:10:25.91,1:10:28.85,chinese,,0,0,0,,现在让我输入 ./scores 查看我的平均测试成绩。
Dialogue: 0,1:10:28.85,1:10:32.27,english,,0,0,0,,All right, it's not great, but I think I still passed.
Dialogue: 0,1:10:28.85,1:10:32.27,chinese,,0,0,0,,好吧，虽然不是很好，但我想我还是通过了。
Dialogue: 0,1:10:32.27,1:10:36.05,english,,0,0,0,,And indeed, my average here is 59.
Dialogue: 0,1:10:32.27,1:10:36.05,chinese,,0,0,0,,事实上，我在这里的平均成绩是 59 分。
Dialogue: 0,1:10:36.05,1:10:38.36,english,,0,0,0,,Is it precisely 59 though?
Dialogue: 0,1:10:36.05,1:10:38.36,chinese,,0,0,0,,是否正好是 59？
Dialogue: 0,1:10:38.36,1:10:39.14,english,,0,0,0,,Well, let's see.
Dialogue: 0,1:10:38.36,1:10:39.14,chinese,,0,0,0,,让我想想
Dialogue: 0,1:10:39.14,1:10:44.87,english,,0,0,0,,Let's actually, instead of using an int, how about we go ahead and use something like a floating point value here?
Dialogue: 0,1:10:39.14,1:10:44.87,chinese,,0,0,0,,实际上，与其使用 int 值，不如使用浮点值。
Dialogue: 0,1:10:44.87,1:10:46.25,english,,0,0,0,,And let me go ahead and do this.
Dialogue: 0,1:10:44.87,1:10:46.25,chinese,,0,0,0,,让我来做这件事。
Dialogue: 0,1:10:46.25,1:10:48.71,english,,0,0,0,,So let me recompile my code, make scores.
Dialogue: 0,1:10:46.25,1:10:48.71,chinese,,0,0,0,,因此，让我重新编译代码，进行评分。
Dialogue: 0,1:10:48.71,1:10:50.60,english,,0,0,0,,Huh, all right, I've got an issue.
Dialogue: 0,1:10:48.71,1:10:50.60,chinese,,0,0,0,,好吧，我有个问题。
Dialogue: 0,1:10:50.60,1:10:52.34,english,,0,0,0,,Let me zoom in on my terminal window.
Dialogue: 0,1:10:50.60,1:10:52.34,chinese,,0,0,0,,让我放大终端窗口。
Dialogue: 0,1:10:52.34,1:10:54.71,english,,0,0,0,,We've not seen this one, necessarily, before.
Dialogue: 0,1:10:52.34,1:10:54.71,chinese,,0,0,0,,我们以前不一定见过这种情况。
Dialogue: 0,1:10:54.71,1:10:56.51,english,,0,0,0,,But error on line 9.
Dialogue: 0,1:10:54.71,1:10:56.51,chinese,,0,0,0,,但第 9 行出现错误。
Dialogue: 0,1:10:56.51,1:11:02.18,english,,0,0,0,,Format specifies type double, which is a lot of precision, but the argument has type int.
Dialogue: 0,1:10:56.51,1:11:02.18,chinese,,0,0,0,,格式指定的类型是 double，精度很高，但参数的类型是 int。
Dialogue: 0,1:11:02.18,1:11:03.30,english,,0,0,0,,So what does this mean?
Dialogue: 0,1:11:02.18,1:11:03.30,chinese,,0,0,0,,这意味着什么？
Dialogue: 0,1:11:03.30,1:11:09.06,english,,0,0,0,,Well, it's showing me with these green squiggles that something's bad between the %f and this thing over here.
Dialogue: 0,1:11:03.30,1:11:09.06,chinese,,0,0,0,,嗯，它用这些绿色的斜线告诉我，%f 和这里的东西之间有问题。
Dialogue: 0,1:11:09.06,1:11:13.02,english,,0,0,0,,Well, on the left, I'm implying a float, or a double for that matter.
Dialogue: 0,1:11:09.06,1:11:13.02,chinese,,0,0,0,,那么，在左边，我的意思是浮点数，或者双倍数。
Dialogue: 0,1:11:13.02,1:11:16.83,english,,0,0,0,,On the right, though, what data type are score1, score2, score3?
Dialogue: 0,1:11:13.02,1:11:16.83,chinese,,0,0,0,,右边的 score1、score2、score3 是什么数据类型？
Dialogue: 0,1:11:16.83,1:11:17.96,english,,0,0,0,,All right, so they're ints.
Dialogue: 0,1:11:16.83,1:11:17.96,chinese,,0,0,0,,好吧，它们是 ints。
Dialogue: 0,1:11:17.96,1:11:19.58,english,,0,0,0,,So clang does not like this.
Dialogue: 0,1:11:17.96,1:11:19.58,chinese,,0,0,0,,所以，铛铛不喜欢这样。
Dialogue: 0,1:11:19.58,1:11:24.17,english,,0,0,0,,The compiler just doesn't like that I'm using ints on the right, but I want floats on the left.
Dialogue: 0,1:11:19.58,1:11:24.17,chinese,,0,0,0,,编译器只是不喜欢我在右边使用 ints，但我想在左边使用浮点数。
Dialogue: 0,1:11:24.17,1:11:26.67,english,,0,0,0,,So there's going to be different ways of solving this.
Dialogue: 0,1:11:24.17,1:11:26.67,chinese,,0,0,0,,因此，会有不同的解决方法。
Dialogue: 0,1:11:26.67,1:11:32.45,english,,0,0,0,,One way would be to just ignore the problem like I originally did, and just go back to %i.
Dialogue: 0,1:11:26.67,1:11:32.45,chinese,,0,0,0,,一种方法是像我最初做的那样忽略问题，回到 %i。
Dialogue: 0,1:11:32.45,1:11:38.33,english,,0,0,0,,Or as an aside, %d is often an alternative to %i for a decimal number.
Dialogue: 0,1:11:32.45,1:11:38.33,chinese,,0,0,0,,另外，对于十进制数字，%d 通常可以替代 %i。
Dialogue: 0,1:11:38.33,1:11:42.35,english,,0,0,0,,But we use %i because it sounds like int, so %i is fine here too.
Dialogue: 0,1:11:38.33,1:11:42.35,chinese,,0,0,0,,但我们使用 %i 是因为它听起来像 int，所以 %i 在这里也可以使用。
Dialogue: 0,1:11:42.35,1:11:44.15,english,,0,0,0,,But I don't want to just avoid the problem.
Dialogue: 0,1:11:42.35,1:11:44.15,chinese,,0,0,0,,但我不想回避问题。
Dialogue: 0,1:11:44.15,1:11:46.50,english,,0,0,0,,I want to actually display a floating point value.
Dialogue: 0,1:11:44.15,1:11:46.50,chinese,,0,0,0,,我想实际显示一个浮点数值。
Dialogue: 0,1:11:46.50,1:11:47.73,english,,0,0,0,,So how can I fix this?
Dialogue: 0,1:11:46.50,1:11:47.73,chinese,,0,0,0,,那么，我该如何解决这个问题呢？
Dialogue: 0,1:11:47.73,1:11:50.27,english,,0,0,0,,Well, it turns out, I can solve this in a few different ways.
Dialogue: 0,1:11:47.73,1:11:50.27,chinese,,0,0,0,,事实证明，我可以用几种不同的方法来解决这个问题。
Dialogue: 0,1:11:50.27,1:11:59.33,english,,0,0,0,,The simplest is just to make sure that at least one number on the right is a floating point value, like 3.0 instead of just 3.
Dialogue: 0,1:11:50.27,1:11:59.33,chinese,,0,0,0,,最简单的方法是确保右边至少有一个数字是浮点数，比如 3.0 而不是 3。
Dialogue: 0,1:11:59.33,1:12:01.70,english,,0,0,0,,Now I think clang will be happier.
Dialogue: 0,1:11:59.33,1:12:01.70,chinese,,0,0,0,,现在我觉得铛铛会更开心。
Dialogue: 0,1:12:01.70,1:12:03.32,english,,0,0,0,,Let me do make scores--
Dialogue: 0,1:12:01.70,1:12:03.32,chinese,,0,0,0,,让我来打分
Dialogue: 0,1:12:03.32,1:12:04.40,english,,0,0,0,,Enter.
Dialogue: 0,1:12:04.40,1:12:05.33,english,,0,0,0,,And indeed, it's OK.
Dialogue: 0,1:12:04.40,1:12:05.33,chinese,,0,0,0,,事实上，这也没问题。
Dialogue: 0,1:12:05.33,1:12:05.93,english,,0,0,0,,Why?
Dialogue: 0,1:12:05.93,1:12:14.33,english,,0,0,0,,As soon as you have at least one more precise data type on the right, it just treats everything, at that point, as floating point value so that the math works out.
Dialogue: 0,1:12:05.93,1:12:14.33,chinese,,0,0,0,,只要右侧有至少一种更精确的数据类型，它就会将所有数据都视为浮点数，这样数学运算就能顺利进行。
Dialogue: 0,1:12:14.33,1:12:17.72,english,,0,0,0,,So ./scores, Enter-- and now, there we go, right?
Dialogue: 0,1:12:14.33,1:12:17.72,chinese,,0,0,0,,所以./scores，回车，现在，我们走了，对吗？
Dialogue: 0,1:12:17.72,1:12:20.39,english,,0,0,0,,Some of us might really want that 1/3 of a point.
Dialogue: 0,1:12:17.72,1:12:20.39,chinese,,0,0,0,,我们中的一些人可能真的想要那 1/3 分。
Dialogue: 0,1:12:20.39,1:12:21.98,english,,0,0,0,,Our average was not 59.
Dialogue: 0,1:12:20.39,1:12:21.98,chinese,,0,0,0,,我们的平均数不是 59。
Dialogue: 0,1:12:21.98,1:12:25.01,english,,0,0,0,,It's 59 1/3, as in this case here.
Dialogue: 0,1:12:21.98,1:12:25.01,chinese,,0,0,0,,是 59 1/3，就像这里的情况一样。
Dialogue: 0,1:12:25.01,1:12:26.75,english,,0,0,0,,All right, so we've solved that there.
Dialogue: 0,1:12:25.01,1:12:26.75,chinese,,0,0,0,,好了，我们已经解决了这个问题。
Dialogue: 0,1:12:26.75,1:12:30.89,english,,0,0,0,,As an aside, though, there's one other technique to show here.
Dialogue: 0,1:12:26.75,1:12:30.89,chinese,,0,0,0,,不过，这里还有一个技巧需要展示。
Dialogue: 0,1:12:30.89,1:12:38.76,english,,0,0,0,,If you didn't want to change it to 3.0 because that's a little weird, because there were literally three scores, it's not like that needs to have a decimal point,
Dialogue: 0,1:12:30.89,1:12:38.76,chinese,,0,0,0,,如果你不想把它改成 3.0，因为那有点奇怪，因为从字面上看有三个分数，这不像是需要有一个小数点、
Dialogue: 0,1:12:38.76,1:12:46.23,english,,0,0,0,,you could also explicitly convert the 3 to a float by saying, in parentheses, float.
Dialogue: 0,1:12:38.76,1:12:46.23,chinese,,0,0,0,,您也可以明确地将 3 转换为浮点数，方法是在括号中说明 float。
Dialogue: 0,1:12:46.23,1:12:48.05,english,,0,0,0,,This is what's called typecasting.
Dialogue: 0,1:12:46.23,1:12:48.05,chinese,,0,0,0,,这就是所谓的类型化。
Dialogue: 0,1:12:48.05,1:12:52.56,english,,0,0,0,,And this will just convert the thing right after it to that data type, if it's possible.
Dialogue: 0,1:12:48.05,1:12:52.56,chinese,,0,0,0,,如果可能的话，这将把它后面的内容转换为该数据类型。
Dialogue: 0,1:12:52.56,1:12:59.96,english,,0,0,0,,So if I do this again, make scores, no errors now. ./scores, and I get, in fact, the same result. There's a bit of a rounding issue here,
Dialogue: 0,1:12:52.56,1:12:59.96,chinese,,0,0,0,,因此，如果我再次这样做，进行评分，现在就不会出错了。./scores，我得到的结果其实是一样的。这里有点四舍五入的问题、
Dialogue: 0,1:12:59.96,1:13:03.65,english,,0,0,0,,but we know the rounding relates to the imprecision from last week.
Dialogue: 0,1:12:59.96,1:13:03.65,chinese,,0,0,0,,但我们知道，四舍五入与上周的不精确有关。
Dialogue: 0,1:13:03.65,1:13:06.98,english,,0,0,0,,For now, let me just be happy with my 59.3 something.
Dialogue: 0,1:13:03.65,1:13:06.98,chinese,,0,0,0,,现在，就让我为我的 59.3 分感到高兴吧。
Dialogue: 0,1:13:06.98,1:13:08.36,english,,0,0,0,,I'll take that for now.
Dialogue: 0,1:13:06.98,1:13:08.36,chinese,,0,0,0,,我现在就要这个。
Dialogue: 0,1:13:08.36,1:13:14.66,english,,0,0,0,,But this is as close to a good enough correct answer for me now.
Dialogue: 0,1:13:08.36,1:13:14.66,chinese,,0,0,0,,但现在对我来说，这已经是一个足够好的正确答案了。
Dialogue: 0,1:13:14.66,1:13:18.65,english,,0,0,0,,But how do I-- think about now, what's going on inside of the computer's memory?
Dialogue: 0,1:13:14.66,1:13:18.65,chinese,,0,0,0,,但我怎么 -- 现在想想 电脑内存里发生了什么？
Dialogue: 0,1:13:18.65,1:13:19.31,english,,0,0,0,,Well, let's consider.
Dialogue: 0,1:13:18.65,1:13:19.31,chinese,,0,0,0,,好吧，让我们考虑一下。
Dialogue: 0,1:13:19.31,1:13:20.64,english,,0,0,0,,Here's that same grid of memory.
Dialogue: 0,1:13:19.31,1:13:20.64,chinese,,0,0,0,,这也是记忆的网格。
Dialogue: 0,1:13:20.64,1:13:22.49,english,,0,0,0,,Each box represents a byte.
Dialogue: 0,1:13:20.64,1:13:22.49,chinese,,0,0,0,,每个方框代表一个字节。
Dialogue: 0,1:13:22.49,1:13:25.79,english,,0,0,0,,Where are score1, score2, and score3 in my memory?
Dialogue: 0,1:13:22.49,1:13:25.79,chinese,,0,0,0,,我记忆中的 score1、score2 和 score3 在哪里？
Dialogue: 0,1:13:25.79,1:13:28.79,english,,0,0,0,,Well, score1, let me just propose, is at the top left.
Dialogue: 0,1:13:25.79,1:13:28.79,chinese,,0,0,0,,好吧，让我来提议，score1 在左上角。
Dialogue: 0,1:13:28.79,1:13:32.06,english,,0,0,0,,But it's taking up four boxes for 4 bytes.
Dialogue: 0,1:13:28.79,1:13:32.06,chinese,,0,0,0,,但它占用了 4 个方框的 4 个字节。
Dialogue: 0,1:13:32.06,1:13:38.18,english,,0,0,0,,Score2 probably ends up right next to it in memory, though, this isn't always going to be the case, but I've chosen simple examples.
Dialogue: 0,1:13:32.06,1:13:38.18,chinese,,0,0,0,,虽然 Score2 在内存中可能会紧靠着它，但情况并不总是这样，我选择了一些简单的例子。
Dialogue: 0,1:13:38.18,1:13:40.91,english,,0,0,0,,73 is next to it, also taking up 4 bytes.
Dialogue: 0,1:13:38.18,1:13:40.91,chinese,,0,0,0,,73 紧挨着它，也占用 4 个字节。
Dialogue: 0,1:13:40.91,1:13:45.32,english,,0,0,0,,And then lastly, 33 is in score3, down there underneath.
Dialogue: 0,1:13:40.91,1:13:45.32,chinese,,0,0,0,,最后，33 在 score3 中，就在下面。
Dialogue: 0,1:13:45.32,1:13:54.11,english,,0,0,0,,Now, if we really look at the computer's memory, look at it with some kind of microscope or the like, there's actually 32 bits, 32 bits, 32 bits
Dialogue: 0,1:13:45.32,1:13:54.11,chinese,,0,0,0,,现在，如果我们真正观察一下计算机的内存，用显微镜之类的东西看一下，实际上有 32 位、32 位、32 位
Dialogue: 0,1:13:54.11,1:13:59.30,english,,0,0,0,,in each of those four groups of four bytes representing those values.
Dialogue: 0,1:13:54.11,1:13:59.30,chinese,,0,0,0,,这四组字节中的每一组都代表这些值。
Dialogue: 0,1:13:59.30,1:14:03.30,english,,0,0,0,,But again, for today's purposes onwards, we don't really need to think again and again in binary.
Dialogue: 0,1:13:59.30,1:14:03.30,chinese,,0,0,0,,但同样，就今天而言，我们并不需要反复思考二进制问题。
Dialogue: 0,1:14:03.30,1:14:05.94,english,,0,0,0,,It's just, indeed, these decimal numbers being stored there.
Dialogue: 0,1:14:03.30,1:14:05.94,chinese,,0,0,0,,实际上，这些十进制数字就存储在这里。
Dialogue: 0,1:14:05.94,1:14:08.24,english,,0,0,0,,But I claim now, this isn't the best design.
Dialogue: 0,1:14:05.94,1:14:08.24,chinese,,0,0,0,,但我现在认为，这不是最好的设计。
Dialogue: 0,1:14:08.24,1:14:16.97,english,,0,0,0,,Even if you have never programmed before CS50, what you're looking at here on the screen, as an excerpt, in what sense is this perhaps bad design, even though it's
Dialogue: 0,1:14:08.24,1:14:16.97,chinese,,0,0,0,,即使你在 CS50 之前从未做过编程，你在屏幕上看到的内容，作为一个摘录，从什么意义上说，这可能是糟糕的设计，即使它是
Dialogue: 0,1:14:16.97,1:14:19.96,english,,0,0,0,,a correct way of storing three test scores?
Dialogue: 0,1:14:16.97,1:14:19.96,chinese,,0,0,0,,存储三个测试分数的正确方法？
Dialogue: 0,1:14:19.96,1:14:20.96,english,,0,0,0,,What's kind of bad here?
Dialogue: 0,1:14:19.96,1:14:20.96,chinese,,0,0,0,,这里有什么不好？
Dialogue: 0,1:14:20.96,1:14:21.88,english,,0,0,0,,Yeah?
Dialogue: 0,1:14:21.88,1:14:26.22,english,,0,0,0,,AUDIENCE: The more scores you have, the more you [INAUDIBLE]..
Dialogue: 0,1:14:21.88,1:14:26.22,chinese,,0,0,0,,分数越多你的分数越多，你[听不清]的分数就越多。
Dialogue: 0,1:14:26.22,1:14:31.74,english,,0,0,0,,DAVID MALAN: Yeah, always do exactly what you did-- extrapolate to 4 scores, 5 scores 50 scores.
Dialogue: 0,1:14:26.22,1:14:31.74,chinese,,0,0,0,,戴维-马兰：是的，总是像你做的那样--推断出 4 分、5 分、50 分。
Dialogue: 0,1:14:31.74,1:14:36.30,english,,0,0,0,,This can't be that well-designed because now you're going to have 4 lines of code, 5 lines of code,
Dialogue: 0,1:14:31.74,1:14:36.30,chinese,,0,0,0,,这不可能是精心设计的，因为现在你将有 4 行代码、5 行代码、
Dialogue: 0,1:14:36.30,1:14:42.43,english,,0,0,0,,50 lines of code that are almost identical, except for this like arbitrary number that we're updating at the end of the variable.
Dialogue: 0,1:14:36.30,1:14:42.43,chinese,,0,0,0,,除了我们在变量末尾更新的这个任意数字，50 行代码几乎完全相同。
Dialogue: 0,1:14:42.43,1:14:48.69,english,,0,0,0,,So indeed, there's probably going to be a better way, even though, at least in C, we haven't yet seen that technique.
Dialogue: 0,1:14:42.43,1:14:48.69,chinese,,0,0,0,,因此，的确可能会有更好的方法，尽管至少在 C 语言中，我们还没有看到这种技术。
Dialogue: 0,1:14:48.69,1:14:52.44,english,,0,0,0,,But the solution, today onward, is going to be something called an array.
Dialogue: 0,1:14:48.69,1:14:52.44,chinese,,0,0,0,,但从今天起，解决方案将是一种叫做数组的东西。
Dialogue: 0,1:14:52.44,1:15:03.96,english,,0,0,0,,An array is a way of storing your data back to back to back in the computer's memory in such a way that you can access each individual member easily.
Dialogue: 0,1:14:52.44,1:15:03.96,chinese,,0,0,0,,数组是将数据背靠背存储在计算机内存中的一种方式，这样可以方便地访问每个成员。
Dialogue: 0,1:15:03.96,1:15:08.53,english,,0,0,0,,Put another way, with an array, you can instead do something like this.
Dialogue: 0,1:15:03.96,1:15:08.53,chinese,,0,0,0,,换一种说法，使用数组时，您可以这样做。
Dialogue: 0,1:15:08.53,1:15:20.70,english,,0,0,0,,Instead of saying int score1, int score2, int score3, giving each a value, you can first tell the computer, please give me a variable called scores-- plural, though you can call it anything you want--
Dialogue: 0,1:15:08.53,1:15:20.70,chinese,,0,0,0,,与其说 int score1、int score2、int score3，给每个变量赋值，你可以先告诉计算机，请给我一个叫 scores 的变量，虽然它是复数，但你可以随便叫它什么。
Dialogue: 0,1:15:20.70,1:15:24.09,english,,0,0,0,,of size three, each of which will be an integer.
Dialogue: 0,1:15:20.70,1:15:24.09,chinese,,0,0,0,,的大小为 3，其中每个都是整数。
Dialogue: 0,1:15:24.09,1:15:30.93,english,,0,0,0,,That is to say, this is how you declare an array in C that will have enough room to store three integers.
Dialogue: 0,1:15:24.09,1:15:30.93,chinese,,0,0,0,,也就是说，在 C 语言中可以这样声明一个数组，它有足够的空间来存储三个整数。
Dialogue: 0,1:15:30.93,1:15:38.88,english,,0,0,0,,Put another way, this is the technical way of telling the computer, please give me 12 bytes in total--
Dialogue: 0,1:15:30.93,1:15:38.88,chinese,,0,0,0,,换句话说，这就是用技术手段告诉计算机，请总共给我 12 个字节--------------。
Dialogue: 0,1:15:38.88,1:15:42.66,english,,0,0,0,,3 times 4 each for an int, so give me 12 bytes in total.
Dialogue: 0,1:15:38.88,1:15:42.66,chinese,,0,0,0,,一个 int 3 乘以 4，总共是 12 个字节。
Dialogue: 0,1:15:42.66,1:15:47.35,english,,0,0,0,,And what the computer will do is guarantee that they're back to back to back in the computer's memory.
Dialogue: 0,1:15:42.66,1:15:47.35,chinese,,0,0,0,,计算机会保证它们在计算机内存中背靠背。
Dialogue: 0,1:15:47.35,1:15:49.36,english,,0,0,0,,And that'll be useful in just a moment.
Dialogue: 0,1:15:47.35,1:15:49.36,chinese,,0,0,0,,一会儿就会派上用场。
Dialogue: 0,1:15:49.36,1:15:51.82,english,,0,0,0,,So let me go ahead and do something useful with this.
Dialogue: 0,1:15:49.36,1:15:51.82,chinese,,0,0,0,,所以，让我继续用它做些有用的事情吧。
Dialogue: 0,1:15:51.82,1:15:53.64,english,,0,0,0,,Let me store three actual scores.
Dialogue: 0,1:15:51.82,1:15:53.64,chinese,,0,0,0,,让我来存储三个实际分数。
Dialogue: 0,1:15:53.64,1:15:58.50,english,,0,0,0,,Here's how I could now store those same numeric scores in this array.
Dialogue: 0,1:15:53.64,1:15:58.50,chinese,,0,0,0,,现在，我可以在这个数组中存储同样的数字分数。
Dialogue: 0,1:15:58.50,1:16:03.04,english,,0,0,0,,Syntax is a little different, but there's one variable called scores.
Dialogue: 0,1:15:58.50,1:16:03.04,chinese,,0,0,0,,语法略有不同，但有一个变量叫 scores。
Dialogue: 0,1:16:03.04,1:16:14.28,english,,0,0,0,,But if you want to go to its first location, starting today, you use square brackets and go to location 0 first, which because things in C are 0 indexed, so to speak, you start counting at 0.
Dialogue: 0,1:16:03.04,1:16:14.28,chinese,,0,0,0,,但是，如果你想从今天开始转到它的第一个位置，你可以使用方括号，先转到位置 0，因为 C 中的东西都是 0 索引的，可以这么说，你从 0 开始计数。
Dialogue: 0,1:16:14.28,1:16:16.41,english,,0,0,0,,The first int is at [0].
Dialogue: 0,1:16:14.28,1:16:16.41,chinese,,0,0,0,,第一个 int 位于 [0]。
Dialogue: 0,1:16:16.41,1:16:18.03,english,,0,0,0,,Second int is at [1].
Dialogue: 0,1:16:16.41,1:16:18.03,chinese,,0,0,0,,第二个 int 位于 [1]。
Dialogue: 0,1:16:18.03,1:16:19.53,english,,0,0,0,,Third int is at [2].
Dialogue: 0,1:16:18.03,1:16:19.53,chinese,,0,0,0,,第三个 int 位于 [2]。
Dialogue: 0,1:16:19.53,1:16:20.73,english,,0,0,0,,So it's not one, two, three.
Dialogue: 0,1:16:19.53,1:16:20.73,chinese,,0,0,0,,所以不是一、二、三。
Dialogue: 0,1:16:20.73,1:16:22.09,english,,0,0,0,,It's literally 0, 1, 2.
Dialogue: 0,1:16:20.73,1:16:22.09,chinese,,0,0,0,,简直就是 0、1、2。
Dialogue: 0,1:16:22.09,1:16:24.09,english,,0,0,0,,And this is not something you have control over.
Dialogue: 0,1:16:22.09,1:16:24.09,chinese,,0,0,0,,这不是你能控制的。
Dialogue: 0,1:16:24.09,1:16:26.25,english,,0,0,0,,You must start at 0.
Dialogue: 0,1:16:24.09,1:16:26.25,chinese,,0,0,0,,必须从 0 开始。
Dialogue: 0,1:16:26.25,1:16:33.51,english,,0,0,0,,So these lines now create an array of size three, and then insert one, two, three values into that array.
Dialogue: 0,1:16:26.25,1:16:33.51,chinese,,0,0,0,,因此，现在这些行创建了一个大小为 3 的数组，然后向数组中插入 1、2、3 个值。
Dialogue: 0,1:16:33.51,1:16:37.77,english,,0,0,0,,But the upside now is that you only have one name of the variable to remember.
Dialogue: 0,1:16:33.51,1:16:37.77,chinese,,0,0,0,,但这样做的好处是，你只需记住一个变量名。
Dialogue: 0,1:16:37.77,1:16:39.24,english,,0,0,0,,It's just called scores.
Dialogue: 0,1:16:37.77,1:16:39.24,chinese,,0,0,0,,这就是所谓的分数。
Dialogue: 0,1:16:39.24,1:16:43.38,english,,0,0,0,,Yes, you need to go into the array to get individual values.
Dialogue: 0,1:16:39.24,1:16:43.38,chinese,,0,0,0,,是的，您需要进入数组获取单个值。
Dialogue: 0,1:16:43.38,1:16:46.61,english,,0,0,0,,You need to index into it using those square brackets.
Dialogue: 0,1:16:43.38,1:16:46.61,chinese,,0,0,0,,您需要使用方括号将索引输入其中。
Dialogue: 0,1:16:46.61,1:16:53.05,english,,0,0,0,,But at least you don't have this hackish approach of declaring a separate variable for each and every one of these values.
Dialogue: 0,1:16:46.61,1:16:53.05,chinese,,0,0,0,,但至少你不用为每一个值都声明一个单独的变量，而采用这种黑客式的方法。
Dialogue: 0,1:16:53.05,1:16:56.07,english,,0,0,0,,So let me go back to scores.c here.
Dialogue: 0,1:16:53.05,1:16:56.07,chinese,,0,0,0,,所以，让我回到 scores.c 这里。
Dialogue: 0,1:16:56.07,1:16:57.58,english,,0,0,0,,And let me propose that I do this.
Dialogue: 0,1:16:56.07,1:16:57.58,chinese,,0,0,0,,请允许我提议这样做。
Dialogue: 0,1:16:57.58,1:17:00.58,english,,0,0,0,,Let me just use that same idea to do the following.
Dialogue: 0,1:16:57.58,1:17:00.58,chinese,,0,0,0,,让我用同样的想法来做下面的事情。
Dialogue: 0,1:17:00.58,1:17:02.58,english,,0,0,0,,Let me get rid of these three separate integers.
Dialogue: 0,1:17:00.58,1:17:02.58,chinese,,0,0,0,,让我把这三个独立的整数去掉。
Dialogue: 0,1:17:02.58,1:17:06.21,english,,0,0,0,,Let me give myself an int scores array of size 3.
Dialogue: 0,1:17:02.58,1:17:06.21,chinese,,0,0,0,,让我给自己一个大小为 3 的 int scores 数组。
Dialogue: 0,1:17:06.21,1:17:10.47,english,,0,0,0,,And then scores[0] will, as before, be 72.
Dialogue: 0,1:17:06.21,1:17:10.47,chinese,,0,0,0,,这样，score[0] 就会像以前一样，变成 72。
Dialogue: 0,1:17:10.47,1:17:14.07,english,,0,0,0,,Scores[1] will be 73.
Dialogue: 0,1:17:10.47,1:17:14.07,chinese,,0,0,0,,分数[1] 将为 73。
Dialogue: 0,1:17:14.07,1:17:16.83,english,,0,0,0,,And scores[2] will be 33.
Dialogue: 0,1:17:14.07,1:17:16.83,chinese,,0,0,0,,分数[2] 将为 33。
Dialogue: 0,1:17:16.83,1:17:18.78,english,,0,0,0,,And let me get rid of the little dot there.
Dialogue: 0,1:17:16.83,1:17:18.78,chinese,,0,0,0,,让我把那里的小点去掉。
Dialogue: 0,1:17:18.78,1:17:23.49,english,,0,0,0,,All right, so now, if I go ahead and run this again with make scores--
Dialogue: 0,1:17:18.78,1:17:23.49,chinese,,0,0,0,,好了，现在，如果我再运行一次，让分数 --
Dialogue: 0,1:17:23.49,1:17:24.64,english,,0,0,0,,Enter.
Dialogue: 0,1:17:24.64,1:17:29.06,english,,0,0,0,,Huh, what did I do wrong here?
Dialogue: 0,1:17:24.64,1:17:29.06,chinese,,0,0,0,,我做错了什么？
Dialogue: 0,1:17:29.06,1:17:31.68,english,,0,0,0,,I think I got a little too ahead of myself.
Dialogue: 0,1:17:29.06,1:17:31.68,chinese,,0,0,0,,我想我有点太自以为是了。
Dialogue: 0,1:17:31.68,1:17:36.10,english,,0,0,0,,Let me increase my terminal window.
Dialogue: 0,1:17:31.68,1:17:36.10,chinese,,0,0,0,,让我增加终端窗口。
Dialogue: 0,1:17:36.10,1:17:38.83,english,,0,0,0,,Let's focus on line 10 here, first.
Dialogue: 0,1:17:36.10,1:17:38.83,chinese,,0,0,0,,我们先来看看第 10 行。
Dialogue: 0,1:17:38.83,1:17:42.31,english,,0,0,0,,Error, use of undeclared identifier, score1.
Dialogue: 0,1:17:38.83,1:17:42.31,chinese,,0,0,0,,错误，使用了未声明的标识符，score1。
Dialogue: 0,1:17:42.31,1:17:44.17,english,,0,0,0,,What did I do here that was dumb?
Dialogue: 0,1:17:42.31,1:17:44.17,chinese,,0,0,0,,我做了什么蠢事？
Dialogue: 0,1:17:44.17,1:17:45.43,english,,0,0,0,,Yeah?
Dialogue: 0,1:17:45.43,1:17:47.44,english,,0,0,0,,AUDIENCE: You didn't declare it a variable.
Dialogue: 0,1:17:45.43,1:17:47.44,chinese,,0,0,0,,你没有把它声明为变量You didn't declare it a variable.
Dialogue: 0,1:17:47.44,1:17:49.42,english,,0,0,0,,DAVID MALAN: Right, so I didn't declare score1.
Dialogue: 0,1:17:47.44,1:17:49.42,chinese,,0,0,0,,戴维-马兰：对，所以我没有宣布得分 1。
Dialogue: 0,1:17:49.42,1:17:50.53,english,,0,0,0,,I've got old code.
Dialogue: 0,1:17:49.42,1:17:50.53,chinese,,0,0,0,,我有旧代码。
Dialogue: 0,1:17:50.53,1:17:53.79,english,,0,0,0,,So I just kind of, honestly, got ahead of myself here, not even intentionally.
Dialogue: 0,1:17:50.53,1:17:53.79,chinese,,0,0,0,,所以，老实说，我只是有点超前了，甚至不是故意的。
Dialogue: 0,1:17:53.79,1:17:56.09,english,,0,0,0,,So let me go ahead and shrink my terminal window again.
Dialogue: 0,1:17:53.79,1:17:56.09,chinese,,0,0,0,,让我再缩小一下终端窗口。
Dialogue: 0,1:17:56.09,1:17:57.74,english,,0,0,0,,I need to finish my thought here.
Dialogue: 0,1:17:56.09,1:17:57.74,chinese,,0,0,0,,我需要在这里结束我的想法。
Dialogue: 0,1:17:57.74,1:17:58.96,english,,0,0,0,,So let me clear my terminal.
Dialogue: 0,1:17:57.74,1:17:58.96,chinese,,0,0,0,,所以，请允许我清理一下我的终端。
Dialogue: 0,1:17:58.96,1:18:05.61,english,,0,0,0,,And let me change this now to be scores[0] plus scores[1] plus scores[2].
Dialogue: 0,1:17:58.96,1:18:05.61,chinese,,0,0,0,,现在让我将其改为 scores[0] 加 scores[1] 加 scores[2]。
Dialogue: 0,1:18:05.61,1:18:10.04,english,,0,0,0,,So it's a little more verbose because I've got these square brackets, so to speak.
Dialogue: 0,1:18:05.61,1:18:10.04,chinese,,0,0,0,,这样就比较啰嗦了，因为我有这些方括号，可以这么说。
Dialogue: 0,1:18:10.04,1:18:12.22,english,,0,0,0,,But I think now my code is consistent.
Dialogue: 0,1:18:10.04,1:18:12.22,chinese,,0,0,0,,但我认为现在我的代码是一致的。
Dialogue: 0,1:18:12.22,1:18:13.87,english,,0,0,0,,So let me make scores now.
Dialogue: 0,1:18:12.22,1:18:13.87,chinese,,0,0,0,,所以，现在让我来记分。
Dialogue: 0,1:18:13.87,1:18:14.95,english,,0,0,0,,It now compiles.
Dialogue: 0,1:18:13.87,1:18:14.95,chinese,,0,0,0,,现在可以编译了。
Dialogue: 0,1:18:14.95,1:18:19.87,english,,0,0,0,,./scores gives me, indeed, the same rough average with those same values.
Dialogue: 0,1:18:14.95,1:18:19.87,chinese,,0,0,0,,./scores 给我的确实是相同数值的大致平均值。
Dialogue: 0,1:18:19.87,1:18:24.28,english,,0,0,0,,All right, so let me go ahead and maybe enhance this a little bit.
Dialogue: 0,1:18:19.87,1:18:24.28,chinese,,0,0,0,,好吧，让我继续说下去，也许能让这个问题更有说服力一些。
Dialogue: 0,1:18:24.28,1:18:31.61,english,,0,0,0,,It's a little silly to have to write a special program just to check your average of three test scores like 72, 73, 33.
Dialogue: 0,1:18:24.28,1:18:31.61,chinese,,0,0,0,,为了检查 72、73、33 等三个考试成绩的平均值而编写一个专门的程序，这有点傻。
Dialogue: 0,1:18:31.61,1:18:37.25,english,,0,0,0,,Why don't I actually make the program dynamic and ask the human for those scores?
Dialogue: 0,1:18:31.61,1:18:37.25,chinese,,0,0,0,,我为什么不把程序变成动态的，然后向人类询问这些分数呢？
Dialogue: 0,1:18:37.25,1:18:39.14,english,,0,0,0,,So instead, let me do this.
Dialogue: 0,1:18:37.25,1:18:39.14,chinese,,0,0,0,,所以，让我这样做吧。
Dialogue: 0,1:18:39.14,1:18:43.48,english,,0,0,0,,How about we get rid of the 72, and change this to getInt.
Dialogue: 0,1:18:39.14,1:18:43.48,chinese,,0,0,0,,不如把 72 去掉，改成 getInt。
Dialogue: 0,1:18:43.48,1:18:46.30,english,,0,0,0,,And I'll just prompt the user for a score.
Dialogue: 0,1:18:43.48,1:18:46.30,chinese,,0,0,0,,我会提示用户打分。
Dialogue: 0,1:18:46.30,1:18:52.51,english,,0,0,0,,Let me get rid of the 73 and get this to be getInt score, quote unquote.
Dialogue: 0,1:18:46.30,1:18:52.51,chinese,,0,0,0,,让我摆脱 73 分的束缚，让它成为 getInt 分数，引号后加引号。
Dialogue: 0,1:18:52.51,1:19:03.68,english,,0,0,0,,And then lastly, get rid of the 33, and replace it with getInt, quote unquote, score. getInt is a CS50 thing for now, so I need to include cs50.h, as always.
Dialogue: 0,1:18:52.51,1:19:03.68,chinese,,0,0,0,,最后，去掉 33，取而代之的是 getInt、quote unquote、score。getInt 目前是 CS50 的东西，所以我需要一如既往地包含 cs50.h。
Dialogue: 0,1:19:03.68,1:19:08.68,english,,0,0,0,,But I think now, it's sort of a better program because now I can compile it once, I can even share it with my friends.
Dialogue: 0,1:19:03.68,1:19:08.68,chinese,,0,0,0,,但我认为现在的程序更好，因为现在我只需编译一次，甚至还可以与朋友分享。
Dialogue: 0,1:19:08.68,1:19:12.49,english,,0,0,0,,And now any of us can average three scores on some classes test.
Dialogue: 0,1:19:08.68,1:19:12.49,chinese,,0,0,0,,而现在，我们中的任何人都可以在某个班级的测试中取得三个分数的平均值。
Dialogue: 0,1:19:12.49,1:19:16.91,english,,0,0,0,,They don't need to know the code or rewrite the code just to type in their scores.
Dialogue: 0,1:19:12.49,1:19:16.91,chinese,,0,0,0,,他们不需要知道代码或重写代码就能输入分数。
Dialogue: 0,1:19:16.91,1:19:19.15,english,,0,0,0,,So make scores worked.
Dialogue: 0,1:19:16.91,1:19:19.15,chinese,,0,0,0,,所以，让分数发挥作用。
Dialogue: 0,1:19:19.15,1:19:26.32,english,,0,0,0,,./scores, now I can type anything I want-- maybe it's a 72, 73, 33, still get the same answer.
Dialogue: 0,1:19:19.15,1:19:26.32,chinese,,0,0,0,,./scores，现在我可以输入任何我想输入的内容--也许是 72、73 或 33，但得到的答案还是一样的。
Dialogue: 0,1:19:26.32,1:19:33.52,english,,0,0,0,,Or maybe I'm having a better semester, 100, 100, maybe 99, and now we get still a pretty high score there.
Dialogue: 0,1:19:26.32,1:19:33.52,chinese,,0,0,0,,或者我这学期的成绩比较好，100、100，也许是 99，现在我们得到的分数还是很高的。
Dialogue: 0,1:19:33.52,1:19:34.60,english,,0,0,0,,But now it's dynamic.
Dialogue: 0,1:19:33.52,1:19:34.60,chinese,,0,0,0,,但现在它是动态的。
Dialogue: 0,1:19:34.60,1:19:36.08,english,,0,0,0,,Now you don't need the source code.
Dialogue: 0,1:19:34.60,1:19:36.08,chinese,,0,0,0,,现在你不需要源代码了。
Dialogue: 0,1:19:36.08,1:19:37.74,english,,0,0,0,,You don't need to recompile the program.
Dialogue: 0,1:19:36.08,1:19:37.74,chinese,,0,0,0,,您无需重新编译程序。
Dialogue: 0,1:19:37.74,1:19:39.67,english,,0,0,0,,It's just going to work again and again.
Dialogue: 0,1:19:37.74,1:19:39.67,chinese,,0,0,0,,就这样一次又一次地成功。
Dialogue: 0,1:19:39.67,1:19:41.09,english,,0,0,0,,But this, too.
Dialogue: 0,1:19:39.67,1:19:41.09,chinese,,0,0,0,,但这个也是。
Dialogue: 0,1:19:41.09,1:19:45.91,english,,0,0,0,,Let me propose that this code is correct if I want to get three scores from the user.
Dialogue: 0,1:19:41.09,1:19:45.91,chinese,,0,0,0,,如果我想从用户那里得到三个分数，那么我建议这段代码是正确的。
Dialogue: 0,1:19:45.91,1:19:53.17,english,,0,0,0,,But these highlighted lines now, 6 through 9, are they well-designed, would you say?
Dialogue: 0,1:19:45.91,1:19:53.17,chinese,,0,0,0,,但现在突出显示的 6 到 9 行，你认为它们设计得好吗？
Dialogue: 0,1:19:53.17,1:19:53.68,english,,0,0,0,,Yeah?
Dialogue: 0,1:19:53.68,1:19:54.89,english,,0,0,0,,AUDIENCE: Can you loop?
Dialogue: 0,1:19:53.68,1:19:54.89,chinese,,0,0,0,,观众：你能循环播放吗？
Dialogue: 0,1:19:54.89,1:19:55.94,english,,0,0,0,,DAVID MALAN: Yeah, right?
Dialogue: 0,1:19:54.89,1:19:55.94,chinese,,0,0,0,,是的，对吗？
Dialogue: 0,1:19:55.94,1:19:58.22,english,,0,0,0,,This is-- we can use a loop, is the spoiler here.
Dialogue: 0,1:19:55.94,1:19:58.22,chinese,,0,0,0,,我们可以使用一个循环，就是这里的破坏者。
Dialogue: 0,1:19:58.22,1:19:58.82,english,,0,0,0,,Why?
Dialogue: 0,1:19:58.82,1:20:01.59,english,,0,0,0,,I mean, my God, it's like the same code again and again and again.
Dialogue: 0,1:19:58.82,1:20:01.59,chinese,,0,0,0,,我的意思是，我的上帝，这就像相同的代码一而再，再而三。
Dialogue: 0,1:20:01.59,1:20:03.46,english,,0,0,0,,The only thing that's changing is the number.
Dialogue: 0,1:20:01.59,1:20:03.46,chinese,,0,0,0,,唯一变化的是数字。
Dialogue: 0,1:20:03.46,1:20:11.81,english,,0,0,0,,And this should have kind of had some code smell again, because if I keep typing the same thing again and again, that's clearly an opportunity to better design something.
Dialogue: 0,1:20:03.46,1:20:11.81,chinese,,0,0,0,,而且这还应该有一些代码的味道，因为如果我反复输入同样的内容，这显然是一个更好设计的机会。
Dialogue: 0,1:20:11.81,1:20:13.65,english,,0,0,0,,So let me do this.
Dialogue: 0,1:20:11.81,1:20:13.65,chinese,,0,0,0,,那就让我来吧。
Dialogue: 0,1:20:13.65,1:20:18.59,english,,0,0,0,,Let me go ahead and still create my array of size three.
Dialogue: 0,1:20:13.65,1:20:18.59,chinese,,0,0,0,,让我继续创建大小为 3 的数组。
Dialogue: 0,1:20:18.59,1:20:26.61,english,,0,0,0,,But let me use our old friend, the for loop, for int i equals 0, i less than 3, i++.
Dialogue: 0,1:20:18.59,1:20:26.61,chinese,,0,0,0,,不过，让我使用我们的老朋友 for 循环，for int i 等于 0，i 小于 3，i++。
Dialogue: 0,1:20:26.61,1:20:32.92,english,,0,0,0,,And then in here, let me do scores bracket-- we haven't seen this before, but any intuition?
Dialogue: 0,1:20:26.61,1:20:32.92,chinese,,0,0,0,,然后，在这里，让我做分数括号 - 我们还没有看到过这一点，但任何直觉？
Dialogue: 0,1:20:32.92,1:20:34.22,english,,0,0,0,,Scores bracket--
Dialogue: 0,1:20:32.92,1:20:34.22,chinese,,0,0,0,,分数
Dialogue: 0,1:20:34.22,1:20:34.72,english,,0,0,0,,AUDIENCE: i.
Dialogue: 0,1:20:34.22,1:20:34.72,chinese,,0,0,0,,听众： i.
Dialogue: 0,1:20:34.72,1:20:40.72,english,,0,0,0,,DAVID MALAN: i, because that will use whatever i is, be it 0 or 1 or 2 in iteration.
Dialogue: 0,1:20:34.72,1:20:40.72,chinese,,0,0,0,,DAVID MALAN：i，因为这将使用任何 i，无论是 0、1 还是 2。
Dialogue: 0,1:20:40.72,1:20:47.00,english,,0,0,0,,And then I can get an int, asking the user for score, without having to repeat myself again and again.
Dialogue: 0,1:20:40.72,1:20:47.00,chinese,,0,0,0,,然后，我就可以得到一个 int，询问用户得分，而不必一再重复。
Dialogue: 0,1:20:47.00,1:20:50.56,english,,0,0,0,,So hopefully, if I didn't make any typos, make scores, all good.
Dialogue: 0,1:20:47.00,1:20:50.56,chinese,,0,0,0,,所以，如果我没打错字，打出分数，希望一切顺利。
Dialogue: 0,1:20:50.56,1:20:54.66,english,,0,0,0,,./scores, 72, 73, 33, and we're back in business.
Dialogue: 0,1:20:50.56,1:20:54.66,chinese,,0,0,0,,./分数，72、73、33，我们又开始工作了。
Dialogue: 0,1:20:54.66,1:21:04.94,english,,0,0,0,,But the code is arguably now better designed, because now, I haven't actually hardcoded the scores, and I haven't actually copied and pasted any of that code.
Dialogue: 0,1:20:54.66,1:21:04.94,chinese,,0,0,0,,但现在的代码可以说设计得更好了，因为现在我没有硬编码分数，也没有复制和粘贴任何代码。
Dialogue: 0,1:21:04.94,1:21:10.51,english,,0,0,0,,Well, if we consider now what's going on inside of the computer's memory, it's pretty much the same in terms of the values.
Dialogue: 0,1:21:04.94,1:21:10.51,chinese,,0,0,0,,那么，如果我们现在考虑一下电脑内存中的情况，就数值而言是差不多的。
Dialogue: 0,1:21:10.51,1:21:17.21,english,,0,0,0,,But instead of the variables being, literally, score1, score2, score3, there's just one variable.
Dialogue: 0,1:21:10.51,1:21:17.21,chinese,,0,0,0,,但变量不是字面上的 score1、score2、score3，而是只有一个变量。
Dialogue: 0,1:21:17.21,1:21:19.03,english,,0,0,0,,It's an array called scores.
Dialogue: 0,1:21:17.21,1:21:19.03,chinese,,0,0,0,,这是一个名为 scores 的数组。
Dialogue: 0,1:21:19.03,1:21:28.81,english,,0,0,0,,But you can index into its three locations by using scores[0] to get the first, scores[1] to get the second, scores[2] to get the third.
Dialogue: 0,1:21:19.03,1:21:28.81,chinese,,0,0,0,,但您可以通过使用 scores[0] 获得第一个位置，使用 scores[1] 获得第二个位置，使用 scores[2] 获得第三个位置，从而索引到这三个位置。
Dialogue: 0,1:21:28.81,1:21:29.99,english,,0,0,0,,But this is key.
Dialogue: 0,1:21:28.81,1:21:29.99,chinese,,0,0,0,,但这是关键。
Dialogue: 0,1:21:29.99,1:21:33.04,english,,0,0,0,,The memory is contiguous.
Dialogue: 0,1:21:29.99,1:21:33.04,chinese,,0,0,0,,内存是连续的。
Dialogue: 0,1:21:33.04,1:21:35.38,english,,0,0,0,,The screen is only so large, so it wraps around.
Dialogue: 0,1:21:33.04,1:21:35.38,chinese,,0,0,0,,屏幕只有这么大，所以它是环绕的。
Dialogue: 0,1:21:35.38,1:21:40.27,english,,0,0,0,,But physically, digitally, the memory is contiguous-- top to bottom, left to right.
Dialogue: 0,1:21:35.38,1:21:40.27,chinese,,0,0,0,,但从物理上和数字上看，内存是连续的，从上到下，从左到右。
Dialogue: 0,1:21:40.27,1:21:41.53,english,,0,0,0,,And that's important, why?
Dialogue: 0,1:21:40.27,1:21:41.53,chinese,,0,0,0,,这很重要，为什么？
Dialogue: 0,1:21:41.53,1:21:48.79,english,,0,0,0,,Because the brackets indicate 0, 1, 2, that each of these integers is just one integer away from the next.
Dialogue: 0,1:21:41.53,1:21:48.79,chinese,,0,0,0,,因为括号中分别表示 0、1、2，所以每一个整数与下一个整数之间只差一个整数。
Dialogue: 0,1:21:48.79,1:21:51.22,english,,0,0,0,,It can't be randomly down here all of a sudden.
Dialogue: 0,1:21:48.79,1:21:51.22,chinese,,0,0,0,,它不可能突然就随机出现在这里。
Dialogue: 0,1:21:51.22,1:21:54.07,english,,0,0,0,,It's got to be back to back to back.
Dialogue: 0,1:21:51.22,1:21:54.07,chinese,,0,0,0,,必须背靠背。
Dialogue: 0,1:21:54.07,1:22:00.71,english,,0,0,0,,All right, now equipped with that paradigm, what more could we actually do here?
Dialogue: 0,1:21:54.07,1:22:00.71,chinese,,0,0,0,,好了，有了这个范例，我们还能做些什么呢？
Dialogue: 0,1:22:00.71,1:22:06.85,english,,0,0,0,,Well, it turns out, it's worth knowing that it's possible in code to even pass arrays around as arguments.
Dialogue: 0,1:22:00.71,1:22:06.85,chinese,,0,0,0,,事实证明，值得了解的是，在代码中甚至可以将数组作为参数传递。
Dialogue: 0,1:22:06.85,1:22:11.32,english,,0,0,0,,And let me just whip this program up somewhat quickly, just so you've seen it before long.
Dialogue: 0,1:22:06.85,1:22:11.32,chinese,,0,0,0,,让我快速地把这个程序调出来，以便你们在很久之前就能看到。
Dialogue: 0,1:22:11.32,1:22:13.19,english,,0,0,0,,But let me go ahead and do this.
Dialogue: 0,1:22:11.32,1:22:13.19,chinese,,0,0,0,,不过，还是让我来吧。
Dialogue: 0,1:22:13.19,1:22:18.13,english,,0,0,0,,Let me propose that I create a function that does this averaging for me.
Dialogue: 0,1:22:13.19,1:22:18.13,chinese,,0,0,0,,我建议创建一个函数，帮我完成这种平均处理。
Dialogue: 0,1:22:18.13,1:22:22.51,english,,0,0,0,,So I'm going to create a function called average that returns a float.
Dialogue: 0,1:22:18.13,1:22:22.51,chinese,,0,0,0,,因此，我要创建一个名为 average 的函数，返回一个浮点数。
Dialogue: 0,1:22:22.51,1:22:28.64,english,,0,0,0,,And the arguments this thing is going to take-- let's see, it's going to be the array.
Dialogue: 0,1:22:22.51,1:22:28.64,chinese,,0,0,0,,而这东西的论据 -- 让我想想，应该是数组。
Dialogue: 0,1:22:28.64,1:22:33.05,english,,0,0,0,,So it turns out, if you want to take in an array of numbers-- you can call it anything you want.
Dialogue: 0,1:22:28.64,1:22:33.05,chinese,,0,0,0,,事实证明，如果你想接收一个数字数组，你可以随意称呼它。
Dialogue: 0,1:22:33.05,1:22:39.79,english,,0,0,0,,This is how you tell C that a function takes, not an integer, but an array of integers.
Dialogue: 0,1:22:33.05,1:22:39.79,chinese,,0,0,0,,这样就可以告诉 C 语言，函数使用的不是整数，而是整数数组。
Dialogue: 0,1:22:39.79,1:22:41.29,english,,0,0,0,,And you don't have to call it array.
Dialogue: 0,1:22:39.79,1:22:41.29,chinese,,0,0,0,,你也不必把它叫做数组。
Dialogue: 0,1:22:41.29,1:22:42.79,english,,0,0,0,,I'm doing that just for the sake of discussion.
Dialogue: 0,1:22:41.29,1:22:42.79,chinese,,0,0,0,,我这样做只是为了讨论。
Dialogue: 0,1:22:42.79,1:22:43.66,english,,0,0,0,,It can be called x.
Dialogue: 0,1:22:42.79,1:22:43.66,chinese,,0,0,0,,它可以被称为 x。
Dialogue: 0,1:22:43.66,1:22:44.49,english,,0,0,0,,It can be numbers.
Dialogue: 0,1:22:43.66,1:22:44.49,chinese,,0,0,0,,可以是数字。
Dialogue: 0,1:22:44.49,1:22:45.49,english,,0,0,0,,It can be anything else.
Dialogue: 0,1:22:44.49,1:22:45.49,chinese,,0,0,0,,它可以是任何其他东西。
Dialogue: 0,1:22:45.49,1:22:49.06,english,,0,0,0,,I'm just calling an array to be super explicit as to what it is there.
Dialogue: 0,1:22:45.49,1:22:49.06,chinese,,0,0,0,,我只是在调用一个数组，以便更明确地知道它是什么。
Dialogue: 0,1:22:49.06,1:22:51.73,english,,0,0,0,,Now, how do I change my code down here?
Dialogue: 0,1:22:49.06,1:22:51.73,chinese,,0,0,0,,现在，我该如何修改下面的代码？
Dialogue: 0,1:22:51.73,1:22:55.13,english,,0,0,0,,What I think I'm going to do for the moment is just this.
Dialogue: 0,1:22:51.73,1:22:55.13,chinese,,0,0,0,,我想我现在要做的就是这样。
Dialogue: 0,1:22:55.13,1:22:59.11,english,,0,0,0,,I'm going to get rid of this code here, where I manually computed the average.
Dialogue: 0,1:22:55.13,1:22:59.11,chinese,,0,0,0,,我要去掉这里的代码，这里是我手动计算平均值的地方。
Dialogue: 0,1:22:59.11,1:23:05.00,english,,0,0,0,,And let me just call the average function here by passing in the whole array of scores.
Dialogue: 0,1:22:59.11,1:23:05.00,chinese,,0,0,0,,让我在这里通过传入整个分数数组来调用平均值函数。
Dialogue: 0,1:23:05.00,1:23:08.89,english,,0,0,0,,So this is just an example of abstraction, like now I have a function called average.
Dialogue: 0,1:23:05.00,1:23:08.89,chinese,,0,0,0,,因此，这只是一个抽象的例子，比如现在我有一个名为平均值的函数。
Dialogue: 0,1:23:08.89,1:23:09.67,english,,0,0,0,,I don't care.
Dialogue: 0,1:23:08.89,1:23:09.67,chinese,,0,0,0,,我不在乎
Dialogue: 0,1:23:09.67,1:23:12.49,english,,0,0,0,,I don't have to remember how it works once I implement it.
Dialogue: 0,1:23:09.67,1:23:12.49,chinese,,0,0,0,,一旦实施，我就不需要记住它是如何工作的。
Dialogue: 0,1:23:12.49,1:23:15.01,english,,0,0,0,,It just kind of tightens up my main code a little bit.
Dialogue: 0,1:23:12.49,1:23:15.01,chinese,,0,0,0,,它只是稍微收紧了我的主代码。
Dialogue: 0,1:23:15.01,1:23:17.03,english,,0,0,0,,But I do still have to implement this.
Dialogue: 0,1:23:15.01,1:23:17.03,chinese,,0,0,0,,不过，我还得落实这一点。
Dialogue: 0,1:23:17.03,1:23:27.01,english,,0,0,0,,So later in my file-- let me repeat myself before, the only time it's OK in C to repeat yourself again and again, by typing out again, average, and then int array open bracket--
Dialogue: 0,1:23:17.03,1:23:27.01,chinese,,0,0,0,,所以，在我的文件后面--让我再重复一遍，在 C 语言中，只有一次是可以反复重复的，那就是再次键入平均值，然后用 int 数组打开括号--
Dialogue: 0,1:23:27.01,1:23:28.58,english,,0,0,0,,but now not a semicolon.
Dialogue: 0,1:23:27.01,1:23:28.58,chinese,,0,0,0,,但现在不是分号。
Dialogue: 0,1:23:28.58,1:23:30.25,english,,0,0,0,,Now I have to implement this thing.
Dialogue: 0,1:23:28.58,1:23:30.25,chinese,,0,0,0,,现在，我必须实施这件事。
Dialogue: 0,1:23:30.25,1:23:37.63,english,,0,0,0,,And I can implement this in a bunch of different ways, but I don't know in advance--
Dialogue: 0,1:23:30.25,1:23:37.63,chinese,,0,0,0,,我可以用很多不同的方法来实现这个目标 但我事先并不知道
Dialogue: 0,1:23:37.63,1:23:39.04,english,,0,0,0,,I can't just do this.
Dialogue: 0,1:23:37.63,1:23:39.04,chinese,,0,0,0,,我不能就这么做
Dialogue: 0,1:23:39.04,1:23:52.13,english,,0,0,0,,I can't just do array[0] plus array[1] plus array[2], unless this program's only ever going to work on three numbers.
Dialogue: 0,1:23:39.04,1:23:52.13,chinese,,0,0,0,,我不能只做 array[0] 加上 array[1] 再加上 array[2]，除非这个程序只能在三个数字上运行。
Dialogue: 0,1:23:52.13,1:23:55.46,english,,0,0,0,,So let me go ahead and do this.
Dialogue: 0,1:23:52.13,1:23:55.46,chinese,,0,0,0,,所以，让我来做这件事吧。
Dialogue: 0,1:23:55.46,1:23:58.57,english,,0,0,0,,Let me first propose that there's a poor design here.
Dialogue: 0,1:23:55.46,1:23:58.57,chinese,,0,0,0,,让我首先提出，这里的设计有问题。
Dialogue: 0,1:23:58.57,1:24:01.93,english,,0,0,0,,In my main function, what value have I repeated twice?
Dialogue: 0,1:23:58.57,1:24:01.93,chinese,,0,0,0,,在我的主函数中，什么值重复了两次？
Dialogue: 0,1:24:05.05,1:24:07.55,english,,0,0,0,,Among the highlighted lines, what jumps out at you as twice?
Dialogue: 0,1:24:05.05,1:24:07.55,chinese,,0,0,0,,在突出显示的句子中，有哪些句子让你印象深刻？
Dialogue: 0,1:24:07.55,1:24:09.02,english,,0,0,0,,AUDIENCE: The length of the array?
Dialogue: 0,1:24:07.55,1:24:09.02,chinese,,0,0,0,,听众：阵列的长度？
Dialogue: 0,1:24:09.02,1:24:11.52,english,,0,0,0,,DAVID MALAN: Yeah, the length of the array, it's just three.
Dialogue: 0,1:24:09.02,1:24:11.52,chinese,,0,0,0,,戴维-马兰：是的，阵列的长度只有三个。
Dialogue: 0,1:24:11.52,1:24:18.44,english,,0,0,0,,Now it's not a huge deal that I typed the number three on line 8 and line 9, but this is exactly the kind of like shortcut that's going to get you in trouble eventually.
Dialogue: 0,1:24:11.52,1:24:18.44,chinese,,0,0,0,,现在看来，我在第 8 行和第 9 行键入数字 3 并不是什么大问题，但这种类似快捷键的做法最终会给你带来麻烦。
Dialogue: 0,1:24:18.44,1:24:18.86,english,,0,0,0,,Why?
Dialogue: 0,1:24:18.86,1:24:26.27,english,,0,0,0,,Because, eventually, you or someone else is going to go in and make the array bigger or smaller, and you're not going to realize that magically, that same number is in two places.
Dialogue: 0,1:24:18.86,1:24:26.27,chinese,,0,0,0,,因为最终，你或其他人会进去把数组变大或变小，而你不会意识到神奇的是，同一个数字被放在了两个地方。
Dialogue: 0,1:24:26.27,1:24:29.27,english,,0,0,0,,And indeed, this is what a programmer would often call a magic number.
Dialogue: 0,1:24:26.27,1:24:29.27,chinese,,0,0,0,,事实上，这就是程序员通常所说的神奇数字。
Dialogue: 0,1:24:29.27,1:24:31.94,english,,0,0,0,,A magic number is one that just kind of appears magically.
Dialogue: 0,1:24:29.27,1:24:31.94,chinese,,0,0,0,,神奇数字是一种神奇出现的数字。
Dialogue: 0,1:24:31.94,1:24:36.68,english,,0,0,0,,And you're on the honor system to change it here, if you change it here, and then you change it over here.
Dialogue: 0,1:24:31.94,1:24:36.68,chinese,,0,0,0,,如果你在这里改了，就在这里改，这是你的荣誉制度。
Dialogue: 0,1:24:36.68,1:24:43.19,english,,0,0,0,,That's not going to end well if the onus is on the programmer to remember where they hardcoded-- that is, wrote out three explicitly.
Dialogue: 0,1:24:36.68,1:24:43.19,chinese,,0,0,0,,如果程序员有责任记住他们硬编码的地方，也就是明确写出了三处，那就不会有好结果。
Dialogue: 0,1:24:43.19,1:24:46.25,english,,0,0,0,,So any time you reuse a value like this, you know what?
Dialogue: 0,1:24:43.19,1:24:46.25,chinese,,0,0,0,,所以，每次重复使用这样的值时，你知道吗？
Dialogue: 0,1:24:46.25,1:24:56.99,english,,0,0,0,,We should probably do what we did last week, which was to declare a variable, perhaps at the very top of my program, so it's super obvious what it is, called, maybe n, and set that equal to 3.
Dialogue: 0,1:24:46.25,1:24:56.99,chinese,,0,0,0,,我们也许应该像上周那样，声明一个变量，也许是在程序的最顶端，这样就能很明显地知道它是什么，叫做 n，然后设置它等于 3。
Dialogue: 0,1:24:56.99,1:25:02.39,english,,0,0,0,,Better yet, what did I do last week to make sure that I can't screw up and accidentally change that value?
Dialogue: 0,1:24:56.99,1:25:02.39,chinese,,0,0,0,,更好的是，我上周做了什么来确保我不会搞砸并意外更改该值？
Dialogue: 0,1:25:02.39,1:25:03.44,english,,0,0,0,,Yeah, constant.
Dialogue: 0,1:25:02.39,1:25:03.44,chinese,,0,0,0,,是的，一直如此。
Dialogue: 0,1:25:03.44,1:25:05.81,english,,0,0,0,,And the keyword there was just const for short.
Dialogue: 0,1:25:03.44,1:25:05.81,chinese,,0,0,0,,关键词是 const，简称 const。
Dialogue: 0,1:25:05.81,1:25:11.87,english,,0,0,0,,And now I have a global variable-- global in the sense that I can access it anywhere-- that is called n.
Dialogue: 0,1:25:05.81,1:25:11.87,chinese,,0,0,0,,现在我有了一个全局变量，全局变量的意思是我可以在任何地方访问它，它的名字叫 n。
Dialogue: 0,1:25:11.87,1:25:12.68,english,,0,0,0,,It's an int.
Dialogue: 0,1:25:11.87,1:25:12.68,chinese,,0,0,0,,这是一个 int.
Dialogue: 0,1:25:12.68,1:25:14.45,english,,0,0,0,,And it's always going to be 3.
Dialogue: 0,1:25:12.68,1:25:14.45,chinese,,0,0,0,,而且永远都是 3。
Dialogue: 0,1:25:14.45,1:25:23.87,english,,0,0,0,,And now I can improve my main function a little bit by just changing the 3's to n, so now if I, if a colleague realized, oh, wait a minute, there's four tests this year.
Dialogue: 0,1:25:14.45,1:25:23.87,chinese,,0,0,0,,现在，我只需将 3 改为 n，就能稍稍改进我的主函数，因此，如果我，如果有同事意识到，哦，等一下，今年有四次测试。
Dialogue: 0,1:25:23.87,1:25:31.19,english,,0,0,0,,You change n to four, recompile the code, and it just works everywhere else, except in my average function.
Dialogue: 0,1:25:23.87,1:25:31.19,chinese,,0,0,0,,将 n 改为 4，重新编译代码后，除了我的平均函数外，其他地方都能正常工作。
Dialogue: 0,1:25:31.19,1:25:33.83,english,,0,0,0,,Let me change it back to 3, just for consistency.
Dialogue: 0,1:25:31.19,1:25:33.83,chinese,,0,0,0,,为了统一起见，我把它改回 3。
Dialogue: 0,1:25:33.83,1:25:43.61,english,,0,0,0,,This is not going to fly now, to just sum up things like this, for instance, and then return this divided by 3.
Dialogue: 0,1:25:33.83,1:25:43.61,chinese,,0,0,0,,现在这样做是行不通的，举例来说，如果只是求和，然后返回除以 3 的结果。
Dialogue: 0,1:25:43.61,1:25:51.13,english,,0,0,0,,Why will this not work now as I've defined it?
Dialogue: 0,1:25:43.61,1:25:51.13,chinese,,0,0,0,,为什么按照我的定义，现在就不行了呢？
Dialogue: 0,1:25:51.13,1:25:52.15,english,,0,0,0,,Yeah?
Dialogue: 0,1:25:52.15,1:25:58.03,english,,0,0,0,,AUDIENCE: [INAUDIBLE]
Dialogue: 0,1:25:58.03,1:26:00.98,english,,0,0,0,,DAVID MALAN: OK, I might be returning an integer value when
Dialogue: 0,1:25:58.03,1:26:00.98,chinese,,0,0,0,,戴维-马兰：好吧，我可能会返回一个整数值，当
Dialogue: 0,1:26:00.98,1:26:02.87,english,,0,0,0,,I intend to return a float per this.
Dialogue: 0,1:26:00.98,1:26:02.87,chinese,,0,0,0,,我打算就此返回一个浮点数。
Dialogue: 0,1:26:02.87,1:26:11.01,english,,0,0,0,,But I think I'm OK because I used that little trick where I made sure that at least one of the numbers in my arithmetic expression is, in fact, a floating point value.
Dialogue: 0,1:26:02.87,1:26:11.01,chinese,,0,0,0,,但我觉得我没问题，因为我使用了那个小技巧，确保算术表达式中至少有一个数字实际上是浮点数值。
Dialogue: 0,1:26:11.01,1:26:15.65,english,,0,0,0,,And just by adding the point 0, make sure that everything gets treated as a float.
Dialogue: 0,1:26:11.01,1:26:15.65,chinese,,0,0,0,,只需添加 0 点，就能确保所有内容都被视为浮点数。
Dialogue: 0,1:26:15.65,1:26:17.86,english,,0,0,0,,So I think that's OK.
Dialogue: 0,1:26:15.65,1:26:17.86,chinese,,0,0,0,,所以，我觉得这没问题。
Dialogue: 0,1:26:17.86,1:26:19.03,english,,0,0,0,,AUDIENCE: [INAUDIBLE]
Dialogue: 0,1:26:19.03,1:26:20.70,english,,0,0,0,,DAVID MALAN: I'm sorry, a little louder.
Dialogue: 0,1:26:19.03,1:26:20.70,chinese,,0,0,0,,对不起，声音再大一点。
Dialogue: 0,1:26:20.70,1:26:24.38,english,,0,0,0,,AUDIENCE: It just seems like you're [INAUDIBLE]..
Dialogue: 0,1:26:20.70,1:26:24.38,chinese,,0,0,0,,这看起来就像你[听不清]。
Dialogue: 0,1:26:24.38,1:26:25.26,english,,0,0,0,,DAVID MALAN: Exactly.
Dialogue: 0,1:26:24.38,1:26:25.26,chinese,,0,0,0,,大卫-马兰：没错。
Dialogue: 0,1:26:25.26,1:26:33.51,english,,0,0,0,,So left hand's not talking to the right hand here, in that my current implementation of average is still assuming that there's only going to be three tests or whatever.
Dialogue: 0,1:26:25.26,1:26:33.51,chinese,,0,0,0,,所以左手在这里并没有和右手对话，因为我目前实现的平均值仍然假设只有三次测试或其他。
Dialogue: 0,1:26:33.51,1:26:39.48,english,,0,0,0,,But wait a minute, I just went through the trouble of modifying this to be n, generically.
Dialogue: 0,1:26:33.51,1:26:39.48,chinese,,0,0,0,,但是，等一下，我刚刚费了好大劲才把它修改成 n。
Dialogue: 0,1:26:39.48,1:26:46.69,english,,0,0,0,,And if I change this to 4, I'm not going to be happy, perhaps, with my average because now I'm going to ignore one of my test scores altogether.
Dialogue: 0,1:26:39.48,1:26:46.69,chinese,,0,0,0,,如果我把它改为 4，也许我就不会对我的平均分感到满意了，因为现在我将完全忽略我的一个考试成绩。
Dialogue: 0,1:26:46.69,1:26:48.45,english,,0,0,0,,So let me change this back to 3.
Dialogue: 0,1:26:46.69,1:26:48.45,chinese,,0,0,0,,所以，让我把它改回 3。
Dialogue: 0,1:26:48.45,1:27:00.92,english,,0,0,0,,And unfortunately, if it's a variable now, n, and therefore, I have literally a variable number of scores, how do I take the average of a variable number of things?
Dialogue: 0,1:26:48.45,1:27:00.92,chinese,,0,0,0,,不幸的是，如果现在是一个变量 n，因此，我的分数数量是可变的，那么我如何求出可变数量的平均值呢？
Dialogue: 0,1:27:00.92,1:27:02.63,english,,0,0,0,,I mean, what's my building block there?
Dialogue: 0,1:27:00.92,1:27:02.63,chinese,,0,0,0,,我的意思是，我的构件是什么？
Dialogue: 0,1:27:02.63,1:27:03.17,english,,0,0,0,,Yeah?
Dialogue: 0,1:27:03.17,1:27:10.10,english,,0,0,0,,AUDIENCE: [INAUDIBLE]
Dialogue: 0,1:27:10.10,1:27:10.85,english,,0,0,0,,DAVID MALAN: Yeah.
Dialogue: 0,1:27:10.10,1:27:10.85,chinese,,0,0,0,,是的
Dialogue: 0,1:27:10.85,1:27:14.88,english,,0,0,0,,Why don't I use a loop that goes through the array and adds things up as you go?
Dialogue: 0,1:27:10.85,1:27:14.88,chinese,,0,0,0,,我为什么不用一个循环来遍历数组，边遍历边累加？
Dialogue: 0,1:27:14.88,1:27:19.73,english,,0,0,0,,I mean, kind of like grade school, as you take the average on your calculator or paper and pencil, you just keep adding the numbers together,
Dialogue: 0,1:27:14.88,1:27:19.73,chinese,,0,0,0,,我的意思是，就像小学一样，当你用计算器或纸和铅笔计算平均值时，你只是不断地把数字相加、
Dialogue: 0,1:27:19.73,1:27:22.38,english,,0,0,0,,and then you divide at the end by the total number of things.
Dialogue: 0,1:27:19.73,1:27:22.38,chinese,,0,0,0,,最后再除以总数。
Dialogue: 0,1:27:22.38,1:27:23.52,english,,0,0,0,,So how can I do this?
Dialogue: 0,1:27:22.38,1:27:23.52,chinese,,0,0,0,,那么，我该怎么做呢？
Dialogue: 0,1:27:23.52,1:27:30.51,english,,0,0,0,,Well, let me change my implementation of average to first declare a variable called sum, or whatever, set it equal to 0.
Dialogue: 0,1:27:23.52,1:27:30.51,chinese,,0,0,0,,好吧，让我改变一下平均值的实现，首先声明一个名为 sum 的变量，或者其他什么变量，设置它等于 0。
Dialogue: 0,1:27:30.51,1:27:36.59,english,,0,0,0,,So this is like me on my piece of paper getting ready to count, or my calculator, of course, when you turn it on, typically defaults to zero.
Dialogue: 0,1:27:30.51,1:27:36.59,chinese,,0,0,0,,因此，这就像我在纸上准备数数，或者我的计算器，当然，当你打开它时，通常默认为零。
Dialogue: 0,1:27:36.59,1:27:46.73,english,,0,0,0,,And now, let me do for, int i equals 0. i is less than a-- well, no, I didn't do that. i is less than n, i++.
Dialogue: 0,1:27:36.59,1:27:46.73,chinese,,0,0,0,,现在，让我来做 for，int i 等于 0，i 小于 a -- 不，我没做那个。i 小于 n，i++。
Dialogue: 0,1:27:46.73,1:27:55.91,english,,0,0,0,,And now in here, let me go ahead and add to the current sum, whatever is in the array's location, i.
Dialogue: 0,1:27:46.73,1:27:55.91,chinese,,0,0,0,,现在，让我把数组位置 i 中的内容加到当前总和中。
Dialogue: 0,1:27:55.91,1:28:04.56,english,,0,0,0,,And then down here, I think I can just return some divided by 3.0-- not 3.0, n, perhaps here.
Dialogue: 0,1:27:55.91,1:28:04.56,chinese,,0,0,0,,然后在这里，我想我可以返回一些除以 3.0 -- 不是 3.0，是 n，也许在这里。
Dialogue: 0,1:28:04.56,1:28:08.49,english,,0,0,0,,And actually, I think I'm going to get-- let's make sure it's a float.
Dialogue: 0,1:28:04.56,1:28:08.49,chinese,,0,0,0,,实际上，我想我要去 -- 让我们确保它是一个浮动。
Dialogue: 0,1:28:08.49,1:28:15.54,english,,0,0,0,,Let's use the type casting trick just to make sure I don't accidentally shortchange someone and throw away everything after the decimal point.
Dialogue: 0,1:28:08.49,1:28:15.54,chinese,,0,0,0,,让我们使用类型转换技巧，以确保我不会不小心亏待了某人，而把小数点后的所有内容都扔掉。
Dialogue: 0,1:28:15.54,1:28:17.30,english,,0,0,0,,So it just escalated quickly, right?
Dialogue: 0,1:28:15.54,1:28:17.30,chinese,,0,0,0,,所以事情很快就升级了，对吗？
Dialogue: 0,1:28:17.30,1:28:18.99,english,,0,0,0,,Average just got a lot more involved.
Dialogue: 0,1:28:17.30,1:28:18.99,chinese,,0,0,0,,平均值变得更重要了。
Dialogue: 0,1:28:18.99,1:28:22.13,english,,0,0,0,,It's not just a single one line of code, but now it's dynamic.
Dialogue: 0,1:28:18.99,1:28:22.13,chinese,,0,0,0,,这不仅仅是一行代码，现在它是动态的。
Dialogue: 0,1:28:22.13,1:28:25.07,english,,0,0,0,,I initialize a variable called sum to 0.
Dialogue: 0,1:28:22.13,1:28:25.07,chinese,,0,0,0,,我将一个名为 sum 的变量初始化为 0。
Dialogue: 0,1:28:25.07,1:28:36.74,english,,0,0,0,,In this loop, I go through and just keep adding to sum, which is initially 0, whatever's in array[i]-- or specifically array[0], array[1], array[2].
Dialogue: 0,1:28:25.07,1:28:36.74,chinese,,0,0,0,,在这个循环中，我会不断地将数组[i]中的任何内容加到 sum 中，初始值为 0，具体来说就是数组[0]、数组[1]、数组[2]。
Dialogue: 0,1:28:36.74,1:28:40.97,english,,0,0,0,,That gives me a total sum that I return, divided by the total number of things.
Dialogue: 0,1:28:36.74,1:28:40.97,chinese,,0,0,0,,这样就得出了我返回的总金额除以物品总数。
Dialogue: 0,1:28:40.97,1:28:42.56,english,,0,0,0,,Now, this I can tighten slightly.
Dialogue: 0,1:28:40.97,1:28:42.56,chinese,,0,0,0,,现在，我可以稍微收紧一点。
Dialogue: 0,1:28:42.56,1:28:45.65,english,,0,0,0,,Recall that this is syntactic sugar for just adding things.
Dialogue: 0,1:28:42.56,1:28:45.65,chinese,,0,0,0,,请注意，这是一种语法糖，用于添加内容。
Dialogue: 0,1:28:45.65,1:28:48.62,english,,0,0,0,,I can't use plus plus because that only literally adds one.
Dialogue: 0,1:28:45.65,1:28:48.62,chinese,,0,0,0,,我不能使用加号加号，因为这样只能增加一个。
Dialogue: 0,1:28:48.62,1:28:52.63,english,,0,0,0,,But I can use here, plus equals.
Dialogue: 0,1:28:48.62,1:28:52.63,chinese,,0,0,0,,但我可以在这里使用 "加等号"。
Dialogue: 0,1:28:52.63,1:28:54.88,english,,0,0,0,,Questions on this implementation here?
Dialogue: 0,1:28:52.63,1:28:54.88,chinese,,0,0,0,,对此处的实施有疑问？
Dialogue: 0,1:28:54.88,1:29:06.45,english,,0,0,0,,Really the only takeaway-- or the most important takeaway is that this is the syntax for how you tell a function that it expects a whole array, not a single variable like an int or the like.
Dialogue: 0,1:28:54.88,1:29:06.45,chinese,,0,0,0,,真正唯一的收获--或者说最重要的收获是，这是告诉函数它需要整个数组，而不是 int 或类似的单个变量的语法。
Dialogue: 0,1:29:06.45,1:29:11.53,english,,0,0,0,,You literally use square brackets, but you don't specify the length inside there.
Dialogue: 0,1:29:06.45,1:29:11.53,chinese,,0,0,0,,从字面上看，你使用了方括号，但没有在方括号内指定长度。
Dialogue: 0,1:29:11.53,1:29:12.74,english,,0,0,0,,Yeah?
Dialogue: 0,1:29:12.74,1:29:16.41,english,,0,0,0,,AUDIENCE: What variable [INAUDIBLE] at the top?
Dialogue: 0,1:29:12.74,1:29:16.41,chinese,,0,0,0,,听众：顶部有什么变量？
Dialogue: 0,1:29:16.41,1:29:18.41,english,,0,0,0,,DAVID MALAN: What about the variable at the top?
Dialogue: 0,1:29:16.41,1:29:18.41,chinese,,0,0,0,,大卫-马兰：顶部的变量呢？
Dialogue: 0,1:29:18.41,1:29:22.20,english,,0,0,0,,AUDIENCE: [INAUDIBLE]
Dialogue: 0,1:29:22.20,1:29:23.33,english,,0,0,0,,DAVID MALAN: Good question.
Dialogue: 0,1:29:22.20,1:29:23.33,chinese,,0,0,0,,大卫-马兰：问得好。
Dialogue: 0,1:29:23.33,1:29:25.22,english,,0,0,0,,What do I have it defined as at the top?
Dialogue: 0,1:29:23.33,1:29:25.22,chinese,,0,0,0,,我在顶部将其定义为什么？
Dialogue: 0,1:29:25.22,1:29:33.84,english,,0,0,0,,This variable, N, it must be an integer if you're going to use it inside of an arrays square brackets here.
Dialogue: 0,1:29:25.22,1:29:33.84,chinese,,0,0,0,,如果要在数组方括号内使用 N 变量，它必须是整数。
Dialogue: 0,1:29:33.84,1:29:38.36,english,,0,0,0,,So this line 10, notice, no longer says 3, it says N.
Dialogue: 0,1:29:33.84,1:29:38.36,chinese,,0,0,0,,请注意，第 10 行不再是 3，而是 N。
Dialogue: 0,1:29:38.36,1:29:43.97,english,,0,0,0,,And so whatever N is 3 or 4 or something else, that's how many integers I will get in that array.
Dialogue: 0,1:29:38.36,1:29:43.97,chinese,,0,0,0,,因此，无论 N 是 3、4 还是其他什么，我都能在数组中得到多少个整数。
Dialogue: 0,1:29:43.97,1:29:48.32,english,,0,0,0,,And it must be, by definition of an array, an integer that goes in those square brackets.
Dialogue: 0,1:29:43.97,1:29:48.32,chinese,,0,0,0,,根据数组的定义，它必须是一个放在方括号中的整数。
Dialogue: 0,1:29:48.32,1:29:50.00,english,,0,0,0,,And here's a common source of confusion.
Dialogue: 0,1:29:48.32,1:29:50.00,chinese,,0,0,0,,这里有一个常见的困惑。
Dialogue: 0,1:29:50.00,1:29:56.21,english,,0,0,0,,When you create the array, that is declare it, you use square brackets like this, where you put the total number of elements you want.
Dialogue: 0,1:29:50.00,1:29:56.21,chinese,,0,0,0,,创建数组时，也就是声明数组时，要像这样使用方括号，在方括号中输入想要的元素总数。
Dialogue: 0,1:29:56.21,1:30:04.61,english,,0,0,0,,When you subsequently use the array, like I'm doing here, you don't mention int again-- just like you don't mention int again and again once a variable exists.
Dialogue: 0,1:29:56.21,1:30:04.61,chinese,,0,0,0,,当你随后使用数组时，就像我在这里做的一样，你不会再提到 int--就像你不会在变量存在后反复提到 int 一样。
Dialogue: 0,1:30:04.61,1:30:11.99,english,,0,0,0,,You use the square brackets still, but you don't use N. You use 0 or 1 or 2 or, generically here, i.
Dialogue: 0,1:30:04.61,1:30:11.99,chinese,,0,0,0,,仍然使用方括号，但不使用 N，而是使用 0 或 1 或 2，或者这里通用的 i。
Dialogue: 0,1:30:11.99,1:30:17.06,english,,0,0,0,,So when C was designed, they sometimes used the same syntax for two different ideas or contexts.
Dialogue: 0,1:30:11.99,1:30:17.06,chinese,,0,0,0,,因此，在设计 C 语言时，他们有时会使用相同的语法来表达两种不同的想法或语境。
Dialogue: 0,1:30:17.06,1:30:17.98,english,,0,0,0,,Yeah?
Dialogue: 0,1:30:17.98,1:30:22.64,english,,0,0,0,,AUDIENCE: Do you have to include line 6 [INAUDIBLE]??
Dialogue: 0,1:30:17.98,1:30:22.64,chinese,,0,0,0,,你必须包括第6行吗？是否必须包括第 6 行？
Dialogue: 0,1:30:22.64,1:30:23.77,english,,0,0,0,,DAVID MALAN: Good question.
Dialogue: 0,1:30:22.64,1:30:23.77,chinese,,0,0,0,,大卫-马兰：问得好。
Dialogue: 0,1:30:23.77,1:30:25.90,english,,0,0,0,,Do I have to include line 6?
Dialogue: 0,1:30:23.77,1:30:25.90,chinese,,0,0,0,,是否必须包括第 6 行？
Dialogue: 0,1:30:25.90,1:30:29.29,english,,0,0,0,,Short answer, yes, because of the reason we ran into last week.
Dialogue: 0,1:30:25.90,1:30:29.29,chinese,,0,0,0,,简而言之，是的，因为我们上周遇到了这个问题。
Dialogue: 0,1:30:29.29,1:30:32.75,english,,0,0,0,,C, or clang really, reads your code top to bottom, left to right.
Dialogue: 0,1:30:29.29,1:30:32.75,chinese,,0,0,0,,C 或 clang 会从上到下、从左到右读取代码。
Dialogue: 0,1:30:32.75,1:30:43.61,english,,0,0,0,,And so if the compiler sees some mention of this function average on line 16, but you haven't told the compiler that average exists, you're going to get an error on the screen.
Dialogue: 0,1:30:32.75,1:30:43.61,chinese,,0,0,0,,因此，如果编译器看到第 16 行提到了 average 这个函数，但你没有告诉编译器 average 存在，屏幕上就会出现错误。
Dialogue: 0,1:30:43.61,1:30:51.26,english,,0,0,0,,So the conventional way to do that is you just copy paste the first line of code from the function, it's so-called prototype or declaration.
Dialogue: 0,1:30:43.61,1:30:51.26,chinese,,0,0,0,,因此，传统的方法是复制粘贴函数的第一行代码，即所谓的原型或声明。
Dialogue: 0,1:30:51.26,1:30:51.76,english,,0,0,0,,Yeah?
Dialogue: 0,1:30:51.76,1:30:55.66,english,,0,0,0,,AUDIENCE: Is there a library if you don't know the size of the array?
Dialogue: 0,1:30:51.76,1:30:55.66,chinese,,0,0,0,,听众：如果不知道数组的大小，有图书馆吗？
Dialogue: 0,1:30:55.66,1:30:58.12,english,,0,0,0,,DAVID MALAN: Really good question, and a perfect segue way.
Dialogue: 0,1:30:55.66,1:30:58.12,chinese,,0,0,0,,大卫-马兰：真是个好问题，也是个完美的切入点。
Dialogue: 0,1:30:58.12,1:31:01.07,english,,0,0,0,,Is there a library you can use if you don't know the size of the array?
Dialogue: 0,1:30:58.12,1:31:01.07,chinese,,0,0,0,,如果不知道数组的大小，有没有可以使用的库呢？
Dialogue: 0,1:31:01.07,1:31:01.72,english,,0,0,0,,No.
Dialogue: 0,1:31:01.72,1:31:11.02,english,,0,0,0,,And so if any of you have programmed in Java or Python or other languages, you can actually just ask the array, how big is it?
Dialogue: 0,1:31:01.72,1:31:11.02,chinese,,0,0,0,,因此，如果你们用 Java、Python 或其他语言编程，实际上可以直接问数组：它有多大？
Dialogue: 0,1:31:11.02,1:31:13.77,english,,0,0,0,,In C, you and I, the programmers, have to remember it.
Dialogue: 0,1:31:11.02,1:31:13.77,chinese,,0,0,0,,在 C 语言中，你和我，程序员，必须记住它。
Dialogue: 0,1:31:13.77,1:31:17.44,english,,0,0,0,,And so short answer, no, there's no function that will just automatically do this for us.
Dialogue: 0,1:31:13.77,1:31:17.44,chinese,,0,0,0,,简而言之，没有任何功能可以自动帮我们完成这项工作。
Dialogue: 0,1:31:17.44,1:31:25.16,english,,0,0,0,,And in fact, let me make a more subtle claim that it's fine to use global variables like this if they're really for configuration options.
Dialogue: 0,1:31:17.44,1:31:25.16,chinese,,0,0,0,,事实上，让我提出一个更微妙的主张：如果全局变量真的是用于配置选项，那么使用这样的全局变量是没有问题的。
Dialogue: 0,1:31:25.16,1:31:25.66,english,,0,0,0,,Why?
Dialogue: 0,1:31:25.66,1:31:32.44,english,,0,0,0,,It's just convenient to put them at the very top of the file because everyone, you, your colleagues, your TAs are going to see them at the top of the code.
Dialogue: 0,1:31:25.66,1:31:32.44,chinese,,0,0,0,,把它们放在文件的最上面很方便，因为每个人、你、你的同事、你的助教都会在代码的最上面看到它们。
Dialogue: 0,1:31:32.44,1:31:36.13,english,,0,0,0,,But you really shouldn't be using them everywhere throughout your code.
Dialogue: 0,1:31:32.44,1:31:36.13,chinese,,0,0,0,,但您真的不应该在代码中到处使用它们。
Dialogue: 0,1:31:36.13,1:31:40.61,english,,0,0,0,,It'd be better if the average function, itself, were independent of that special variable.
Dialogue: 0,1:31:36.13,1:31:40.61,chinese,,0,0,0,,如果平均函数本身与该特殊变量无关，那就更好了。
Dialogue: 0,1:31:40.61,1:31:42.02,english,,0,0,0,,So by that, I mean this.
Dialogue: 0,1:31:40.61,1:31:42.02,chinese,,0,0,0,,所以，我的意思是这样的。
Dialogue: 0,1:31:42.02,1:31:46.24,english,,0,0,0,,You know what I should really do, if I really want to be well-designed?
Dialogue: 0,1:31:42.02,1:31:46.24,chinese,,0,0,0,,你知道如果我真的想设计得好，我应该怎么做吗？
Dialogue: 0,1:31:46.24,1:31:51.40,english,,0,0,0,,I should pass in the length of the array to the average function.
Dialogue: 0,1:31:46.24,1:31:51.40,chinese,,0,0,0,,我应该把数组的长度传给 average 函数。
Dialogue: 0,1:31:51.40,1:31:54.31,english,,0,0,0,,I should give the average function a second argument--
Dialogue: 0,1:31:51.40,1:31:54.31,chinese,,0,0,0,,我应该给平均函数添加第二个参数--
Dialogue: 0,1:31:54.31,1:31:57.80,english,,0,0,0,,I'll call it length, for instance, but I could call it anything I want.
Dialogue: 0,1:31:54.31,1:31:57.80,chinese,,0,0,0,,比如，我把它叫做 "长度"，但我想怎么叫都行。
Dialogue: 0,1:31:57.80,1:32:05.74,english,,0,0,0,,And so rather than putting N all the way down here at the bottom of my file, let me just dynamically say length instead.
Dialogue: 0,1:31:57.80,1:32:05.74,chinese,,0,0,0,,因此，与其在文件底部一直写 N，不如让我动态地写长度。
Dialogue: 0,1:32:05.74,1:32:08.62,english,,0,0,0,,And this is a subtlety-- and no need to get too tripped up over this.
Dialogue: 0,1:32:05.74,1:32:08.62,chinese,,0,0,0,,这是一个微妙之处--不必为此过于纠结。
Dialogue: 0,1:32:08.62,1:32:13.69,english,,0,0,0,,But this, now, is just an example of how the same function can take not one, but two arguments.
Dialogue: 0,1:32:08.62,1:32:13.69,chinese,,0,0,0,,但这只是一个例子，说明同一个函数可以接受两个参数。
Dialogue: 0,1:32:13.69,1:32:19.90,english,,0,0,0,,But indeed, in C, you must remember, yourself, what the length of an array is.
Dialogue: 0,1:32:13.69,1:32:19.90,chinese,,0,0,0,,但实际上，在 C 语言中，你必须自己记住数组的长度是多少。
Dialogue: 0,1:32:19.90,1:32:26.56,english,,0,0,0,,You can't just ask the array via some syntax like you can, those of you who've programmed before in Java or Python.
Dialogue: 0,1:32:19.90,1:32:26.56,chinese,,0,0,0,,你不能像那些用 Java 或 Python 编程的人一样，通过一些语法来询问数组。
Dialogue: 0,1:32:26.56,1:32:27.07,english,,0,0,0,,Yeah?
Dialogue: 0,1:32:27.07,1:32:35.11,english,,0,0,0,,AUDIENCE: [INAUDIBLE]
Dialogue: 0,1:32:35.11,1:32:36.24,english,,0,0,0,,DAVID MALAN: Good question.
Dialogue: 0,1:32:35.11,1:32:36.24,chinese,,0,0,0,,大卫-马兰：问得好。
Dialogue: 0,1:32:36.24,1:32:39.19,english,,0,0,0,,Would it be better designed to write a function that computes the size?
Dialogue: 0,1:32:36.24,1:32:39.19,chinese,,0,0,0,,写一个计算大小的函数会不会设计得更好？
Dialogue: 0,1:32:39.19,1:32:48.18,english,,0,0,0,,Short answer, can't do that in C. As soon as you pass an array into a function in C, you cannot figure out its size if it's a generic array like that of integers.
Dialogue: 0,1:32:39.19,1:32:48.18,chinese,,0,0,0,,简而言之，在 C 语言中无法做到这一点。在 C 语言中，只要将数组传入函数，就无法计算出它的大小（如果它是一个通用数组，如整数数组）。
Dialogue: 0,1:32:48.18,1:32:51.04,english,,0,0,0,,There are special cases that you can do that.
Dialogue: 0,1:32:48.18,1:32:51.04,chinese,,0,0,0,,在一些特殊情况下，你可以这样做。
Dialogue: 0,1:32:51.04,1:32:53.28,english,,0,0,0,,But in general, no, it's just not possible in C.
Dialogue: 0,1:32:51.04,1:32:53.28,chinese,,0,0,0,,但一般来说，在 C 语言中是不可能实现的。
Dialogue: 0,1:32:53.28,1:32:57.18,english,,0,0,0,,And if that's some frustration, honestly, this is why more modern languages add that feature.
Dialogue: 0,1:32:53.28,1:32:57.18,chinese,,0,0,0,,老实说，如果这让人感到沮丧，那么这就是为什么更多的现代语言会添加该功能的原因。
Dialogue: 0,1:32:57.18,1:32:57.68,english,,0,0,0,,Why?
Dialogue: 0,1:32:57.68,1:33:01.56,english,,0,0,0,,Because it was really annoying, as I'm alluding here to not having that information.
Dialogue: 0,1:32:57.68,1:33:01.56,chinese,,0,0,0,,因为这真的很烦人，我在这里暗指的就是没有这些信息。
Dialogue: 0,1:33:01.56,1:33:07.54,english,,0,0,0,,Now, just to make sure I didn't screw up anywhere, let me compile this final version of scores.
Dialogue: 0,1:33:01.56,1:33:07.54,chinese,,0,0,0,,现在，为了确保我没有在任何地方出错，让我来整理一下这个最终版本的分数。
Dialogue: 0,1:33:07.54,1:33:08.62,english,,0,0,0,,Suspense.
Dialogue: 0,1:33:08.62,1:33:14.03,english,,0,0,0,,All good. ./scores, 72, 73, 33, and we're still back in business.
Dialogue: 0,1:33:08.62,1:33:14.03,chinese,,0,0,0,,............分数，72，73，33，我们还在继续工作。
Dialogue: 0,1:33:14.03,1:33:15.53,english,,0,0,0,,So this version is more complicated.
Dialogue: 0,1:33:14.03,1:33:15.53,chinese,,0,0,0,,因此，这个版本更加复杂。
Dialogue: 0,1:33:15.53,1:33:18.73,english,,0,0,0,,And as always, we'll have this version on the course's website for reference.
Dialogue: 0,1:33:15.53,1:33:18.73,chinese,,0,0,0,,我们将一如既往地在课程网站上发布这一版本，以供参考。
Dialogue: 0,1:33:18.73,1:33:30.44,english,,0,0,0,,But the point, really, is that arrays, not only can be used as containers to store multiple values-- three or more in this case-- you can also even pass them around as arguments, as such.
Dialogue: 0,1:33:18.73,1:33:30.44,chinese,,0,0,0,,但问题的关键在于，数组不仅可以用作存储多个值的容器，在本例中可以存储三个或更多的值，还可以将它们作为参数传递。
Dialogue: 0,1:33:30.44,1:33:36.10,english,,0,0,0,,All right, now besides that, let's simplify for just a moment, and consider now the world of chars.
Dialogue: 0,1:33:30.44,1:33:36.10,chinese,,0,0,0,,好了，除此之外，让我们暂时简化一下，考虑一下字符的世界。
Dialogue: 0,1:33:36.10,1:33:39.20,english,,0,0,0,,If we've just got single bytes, where does this lead us?
Dialogue: 0,1:33:36.10,1:33:39.20,chinese,,0,0,0,,如果我们只有单字节，这会导致什么结果？
Dialogue: 0,1:33:39.20,1:33:44.17,english,,0,0,0,,And how does this get us, ultimately, to strings to solve problems like readability and cryptography and the like?
Dialogue: 0,1:33:39.20,1:33:44.17,chinese,,0,0,0,,那么，这最终又是如何让我们用字符串来解决可读性和密码学等问题的呢？
Dialogue: 0,1:33:44.17,1:33:48.96,english,,0,0,0,,Well here, for instance, are three lines of code, out of context, that simply store three chars.
Dialogue: 0,1:33:44.17,1:33:48.96,chinese,,0,0,0,,例如，这里有三行代码，脱离上下文，只是存储三个字符。
Dialogue: 0,1:33:48.96,1:33:50.80,english,,0,0,0,,And you can already see where this is going.
Dialogue: 0,1:33:48.96,1:33:50.80,chinese,,0,0,0,,你已经可以看到事情的发展方向了。
Dialogue: 0,1:33:50.80,1:33:57.47,english,,0,0,0,,Having three variables called c1, c2, c3 is clearly going to end up being bad design because of all the silly redundancy here.
Dialogue: 0,1:33:50.80,1:33:57.47,chinese,,0,0,0,,显然，使用 c1、c2、c3 这三个变量最终会导致糟糕的设计，因为这里存在大量愚蠢的冗余。
Dialogue: 0,1:33:57.47,1:34:01.33,english,,0,0,0,,But notice, I'm using single quotes like last week because these are single chars.
Dialogue: 0,1:33:57.47,1:34:01.33,chinese,,0,0,0,,但请注意，我和上周一样使用了单引号，因为这些都是单字符。
Dialogue: 0,1:34:01.33,1:34:03.64,english,,0,0,0,,What does this look like in the computer's memory?
Dialogue: 0,1:34:01.33,1:34:03.64,chinese,,0,0,0,,这在计算机内存中是什么样子的？
Dialogue: 0,1:34:03.64,1:34:05.48,english,,0,0,0,,Well, it looks a little something like this.
Dialogue: 0,1:34:03.64,1:34:05.48,chinese,,0,0,0,,嗯，看起来有点像这样。
Dialogue: 0,1:34:05.48,1:34:12.56,english,,0,0,0,,If we clear out the old memory, c1, c2, c3 probably will end up here, maybe not literally in the top left-hand corner.
Dialogue: 0,1:34:05.48,1:34:12.56,chinese,,0,0,0,,如果我们清除旧的内存，c1、c2、c3 可能会出现在这里，也许不是字面上的左上角。
Dialogue: 0,1:34:12.56,1:34:14.02,english,,0,0,0,,This is just an artist's rendition.
Dialogue: 0,1:34:12.56,1:34:14.02,chinese,,0,0,0,,这只是艺术家的描绘。
Dialogue: 0,1:34:14.02,1:34:18.44,english,,0,0,0,,But c1, c2, c3 will probably end up like that.
Dialogue: 0,1:34:14.02,1:34:18.44,chinese,,0,0,0,,但 c1、c2、c3 的结局很可能就是这样。
Dialogue: 0,1:34:18.44,1:34:20.02,english,,0,0,0,,Now, what's really there?
Dialogue: 0,1:34:18.44,1:34:20.02,chinese,,0,0,0,,现在，那里到底有什么？
Dialogue: 0,1:34:20.02,1:34:21.73,english,,0,0,0,,It's really those same three numbers--
Dialogue: 0,1:34:20.02,1:34:21.73,chinese,,0,0,0,,其实就是这三个数字
Dialogue: 0,1:34:21.73,1:34:23.35,english,,0,0,0,,72, 73, 33.
Dialogue: 0,1:34:21.73,1:34:23.35,chinese,,0,0,0,,72, 73, 33.
Dialogue: 0,1:34:23.35,1:34:27.92,english,,0,0,0,,But how many bits does a byte have?
Dialogue: 0,1:34:23.35,1:34:27.92,chinese,,0,0,0,,但一个字节有多少位？
Dialogue: 0,1:34:27.92,1:34:28.88,english,,0,0,0,,Just eight.
Dialogue: 0,1:34:27.92,1:34:28.88,chinese,,0,0,0,,只有八个。
Dialogue: 0,1:34:28.88,1:34:35.33,english,,0,0,0,,So if we were to look at the binary representation of these characters, it would only be eight bits each.
Dialogue: 0,1:34:28.88,1:34:35.33,chinese,,0,0,0,,因此，如果我们查看这些字符的二进制表示法，每个字符只有 8 位。
Dialogue: 0,1:34:35.33,1:34:39.14,english,,0,0,0,,That's enough to store small numbers like 72, 73, 33.
Dialogue: 0,1:34:35.33,1:34:39.14,chinese,,0,0,0,,这足以存储 72、73、33 等小数字。
Dialogue: 0,1:34:39.14,1:34:41.58,english,,0,0,0,,We're not dealing with Unicode and emoji and the like.
Dialogue: 0,1:34:39.14,1:34:41.58,chinese,,0,0,0,,我们不是在处理 Unicode 和表情符号之类的问题。
Dialogue: 0,1:34:41.58,1:34:42.83,english,,0,0,0,,But the point is the same.
Dialogue: 0,1:34:41.58,1:34:42.83,chinese,,0,0,0,,但问题是一样的。
Dialogue: 0,1:34:42.83,1:34:45.17,english,,0,0,0,,You don't have to use four bytes to store these numbers.
Dialogue: 0,1:34:42.83,1:34:45.17,chinese,,0,0,0,,您不必使用四个字节来存储这些数字。
Dialogue: 0,1:34:45.17,1:34:51.42,english,,0,0,0,,You can use a different data type like chars, and underneath the hood, it's, indeed, going to use just single bytes for each.
Dialogue: 0,1:34:45.17,1:34:51.42,chinese,,0,0,0,,你可以使用不同的数据类型，如字符，而在引擎盖下，它确实会为每个数据使用单字节。
Dialogue: 0,1:34:51.42,1:34:55.85,english,,0,0,0,,But this is sort of like a-- this isn't really how we implement strings, right?
Dialogue: 0,1:34:51.42,1:34:55.85,chinese,,0,0,0,,但这有点像 -- 这并不是我们实现字符串的真正方式，对吧？
Dialogue: 0,1:34:55.85,1:34:59.27,english,,0,0,0,,When you wanted to say, hi, last week, or this, we used double quotes.
Dialogue: 0,1:34:55.85,1:34:59.27,chinese,,0,0,0,,当你想说 "嗨"、"上周 "或 "这个 "时，我们使用双引号。
Dialogue: 0,1:34:59.27,1:35:02.90,english,,0,0,0,,And we wrote all of the things together and used one variable, not three, right?
Dialogue: 0,1:34:59.27,1:35:02.90,chinese,,0,0,0,,我们把所有东西都写在一起，用一个变量，而不是三个，对吗？
Dialogue: 0,1:35:02.90,1:35:06.26,english,,0,0,0,,When I typed in David, I didn't have a variable for D-A-V-I-D.
Dialogue: 0,1:35:02.90,1:35:06.26,chinese,,0,0,0,,当我输入 David 时，我没有 D-A-V-I-D 的变量。
Dialogue: 0,1:35:06.26,1:35:09.75,english,,0,0,0,,I had one variable called name that stored the whole thing.
Dialogue: 0,1:35:06.26,1:35:09.75,chinese,,0,0,0,,我有一个名为 name 的变量，可以存储所有内容。
Dialogue: 0,1:35:09.75,1:35:13.31,english,,0,0,0,,So in C, we keep talking about these things called strings.
Dialogue: 0,1:35:09.75,1:35:13.31,chinese,,0,0,0,,因此，在 C 语言中，我们一直在谈论字符串。
Dialogue: 0,1:35:13.31,1:35:17.42,english,,0,0,0,,We'll see, eventually, that strings are not necessarily what they seem to be.
Dialogue: 0,1:35:13.31,1:35:17.42,chinese,,0,0,0,,我们最终会发现，字符串并不一定像它们看起来那样。
Dialogue: 0,1:35:17.42,1:35:22.07,english,,0,0,0,,But for now, the key thing about strings is that they're variable length, so to speak, right?
Dialogue: 0,1:35:17.42,1:35:22.07,chinese,,0,0,0,,但现在，字符串的关键在于它们的长度是可变的，不是吗？
Dialogue: 0,1:35:22.07,1:35:28.25,english,,0,0,0,,They might be three characters, Hi, or five characters, David, or anything smaller or larger.
Dialogue: 0,1:35:22.07,1:35:28.25,chinese,,0,0,0,,它们可能是三个字符，Hi，也可能是五个字符，David，或者更小或更大。
Dialogue: 0,1:35:28.25,1:35:33.11,english,,0,0,0,,So how do we go about implementing strings, if all we have at the end of the day is my memory?
Dialogue: 0,1:35:28.25,1:35:33.11,chinese,,0,0,0,,那么，如果到最后我们所拥有的只是我的记忆，我们该如何实施字符串呢？
Dialogue: 0,1:35:33.11,1:35:41.90,english,,0,0,0,,Well, here is an example of just creating, declaring, and defining a string called s. s because it's just a simple string, and quote unquote, HI!, in double quotes.
Dialogue: 0,1:35:33.11,1:35:41.90,chinese,,0,0,0,,这里有一个创建、声明和定义名为 s 的字符串的示例。s 因为只是一个简单的字符串，所以用双引号引出未加引号的 HI！。
Dialogue: 0,1:35:41.90,1:35:44.09,english,,0,0,0,,What does this look like in the computer's memory?
Dialogue: 0,1:35:41.90,1:35:44.09,chinese,,0,0,0,,这在计算机内存中是什么样子的？
Dialogue: 0,1:35:44.09,1:35:45.23,english,,0,0,0,,Well, let's clear it again.
Dialogue: 0,1:35:44.09,1:35:45.23,chinese,,0,0,0,,好吧，让我们再澄清一遍。
Dialogue: 0,1:35:45.23,1:35:50.96,english,,0,0,0,,And here, now, because it's technically stored in one variable, s, here is how I might draw it as an artist.
Dialogue: 0,1:35:45.23,1:35:50.96,chinese,,0,0,0,,现在，因为技术上它只存储在一个变量 s 中，所以作为艺术家，我可以这样画它。
Dialogue: 0,1:35:50.96,1:35:52.52,english,,0,0,0,,It's three bytes in total--
Dialogue: 0,1:35:50.96,1:35:52.52,chinese,,0,0,0,,总共有三个字节
Dialogue: 0,1:35:52.52,1:35:53.99,english,,0,0,0,,H-I exclamation point.
Dialogue: 0,1:35:52.52,1:35:53.99,chinese,,0,0,0,,H-I 感叹号。
Dialogue: 0,1:35:53.99,1:35:59.63,english,,0,0,0,,But there's no c1, c2, c3, it's just, the whole thing is s.
Dialogue: 0,1:35:53.99,1:35:59.63,chinese,,0,0,0,,但没有 c1、c2、c3，整个过程都是 s。
Dialogue: 0,1:35:59.63,1:36:06.99,english,,0,0,0,,But it turns out that a string, fun fact, is really just what underneath the hood?
Dialogue: 0,1:35:59.63,1:36:06.99,chinese,,0,0,0,,但事实证明，有趣的是，字符串在引擎盖下面到底是什么？
Dialogue: 0,1:36:06.99,1:36:12.09,english,,0,0,0,,Kind of leading up to this-- what is a string, if this is how it's laid out in memory?
Dialogue: 0,1:36:06.99,1:36:12.09,chinese,,0,0,0,,如果记忆中的字符串是这样排列的，那么字符串又是什么呢？
Dialogue: 0,1:36:12.09,1:36:13.19,english,,0,0,0,,AUDIENCE: An array.
Dialogue: 0,1:36:12.09,1:36:13.19,chinese,,0,0,0,,听众：一个阵列。
Dialogue: 0,1:36:13.19,1:36:15.83,english,,0,0,0,,DAVID MALAN: Literally, it's just an array of characters.
Dialogue: 0,1:36:13.19,1:36:15.83,chinese,,0,0,0,,戴维-马兰：从字面上看，这只是一系列角色。
Dialogue: 0,1:36:15.83,1:36:18.59,english,,0,0,0,,And we didn't have to know about arrays last week to use strings.
Dialogue: 0,1:36:15.83,1:36:18.59,chinese,,0,0,0,,上周，我们不需要了解数组就能使用字符串。
Dialogue: 0,1:36:18.59,1:36:21.38,english,,0,0,0,,This is where, again, the training wheels are starting to come off.
Dialogue: 0,1:36:18.59,1:36:21.38,chinese,,0,0,0,,这也是训练车轮开始脱落的地方。
Dialogue: 0,1:36:21.38,1:36:23.73,english,,0,0,0,,But a string is just an array of characters.
Dialogue: 0,1:36:21.38,1:36:23.73,chinese,,0,0,0,,但字符串只是一个字符数组。
Dialogue: 0,1:36:23.73,1:36:26.04,english,,0,0,0,,H-I exclamation point, for instance.
Dialogue: 0,1:36:23.73,1:36:26.04,chinese,,0,0,0,,例如 H-I 感叹号。
Dialogue: 0,1:36:26.04,1:36:38.15,english,,0,0,0,,So technically, an array-- or a string called s is really a variable called s that allows you to get at the first character with s[0], if you want-- s[1], s[2].
Dialogue: 0,1:36:26.04,1:36:38.15,chinese,,0,0,0,,因此，从技术上讲，一个名为 s 的数组或字符串实际上是一个名为 s 的变量，它允许你通过 s[0] 获取第一个字符，如果你想的话，可以通过 s[1] 或 s[2] 获取。
Dialogue: 0,1:36:38.15,1:36:47.00,english,,0,0,0,,You can literally get individual characters just by treating s as though it's an array, which it really is underneath the hood, in this case.
Dialogue: 0,1:36:38.15,1:36:47.00,chinese,,0,0,0,,只需将 s 当作数组处理，就能获得单个字符，而在本例中，s 在外壳下确实是一个数组。
Dialogue: 0,1:36:47.00,1:36:48.56,english,,0,0,0,,But there's a catch.
Dialogue: 0,1:36:47.00,1:36:48.56,chinese,,0,0,0,,但有一个问题。
Dialogue: 0,1:36:48.56,1:36:51.50,english,,0,0,0,,How do you know where strings end?
Dialogue: 0,1:36:48.56,1:36:51.50,chinese,,0,0,0,,你怎么知道琴弦在哪里结束？
Dialogue: 0,1:36:51.50,1:36:54.56,english,,0,0,0,,In the past, when I drew some integers on the screen,
Dialogue: 0,1:36:51.50,1:36:54.56,chinese,,0,0,0,,过去，当我在屏幕上画一些整数时、
Dialogue: 0,1:36:54.56,1:36:57.08,english,,0,0,0,,I know, I claim they always take up 4 bytes.
Dialogue: 0,1:36:54.56,1:36:57.08,chinese,,0,0,0,,我知道，我声称它们总是占用 4 个字节。
Dialogue: 0,1:36:57.08,1:37:00.20,english,,0,0,0,,If I had drawn a long, it always takes up 8 bytes.
Dialogue: 0,1:36:57.08,1:37:00.20,chinese,,0,0,0,,如果我画了一个长条，它总是占用 8 个字节。
Dialogue: 0,1:37:00.20,1:37:03.53,english,,0,0,0,,If I had drawn a character, it always takes up 1 byte.
Dialogue: 0,1:37:00.20,1:37:03.53,chinese,,0,0,0,,如果我画了一个字符，它总是占用 1 个字节。
Dialogue: 0,1:37:03.53,1:37:06.53,english,,0,0,0,,But how many bytes does a string take up?
Dialogue: 0,1:37:03.53,1:37:06.53,chinese,,0,0,0,,但一个字符串要占用多少字节呢？
Dialogue: 0,1:37:06.53,1:37:08.45,english,,0,0,0,,Yeah, I mean, that's kind of the right answer.
Dialogue: 0,1:37:06.53,1:37:08.45,chinese,,0,0,0,,是的，我的意思是，这是一个正确的答案。
Dialogue: 0,1:37:08.45,1:37:10.49,english,,0,0,0,,In this case, three, it would seem.
Dialogue: 0,1:37:08.45,1:37:10.49,chinese,,0,0,0,,在这种情况下，似乎是三个。
Dialogue: 0,1:37:10.49,1:37:13.49,english,,0,0,0,,But if it's David, that's a good five characters.
Dialogue: 0,1:37:10.49,1:37:13.49,chinese,,0,0,0,,但如果是戴维，那就有五个角色了。
Dialogue: 0,1:37:13.49,1:37:16.17,english,,0,0,0,,But where do we put the number three?
Dialogue: 0,1:37:13.49,1:37:16.17,chinese,,0,0,0,,但是，我们该把数字 3 放在哪里呢？
Dialogue: 0,1:37:16.17,1:37:17.84,english,,0,0,0,,Where do you put the number five, right?
Dialogue: 0,1:37:16.17,1:37:17.84,chinese,,0,0,0,,你把数字 5 放在哪里，对吗？
Dialogue: 0,1:37:17.84,1:37:20.19,english,,0,0,0,,This is literally all that's inside your computer.
Dialogue: 0,1:37:17.84,1:37:20.19,chinese,,0,0,0,,这就是电脑中的全部内容。
Dialogue: 0,1:37:20.19,1:37:23.43,english,,0,0,0,,This is all our building blocks in front of us.
Dialogue: 0,1:37:20.19,1:37:23.43,chinese,,0,0,0,,这就是摆在我们面前的所有积木。
Dialogue: 0,1:37:23.43,1:37:25.49,english,,0,0,0,,So how can we-- where does the three go?
Dialogue: 0,1:37:23.43,1:37:25.49,chinese,,0,0,0,,那么，我们怎样才能--这三个人去哪儿了？
Dialogue: 0,1:37:25.49,1:37:26.54,english,,0,0,0,,Where does the five go?
Dialogue: 0,1:37:25.49,1:37:26.54,chinese,,0,0,0,,那五个人去哪儿了？
Dialogue: 0,1:37:26.54,1:37:29.42,english,,0,0,0,,Well, it turns out you can solve this in a couple of different ways.
Dialogue: 0,1:37:26.54,1:37:29.42,chinese,,0,0,0,,事实证明，你可以用几种不同的方法来解决这个问题。
Dialogue: 0,1:37:29.42,1:37:41.84,english,,0,0,0,,But the way humans decided to implement strings years ago is, indeed, an array, but they added one extra byte at the end of every such string array, just to make clear, with a so-called sentinel value,
Dialogue: 0,1:37:29.42,1:37:41.84,chinese,,0,0,0,,但人类多年前决定实现字符串的方式确实是一个数组，但他们在每个字符串数组的末尾都额外增加了一个字节，以明确所谓的哨兵值、
Dialogue: 0,1:37:41.84,1:37:44.48,english,,0,0,0,,that the string ends here.
Dialogue: 0,1:37:41.84,1:37:44.48,chinese,,0,0,0,,字符串到此为止。
Dialogue: 0,1:37:44.48,1:37:45.05,english,,0,0,0,,Why?
Dialogue: 0,1:37:45.05,1:37:54.59,english,,0,0,0,,So that if you have two strings in the computer's memory like, HI! and bye, you know where the barrier is between the exclamation point of one and the letter B in the next, right?
Dialogue: 0,1:37:45.05,1:37:54.59,chinese,,0,0,0,,这样，如果电脑内存中有两个字符串，比如 "HI "和 "bye"，你就知道其中一个字符串的感叹号和下一个字符串的字母 B 之间的分界线在哪里，对吗？
Dialogue: 0,1:37:54.59,1:37:56.00,english,,0,0,0,,You need some kind of delimiter.
Dialogue: 0,1:37:54.59,1:37:56.00,chinese,,0,0,0,,你需要某种分隔符。
Dialogue: 0,1:37:56.00,1:38:00.11,english,,0,0,0,,And so what really is underneath the hood is this.
Dialogue: 0,1:37:56.00,1:38:00.11,chinese,,0,0,0,,所以，真正的秘密是这样的。
Dialogue: 0,1:38:00.11,1:38:07.04,english,,0,0,0,,When you store a string in memory, when you type in a string-- as the user, if you type in 3 characters, it's going to use
Dialogue: 0,1:38:00.11,1:38:07.04,chinese,,0,0,0,,当你在内存中存储字符串时，当你输入字符串时--作为用户，如果你输入 3 个字符，它会使用
Dialogue: 0,1:38:07.04,1:38:10.28,english,,0,0,0,,3 plus 1 equals 4 bytes in total.
Dialogue: 0,1:38:07.04,1:38:10.28,chinese,,0,0,0,,3 加 1 共等于 4 个字节。
Dialogue: 0,1:38:10.28,1:38:14.13,english,,0,0,0,,If you type in David, it's going to use 5 plus 1 equals 6 bytes in total.
Dialogue: 0,1:38:10.28,1:38:14.13,chinese,,0,0,0,,如果输入 David，则总共要使用 5 加 1 等于 6 个字节。
Dialogue: 0,1:38:14.13,1:38:14.63,english,,0,0,0,,Why?
Dialogue: 0,1:38:14.63,1:38:20.21,english,,0,0,0,,Because C automatically adds this special 0 at the end of the string.
Dialogue: 0,1:38:14.63,1:38:20.21,chinese,,0,0,0,,因为 C 会自动在字符串末尾添加这个特殊的 0。
Dialogue: 0,1:38:20.21,1:38:25.71,english,,0,0,0,,I've drawn it with backslash 0 because this is how you represent 0 as a char, as a character.
Dialogue: 0,1:38:20.21,1:38:25.71,chinese,,0,0,0,,我用反斜杠 0 画它，是因为 0 作为字符就是这样表示的。
Dialogue: 0,1:38:25.71,1:38:28.23,english,,0,0,0,,But this is literally just 0, as we'll soon see.
Dialogue: 0,1:38:25.71,1:38:28.23,chinese,,0,0,0,,但这只是 0，我们很快就会看到。
Dialogue: 0,1:38:28.23,1:38:36.19,english,,0,0,0,,So any time there's a string in memory, it always takes up one more byte than you, yourself, as the programmer or human typed in.
Dialogue: 0,1:38:28.23,1:38:36.19,chinese,,0,0,0,,因此，无论何时内存中出现字符串，它总是比程序员或人类输入的字符串多占用一个字节。
Dialogue: 0,1:38:36.19,1:38:45.17,english,,0,0,0,,In fact, if we convert this again, just for discussion's sake, to those integers, what's literally stored in the computer's memory is going to be 72, 73, 33, and now a 0.
Dialogue: 0,1:38:36.19,1:38:45.17,chinese,,0,0,0,,事实上，为了便于讨论，如果我们再次将其转换为整数，那么电脑内存中实际存储的内容将是 72、73、33 和 0。
Dialogue: 0,1:38:45.17,1:38:54.53,english,,0,0,0,,And the computer, because of C and how it was invented, it's just smart enough to know that when you print out a string, it prints out every character until it sees a 0,
Dialogue: 0,1:38:45.17,1:38:54.53,chinese,,0,0,0,,由于 C 语言的发明过程，计算机很聪明，它知道当你打印出一个字符串时，它会打印出每个字符，直到看到 0、
Dialogue: 0,1:38:54.53,1:38:56.15,english,,0,0,0,,and then it just stops printing.
Dialogue: 0,1:38:54.53,1:38:56.15,chinese,,0,0,0,,然后就停止打印了。
Dialogue: 0,1:38:56.15,1:38:58.47,english,,0,0,0,,In particular, printf knows how this works.
Dialogue: 0,1:38:56.15,1:38:58.47,chinese,,0,0,0,,特别是，printf 知道如何工作。
Dialogue: 0,1:38:58.47,1:39:02.05,english,,0,0,0,,And this is why printf knows when to stop printing.
Dialogue: 0,1:38:58.47,1:39:02.05,chinese,,0,0,0,,这就是 printf 知道何时停止打印的原因。
Dialogue: 0,1:39:02.05,1:39:03.80,english,,0,0,0,,Decimal numbers are not that enlightening.
Dialogue: 0,1:39:02.05,1:39:03.80,chinese,,0,0,0,,小数点并不那么有启发性。
Dialogue: 0,1:39:03.80,1:39:05.94,english,,0,0,0,,We'll generally write the characters like this.
Dialogue: 0,1:39:03.80,1:39:05.94,chinese,,0,0,0,,我们一般会这样写人物。
Dialogue: 0,1:39:05.94,1:39:09.35,english,,0,0,0,,And again, backslash 0 is just special symbology.
Dialogue: 0,1:39:05.94,1:39:09.35,chinese,,0,0,0,,同样，反斜杠 0 只是一种特殊符号。
Dialogue: 0,1:39:09.35,1:39:13.19,english,,0,0,0,,It's what the programmer types to make clear that you're not saying, HI!, 0.
Dialogue: 0,1:39:09.35,1:39:13.19,chinese,,0,0,0,,这是程序员输入的内容，以明确您不是在说：HI！，0。
Dialogue: 0,1:39:13.19,1:39:15.98,english,,0,0,0,,You're saying HI!, and then it's a special 0.
Dialogue: 0,1:39:13.19,1:39:15.98,chinese,,0,0,0,,你说 "HI！"，然后就是特别的 "0"。
Dialogue: 0,1:39:15.98,1:39:22.22,english,,0,0,0,,Specifically, it is eight 0 bits that indicate that it's the end of the string.
Dialogue: 0,1:39:15.98,1:39:22.22,chinese,,0,0,0,,具体来说，就是用 8 个 0 位来表示字符串的结束。
Dialogue: 0,1:39:22.22,1:39:26.33,english,,0,0,0,,Technically, that backslash zero, if you want to be fancy, it's called null,
Dialogue: 0,1:39:22.22,1:39:26.33,chinese,,0,0,0,,从技术上讲，如果你想花哨一点，这个反斜杠零叫做 null、
Dialogue: 0,1:39:26.33,1:39:27.32,english,,0,0,0,,N-U-L-L.
Dialogue: 0,1:39:27.32,1:39:30.32,english,,0,0,0,,And it turns out, you've seen this before, though we didn't call it out.
Dialogue: 0,1:39:27.32,1:39:30.32,chinese,,0,0,0,,事实证明，你以前见过这种情况，虽然我们没有说出来。
Dialogue: 0,1:39:30.32,1:39:33.23,english,,0,0,0,,Here's that same ASCII chart from the past couple of weeks.
Dialogue: 0,1:39:30.32,1:39:33.23,chinese,,0,0,0,,这是过去几周的 ASCII 图表。
Dialogue: 0,1:39:33.23,1:39:39.08,english,,0,0,0,,If I highlight this, what is decimal number 0 mapping to?
Dialogue: 0,1:39:33.23,1:39:39.08,chinese,,0,0,0,,如果我突出显示这一点，十进制数字 0 映射的是什么？
Dialogue: 0,1:39:39.08,1:39:42.83,english,,0,0,0,,NUL, which is just programmer speak for the special null character.
Dialogue: 0,1:39:39.08,1:39:42.83,chinese,,0,0,0,,NUL，程序员用它来表示特殊的空字符。
Dialogue: 0,1:39:42.83,1:39:46.55,english,,0,0,0,,All 0 bits that means the string ends here.
Dialogue: 0,1:39:42.83,1:39:46.55,chinese,,0,0,0,,全部为 0 位，表示字符串到此为止。
Dialogue: 0,1:39:46.55,1:39:48.51,english,,0,0,0,,This all happens automatically for you.
Dialogue: 0,1:39:46.55,1:39:48.51,chinese,,0,0,0,,这一切都会自动为您完成。
Dialogue: 0,1:39:48.51,1:39:53.42,english,,0,0,0,,You do not need to create these null characters or these zeros.
Dialogue: 0,1:39:48.51,1:39:53.42,chinese,,0,0,0,,您无需创建这些空字符或零。
Dialogue: 0,1:39:53.42,1:40:00.03,english,,0,0,0,,Any questions then, on this implementation thus far?
Dialogue: 0,1:39:53.42,1:40:00.03,chinese,,0,0,0,,那么，对迄今为止的实施情况还有什么问题吗？
Dialogue: 0,1:40:00.03,1:40:01.82,english,,0,0,0,,Any questions here?
Dialogue: 0,1:40:00.03,1:40:01.82,chinese,,0,0,0,,有问题吗？
Dialogue: 0,1:40:01.82,1:40:02.32,english,,0,0,0,,No?
Dialogue: 0,1:40:02.32,1:40:03.19,english,,0,0,0,,Well, let me do this.
Dialogue: 0,1:40:02.32,1:40:03.19,chinese,,0,0,0,,让我来吧
Dialogue: 0,1:40:03.19,1:40:05.31,english,,0,0,0,,Let me go back to VS Code in a second.
Dialogue: 0,1:40:03.19,1:40:05.31,chinese,,0,0,0,,让我马上回到 VS 代码。
Dialogue: 0,1:40:05.31,1:40:07.77,english,,0,0,0,,And let's actually corroborate this with some code.
Dialogue: 0,1:40:05.31,1:40:07.77,chinese,,0,0,0,,让我们用一些代码来证实这一点。
Dialogue: 0,1:40:07.77,1:40:10.83,english,,0,0,0,,Let me go ahead and create a small program called hi.c.
Dialogue: 0,1:40:07.77,1:40:10.83,chinese,,0,0,0,,让我继续创建一个名为 hi.c 的小程序。
Dialogue: 0,1:40:10.83,1:40:12.07,english,,0,0,0,,And how about we do this?
Dialogue: 0,1:40:10.83,1:40:12.07,chinese,,0,0,0,,我们这样做如何？
Dialogue: 0,1:40:12.07,1:40:14.55,english,,0,0,0,,Let me include stdio.h.
Dialogue: 0,1:40:12.07,1:40:14.55,chinese,,0,0,0,,让我加入 stdio.h。
Dialogue: 0,1:40:14.55,1:40:18.67,english,,0,0,0,,Let me include-- let me type out int main void, as always.
Dialogue: 0,1:40:14.55,1:40:18.67,chinese,,0,0,0,,让我一如既往地输入 int main void。
Dialogue: 0,1:40:18.67,1:40:24.96,english,,0,0,0,,And now let me do something simple and kind of bad, but char c1 equals quote unquote, h, in single quotes.
Dialogue: 0,1:40:18.67,1:40:24.96,chinese,,0,0,0,,现在让我做一件简单但有点糟糕的事，但字符 c1 等于单引号中的引号 unquote、h。
Dialogue: 0,1:40:24.96,1:40:28.59,english,,0,0,0,,Char c2 equals quote unquote, I, in single quotes.
Dialogue: 0,1:40:24.96,1:40:28.59,chinese,,0,0,0,,字符 c2 等于单引号中的引号 I。
Dialogue: 0,1:40:28.59,1:40:32.83,english,,0,0,0,,And lastly, char c3 equals exclamation point, in single quotes.
Dialogue: 0,1:40:28.59,1:40:32.83,chinese,,0,0,0,,最后，字符 c3 等于感叹号，用单引号表示。
Dialogue: 0,1:40:32.83,1:40:34.50,english,,0,0,0,,And now, let me just print this out.
Dialogue: 0,1:40:32.83,1:40:34.50,chinese,,0,0,0,,现在，让我把这个打印出来。
Dialogue: 0,1:40:34.50,1:40:36.96,english,,0,0,0,,I can't use %s because that is not a string.
Dialogue: 0,1:40:34.50,1:40:36.96,chinese,,0,0,0,,我不能使用 %s，因为它不是字符串。
Dialogue: 0,1:40:36.96,1:40:40.29,english,,0,0,0,,That's literally three chars, because that's the design decision I made.
Dialogue: 0,1:40:36.96,1:40:40.29,chinese,,0,0,0,,这实际上是三个字符，因为这是我的设计决定。
Dialogue: 0,1:40:40.29,1:40:41.43,english,,0,0,0,,But I could do this--
Dialogue: 0,1:40:40.29,1:40:41.43,chinese,,0,0,0,,但我可以这么做
Dialogue: 0,1:40:41.43,1:40:48.60,english,,0,0,0,,%c, %c, %c, which we haven't seen before, but %s is string, %i is int,
Dialogue: 0,1:40:41.43,1:40:48.60,chinese,,0,0,0,,%c、%c、%c，我们以前没见过，但 %s 是字符串，%i 是 int、
Dialogue: 0,1:40:48.60,1:40:51.06,english,,0,0,0,,%c is, indeed, char.
Dialogue: 0,1:40:48.60,1:40:51.06,chinese,,0,0,0,,%c 确实是字符。
Dialogue: 0,1:40:51.06,1:40:56.28,english,,0,0,0,,So let me put a backslash n at the end for cleanliness, and now do, c1, c2, c3.
Dialogue: 0,1:40:51.06,1:40:56.28,chinese,,0,0,0,,为了简洁起见，我在最后加了一个反斜杠 n，现在输入 c1、c2、c3。
Dialogue: 0,1:40:56.28,1:41:00.43,english,,0,0,0,,So this is like a char-based version of printing string.
Dialogue: 0,1:40:56.28,1:41:00.43,chinese,,0,0,0,,因此，这就像是基于字符的字符串打印版本。
Dialogue: 0,1:41:00.43,1:41:01.65,english,,0,0,0,,So let me make HI!
Dialogue: 0,1:41:00.43,1:41:01.65,chinese,,0,0,0,,所以，让我来介绍一下 HI！
Dialogue: 0,1:41:01.65,1:41:05.88,english,,0,0,0,,And then let me do ./hi, and it looks like I used printf with %s.
Dialogue: 0,1:41:01.65,1:41:05.88,chinese,,0,0,0,,然后让我做 ./hi，看起来我使用了带有 %s 的 printf。
Dialogue: 0,1:41:05.88,1:41:09.75,english,,0,0,0,,But I did things very manually by printing out each individual character.
Dialogue: 0,1:41:05.88,1:41:09.75,chinese,,0,0,0,,但我的做法是非常手工地打印出每个字符。
Dialogue: 0,1:41:09.75,1:41:16.56,english,,0,0,0,,What's cool now, though, is that once you know that characters are just numbers and strings are just characters, you can kind of poke around.
Dialogue: 0,1:41:09.75,1:41:16.56,chinese,,0,0,0,,不过，现在最酷的是，一旦你知道了字符只是数字，字符串只是字符，你就可以四处探索了。
Dialogue: 0,1:41:16.56,1:41:21.97,english,,0,0,0,,Let me change all three placeholders to %i instead.
Dialogue: 0,1:41:16.56,1:41:21.97,chinese,,0,0,0,,让我把这三个占位符都改成 %i。
Dialogue: 0,1:41:21.97,1:41:23.86,english,,0,0,0,,And this is totally fine, too.
Dialogue: 0,1:41:21.97,1:41:23.86,chinese,,0,0,0,,这也完全没问题。
Dialogue: 0,1:41:23.86,1:41:26.31,english,,0,0,0,,Let me rerun this, make hi.
Dialogue: 0,1:41:23.86,1:41:26.31,chinese,,0,0,0,,让我重播一下，打个招呼。
Dialogue: 0,1:41:26.31,1:41:31.57,english,,0,0,0,,Actually, let me make one change, just so we can see this.
Dialogue: 0,1:41:26.31,1:41:31.57,chinese,,0,0,0,,实际上，让我做一个改动，这样我们就能看到了。
Dialogue: 0,1:41:31.57,1:41:40.35,english,,0,0,0,,Let me add spaces, just for aesthetics sake, let me do make hi, ./hi, Enter, and voila, like now, you can actually see the numbers,
Dialogue: 0,1:41:31.57,1:41:40.35,chinese,,0,0,0,,让我加上空格，为了美观起见，让我输入 hi、./hi、回车，然后就像现在这样，你就能真正看到数字了、
Dialogue: 0,1:41:40.35,1:41:44.08,english,,0,0,0,,that I claimed back in week zero, were in fact happening underneath the hood.
Dialogue: 0,1:41:40.35,1:41:44.08,chinese,,0,0,0,,事实上，我在第零周时声称的"''......
Dialogue: 0,1:41:44.08,1:41:45.96,english,,0,0,0,,Well, this is not how you would make strings.
Dialogue: 0,1:41:44.08,1:41:45.96,chinese,,0,0,0,,嗯，这可不是你做琴弦的方法。
Dialogue: 0,1:41:45.96,1:41:50.79,english,,0,0,0,,It'd be incredibly tedious to have three variables for three letter words, five variables for five letter words.
Dialogue: 0,1:41:45.96,1:41:50.79,chinese,,0,0,0,,如果用三个变量来表示三个字母的单词，用五个变量来表示五个字母的单词，那就太乏味了。
Dialogue: 0,1:41:50.79,1:41:54.45,english,,0,0,0,,We've been using, of course, strings since last week, so let's do that instead.
Dialogue: 0,1:41:50.79,1:41:54.45,chinese,,0,0,0,,当然，我们从上周开始就一直在使用字符串，所以我们还是用字符串来代替吧。
Dialogue: 0,1:41:54.45,1:41:59.37,english,,0,0,0,,String s equals quote unquote, double quotes "HI!"
Dialogue: 0,1:41:54.45,1:41:59.37,chinese,,0,0,0,,字符串 s 等于引号未加引号，双引号 "HI!"
Dialogue: 0,1:41:59.37,1:42:02.52,english,,0,0,0,,For this, no, because of these training wheels,
Dialogue: 0,1:41:59.37,1:42:02.52,chinese,,0,0,0,,因为这个，不，是因为这些训练轮、
Dialogue: 0,1:42:02.52,1:42:04.56,english,,0,0,0,,I need to include the CS50 library.
Dialogue: 0,1:42:02.52,1:42:04.56,chinese,,0,0,0,,我需要加入 CS50 库。
Dialogue: 0,1:42:04.56,1:42:06.58,english,,0,0,0,,But we'll come back to that in the coming weeks.
Dialogue: 0,1:42:04.56,1:42:06.58,chinese,,0,0,0,,不过，未来几周我们会再讨论这个问题。
Dialogue: 0,1:42:06.58,1:42:10.53,english,,0,0,0,,But for now, I'm going to go ahead and create a string s called quote unquote,
Dialogue: 0,1:42:06.58,1:42:10.53,chinese,,0,0,0,,但现在，我要继续创建一个名为 quote unquote 的字符串、
Dialogue: 0,1:42:10.53,1:42:11.58,english,,0,0,0,,"HI!"
Dialogue: 0,1:42:11.58,1:42:17.61,english,,0,0,0,,And now I'm going to change this to be my familiar %s, and now just print out s itself.
Dialogue: 0,1:42:11.58,1:42:17.61,chinese,,0,0,0,,现在我要把它改成我熟悉的 %s，然后直接打印出 s 本身。
Dialogue: 0,1:42:17.61,1:42:24.75,english,,0,0,0,,This, of course, is the same thing as last week, ./hi, gives me the exact same thing, but now, we're dealing, of course, with strings.
Dialogue: 0,1:42:17.61,1:42:24.75,chinese,,0,0,0,,当然，这和上周的 ./hi 给我的结果是一样的，但现在我们要处理的当然是字符串。
Dialogue: 0,1:42:24.75,1:42:27.61,english,,0,0,0,,But how can we see a little beyond that?
Dialogue: 0,1:42:24.75,1:42:27.61,chinese,,0,0,0,,但是，我们如何才能看得更远一些呢？
Dialogue: 0,1:42:27.61,1:42:28.81,english,,0,0,0,,Well, how about this?
Dialogue: 0,1:42:27.61,1:42:28.81,chinese,,0,0,0,,这样如何？
Dialogue: 0,1:42:28.81,1:42:31.53,english,,0,0,0,,Let's poke around further with today's primitives.
Dialogue: 0,1:42:28.81,1:42:31.53,chinese,,0,0,0,,让我们进一步探索今天的原语。
Dialogue: 0,1:42:31.53,1:42:39.00,english,,0,0,0,,Even though s is a string, I could technically print out its first character with %c by doing s[0].
Dialogue: 0,1:42:31.53,1:42:39.00,chinese,,0,0,0,,尽管 s 是一个字符串，但从技术上讲，我可以通过执行 s[0]，用 %c 打印出它的第一个字符。
Dialogue: 0,1:42:39.00,1:42:43.11,english,,0,0,0,,I could technically print out its second character with %c by doing s[1].
Dialogue: 0,1:42:39.00,1:42:43.11,chinese,,0,0,0,,从技术上讲，我可以通过 s[1] 用 %c 打印出第二个字符。
Dialogue: 0,1:42:43.11,1:42:47.82,english,,0,0,0,,I could print out its third character with %c and printing out s[2].
Dialogue: 0,1:42:43.11,1:42:47.82,chinese,,0,0,0,,我可以用 %c 打印出第三个字符，并打印出 s[2]。
Dialogue: 0,1:42:47.82,1:42:52.77,english,,0,0,0,,So again, this just derives logically from my understanding now that strings are arrays, as you note.
Dialogue: 0,1:42:47.82,1:42:52.77,chinese,,0,0,0,,因此，正如你所指出的，这只是从我现在对字符串是数组的理解中逻辑地推导出来的。
Dialogue: 0,1:42:52.77,1:42:57.30,english,,0,0,0,,Let me do make-- let me do make hi, ./hi.
Dialogue: 0,1:42:52.77,1:42:57.30,chinese,,0,0,0,,让我做 - -让我做喜，./喜。
Dialogue: 0,1:42:57.30,1:43:00.76,english,,0,0,0,,And no visual change, but I'm just kind of now tinkering around.
Dialogue: 0,1:42:57.30,1:43:00.76,chinese,,0,0,0,,视觉上没有变化，但我现在正在修修补补。
Dialogue: 0,1:43:00.76,1:43:03.40,english,,0,0,0,,And in fact, if you're really curious, let me do this.
Dialogue: 0,1:43:00.76,1:43:03.40,chinese,,0,0,0,,事实上，如果你真的很好奇，让我来做这件事。
Dialogue: 0,1:43:03.40,1:43:08.25,english,,0,0,0,,Let me change these back to i, back to i-- oops, back to i.
Dialogue: 0,1:43:03.40,1:43:08.25,chinese,,0,0,0,,让我把这些改回 i，改回 i -- 哎呀，改回 i。
Dialogue: 0,1:43:08.25,1:43:14.49,english,,0,0,0,,And let me add a fourth one because if I'm really curious now, let's see what's in s[3].
Dialogue: 0,1:43:08.25,1:43:14.49,chinese,,0,0,0,,让我再加上第四个，因为我现在真的很好奇，让我们看看 s[3] 中有什么。
Dialogue: 0,1:43:14.49,1:43:16.02,english,,0,0,0,,This is the fourth byte.
Dialogue: 0,1:43:14.49,1:43:16.02,chinese,,0,0,0,,这是第四个字节。
Dialogue: 0,1:43:16.02,1:43:18.99,english,,0,0,0,,And even though the string itself is H-I,
Dialogue: 0,1:43:16.02,1:43:18.99,chinese,,0,0,0,,尽管字符串本身是 H-I、
Dialogue: 0,1:43:18.99,1:43:21.84,english,,0,0,0,,I think we can corroborate this whole null thing.
Dialogue: 0,1:43:18.99,1:43:21.84,chinese,,0,0,0,,我想我们可以证实整个无效的事情。
Dialogue: 0,1:43:21.84,1:43:26.24,english,,0,0,0,,Make hi, ./hi, Enter, and there it is.
Dialogue: 0,1:43:21.84,1:43:26.24,chinese,,0,0,0,,输入 hi、./hi、回车，就可以了。
Dialogue: 0,1:43:26.24,1:43:29.58,english,,0,0,0,,You could have done this last week, if you really wanted to geek out on strings.
Dialogue: 0,1:43:26.24,1:43:29.58,chinese,,0,0,0,,如果你真的想在弦乐上大显身手，上周就可以这样做了。
Dialogue: 0,1:43:29.58,1:43:33.06,english,,0,0,0,,But for now, it's just revealing what's going on underneath the hood.
Dialogue: 0,1:43:29.58,1:43:33.06,chinese,,0,0,0,,但现在，它只是揭示了引擎盖下的情况。
Dialogue: 0,1:43:33.06,1:43:36.48,english,,0,0,0,,Questions then, on what these strings are?
Dialogue: 0,1:43:33.06,1:43:36.48,chinese,,0,0,0,,那么，这些字符串是什么呢？
Dialogue: 0,1:43:36.48,1:43:37.49,english,,0,0,0,,Yeah?
Dialogue: 0,1:43:37.49,1:43:41.29,english,,0,0,0,,AUDIENCE: [INAUDIBLE]
Dialogue: 0,1:43:41.29,1:43:42.96,english,,0,0,0,,DAVID MALAN: Why do we need the bracket?
Dialogue: 0,1:43:41.29,1:43:42.96,chinese,,0,0,0,,大卫-马兰：我们为什么需要支架？
Dialogue: 0,1:43:42.96,1:43:45.43,english,,0,0,0,,AUDIENCE: [INAUDIBLE]
Dialogue: 0,1:43:45.43,1:43:47.18,english,,0,0,0,,DAVID MALAN: Why do you not need brackets?
Dialogue: 0,1:43:45.43,1:43:47.18,chinese,,0,0,0,,大卫-马兰：为什么不需要支架？
Dialogue: 0,1:43:47.18,1:43:47.78,english,,0,0,0,,Good question.
Dialogue: 0,1:43:47.18,1:43:47.78,chinese,,0,0,0,,问得好。
Dialogue: 0,1:43:47.78,1:43:51.62,english,,0,0,0,,Why do I not need brackets on line 6?
Dialogue: 0,1:43:47.78,1:43:51.62,chinese,,0,0,0,,为什么第 6 行不需要括号？
Dialogue: 0,1:43:51.62,1:43:53.30,english,,0,0,0,,Because s is a string.
Dialogue: 0,1:43:51.62,1:43:53.30,chinese,,0,0,0,,因为 s 是一个字符串。
Dialogue: 0,1:43:53.30,1:44:02.24,english,,0,0,0,,We'll see in a couple of weeks that s is, essentially, implemented underneath the hood, indeed, as an array, but that happens automatically for you.
Dialogue: 0,1:43:53.30,1:44:02.24,chinese,,0,0,0,,我们将在几周后看到，s 本质上是作为一个数组在引擎盖下实现的，但它会自动为你实现。
Dialogue: 0,1:44:02.24,1:44:06.80,english,,0,0,0,,You can treat s as just a variable name without square brackets.
Dialogue: 0,1:44:02.24,1:44:06.80,chinese,,0,0,0,,您可以将 s 仅作为变量名处理，而不去掉方括号。
Dialogue: 0,1:44:06.80,1:44:13.73,english,,0,0,0,,You will use square brackets when you have arrays of ints or you manually create arrays of chars or doubles or floats or anything else.
Dialogue: 0,1:44:06.80,1:44:13.73,chinese,,0,0,0,,在使用 int 数组或手动创建字符数组、双倍数组、浮点数组或其他数组时，需要使用方括号。
Dialogue: 0,1:44:13.73,1:44:14.90,english,,0,0,0,,But strings are special.
Dialogue: 0,1:44:13.73,1:44:14.90,chinese,,0,0,0,,但琴弦很特别。
Dialogue: 0,1:44:14.90,1:44:15.44,english,,0,0,0,,Why?
Dialogue: 0,1:44:15.44,1:44:19.19,english,,0,0,0,,I mean, every program you write seems to use strings, text in some form.
Dialogue: 0,1:44:15.44,1:44:19.19,chinese,,0,0,0,,我的意思是，你写的每个程序似乎都在使用字符串和某种形式的文本。
Dialogue: 0,1:44:19.19,1:44:21.93,english,,0,0,0,,We're humans we like text, not just numbers and such.
Dialogue: 0,1:44:19.19,1:44:21.93,chinese,,0,0,0,,我们是人类，我们喜欢文字，而不仅仅是数字之类的东西。
Dialogue: 0,1:44:21.93,1:44:28.58,english,,0,0,0,,So this is just treated a little specially in C and many other languages as well.
Dialogue: 0,1:44:21.93,1:44:28.58,chinese,,0,0,0,,因此，在 C 语言和许多其他语言中，这种处理方式都有些特殊。
Dialogue: 0,1:44:28.58,1:44:31.17,english,,0,0,0,,Other questions on this here?
Dialogue: 0,1:44:28.58,1:44:31.17,chinese,,0,0,0,,还有其他问题吗？
Dialogue: 0,1:44:31.17,1:44:31.67,english,,0,0,0,,No?
Dialogue: 0,1:44:31.67,1:44:33.53,english,,0,0,0,,Let's add then, one other string to the mix.
Dialogue: 0,1:44:31.67,1:44:33.53,chinese,,0,0,0,,那么，让我们再加上一根弦。
Dialogue: 0,1:44:33.53,1:44:38.66,english,,0,0,0,,So instead of just saying, HI!, why don't we consider a version of the program that says both, HI! and BYE!.
Dialogue: 0,1:44:33.53,1:44:38.66,chinese,,0,0,0,,因此，与其只说："你好！"，我们为什么不考虑推出一个同时说 "你好！"和 "再见！"的程序版本呢？
Dialogue: 0,1:44:38.66,1:44:48.57,english,,0,0,0,,And I claim now that that backslash zero, that null character is going to be ever more important now if we've got two strings in memory, so that C knows how to distinguish one from the other.
Dialogue: 0,1:44:38.66,1:44:48.57,chinese,,0,0,0,,我现在认为，如果内存中有两个字符串，那么反斜杠 0 字符、空字符就会变得越来越重要，这样 C 语言就知道如何区分这两个字符串。
Dialogue: 0,1:44:48.57,1:44:51.48,english,,0,0,0,,So let me go ahead and just get rid of these two lines for the moment.
Dialogue: 0,1:44:48.57,1:44:51.48,chinese,,0,0,0,,所以，让我先把这两行去掉吧。
Dialogue: 0,1:44:51.48,1:44:55.43,english,,0,0,0,,Let me recreate string s equals, quote unquote double quotes, "HI!"
Dialogue: 0,1:44:51.48,1:44:55.43,chinese,,0,0,0,,让我重现字符串 s 的等号，引号不含双引号，"HI！"
Dialogue: 0,1:44:55.43,1:44:56.78,english,,0,0,0,,Let me give myself another one.
Dialogue: 0,1:44:55.43,1:44:56.78,chinese,,0,0,0,,让我再给自己来一次。
Dialogue: 0,1:44:56.78,1:44:59.90,english,,0,0,0,,And because I'm just playing around, I'll choose very short variable names.
Dialogue: 0,1:44:56.78,1:44:59.90,chinese,,0,0,0,,因为我只是随便玩玩，所以我会选择非常简短的变量名。
Dialogue: 0,1:44:59.90,1:45:04.41,english,,0,0,0,,String t equals quote unquote, "BYE!"
Dialogue: 0,1:44:59.90,1:45:04.41,chinese,,0,0,0,,字符串 t 等于引号加引号，"再见！"
Dialogue: 0,1:45:04.41,1:45:06.47,english,,0,0,0,,And then let me just print them both out.
Dialogue: 0,1:45:04.41,1:45:06.47,chinese,,0,0,0,,然后让我把它们都打印出来。
Dialogue: 0,1:45:06.47,1:45:16.91,english,,0,0,0,,Let me go ahead and print out %s, backslash n, comma s, and then printf %s backslash n, and then t.
Dialogue: 0,1:45:06.47,1:45:16.91,chinese,,0,0,0,,让我继续打印 %s、反斜杠 n、逗号 s，然后 printf %s 反斜杠 n，再打印 t。
Dialogue: 0,1:45:16.91,1:45:19.97,english,,0,0,0,,So very simple demonstration of just these two variables.
Dialogue: 0,1:45:16.91,1:45:19.97,chinese,,0,0,0,,因此，只需对这两个变量进行非常简单的演示。
Dialogue: 0,1:45:19.97,1:45:26.09,english,,0,0,0,,Make hi, ./hi, and of course, it prints out two lines, one after the other.
Dialogue: 0,1:45:19.97,1:45:26.09,chinese,,0,0,0,,输入 hi、./hi，当然会打印出两行，一行紧接着一行。
Dialogue: 0,1:45:26.09,1:45:27.98,english,,0,0,0,,What's actually going on underneath the hood?
Dialogue: 0,1:45:26.09,1:45:27.98,chinese,,0,0,0,,引擎盖下面究竟发生了什么？
Dialogue: 0,1:45:27.98,1:45:29.51,english,,0,0,0,,Well, let's go back to the computer's memory.
Dialogue: 0,1:45:27.98,1:45:29.51,chinese,,0,0,0,,好吧，让我们回到电脑内存。
Dialogue: 0,1:45:29.51,1:45:32.16,english,,0,0,0,,HI!, I think, is going to be, I claim, pretty much the same.
Dialogue: 0,1:45:29.51,1:45:32.16,chinese,,0,0,0,,HI！"，我想，我声称，情况会大致相同。
Dialogue: 0,1:45:32.16,1:45:36.17,english,,0,0,0,,So s, I'll claim, is in the top left, followed by the backslash zero.
Dialogue: 0,1:45:32.16,1:45:36.17,chinese,,0,0,0,,因此，我认为 s 位于左上方，后面是反斜杠 0。
Dialogue: 0,1:45:36.17,1:45:40.03,english,,0,0,0,,And that's important now because BYE! probably is going to end up there.
Dialogue: 0,1:45:36.17,1:45:40.03,chinese,,0,0,0,,现在这一点很重要，因为《再见！》很可能会在那里结束。
Dialogue: 0,1:45:40.03,1:45:44.33,english,,0,0,0,,And visually, it wraps just by nature of how I've drawn this grid of bytes, but it's contiguous.
Dialogue: 0,1:45:40.03,1:45:44.33,chinese,,0,0,0,,从视觉上看，我绘制的这个字节网格可以将其包裹起来，但它是连续的。
Dialogue: 0,1:45:44.33,1:45:58.58,english,,0,0,0,,B-Y-E-! null, A.K.A. backslash zero, this is now helpful to printf because now printf knows where one begins and ends by way of that special null character.
Dialogue: 0,1:45:44.33,1:45:58.58,chinese,,0,0,0,,B-Y-E-！空，又名反斜线零，现在对 printf 很有帮助，因为通过这个特殊的空字符，printf 可以知道一个人从哪里开始，在哪里结束。
Dialogue: 0,1:45:58.58,1:46:00.23,english,,0,0,0,,But we can poke around now, too.
Dialogue: 0,1:45:58.58,1:46:00.23,chinese,,0,0,0,,但我们现在也可以四处看看。
Dialogue: 0,1:46:00.23,1:46:01.62,english,,0,0,0,,What else can I do here?
Dialogue: 0,1:46:00.23,1:46:01.62,chinese,,0,0,0,,我还能在这里做什么？
Dialogue: 0,1:46:01.62,1:46:02.84,english,,0,0,0,,How about this?
Dialogue: 0,1:46:01.62,1:46:02.84,chinese,,0,0,0,,这样如何？
Dialogue: 0,1:46:02.84,1:46:15.41,english,,0,0,0,,How about I go into my code here, back to VS code, and let me go ahead and say something like, well, if I've got two of these strings, you know, let's put them in an array.
Dialogue: 0,1:46:02.84,1:46:15.41,chinese,,0,0,0,,我在这里输入我的代码，回到 VS 代码，让我继续说，好吧，如果我有两个这样的字符串，你知道，让我们把它们放到一个数组中。
Dialogue: 0,1:46:15.41,1:46:20.52,english,,0,0,0,,Let's kind of do this sort of arrays in arrays, sort of inception-style here.
Dialogue: 0,1:46:15.41,1:46:20.52,chinese,,0,0,0,,让我们用数组中的数组的方式，在这里进行初创式的排序。
Dialogue: 0,1:46:20.52,1:46:23.06,english,,0,0,0,,So string words[2].
Dialogue: 0,1:46:20.52,1:46:23.06,chinese,,0,0,0,,So string words[2].
Dialogue: 0,1:46:23.06,1:46:25.10,english,,0,0,0,,So give me an array of two strings is what
Dialogue: 0,1:46:23.06,1:46:25.10,chinese,,0,0,0,,所以，给我一个包含两个字符串的数组就是
Dialogue: 0,1:46:25.10,1:46:28.10,english,,0,0,0,,I'm saying here in code, even though we've not done it with strings yet.
Dialogue: 0,1:46:25.10,1:46:28.10,chinese,,0,0,0,,虽然我们还没有使用字符串，但我在这里说的是代码。
Dialogue: 0,1:46:28.10,1:46:29.27,english,,0,0,0,,We only did it with ints.
Dialogue: 0,1:46:28.10,1:46:29.27,chinese,,0,0,0,,我们只用 ints 做过。
Dialogue: 0,1:46:29.27,1:46:30.77,english,,0,0,0,,And now let me do this.
Dialogue: 0,1:46:29.27,1:46:30.77,chinese,,0,0,0,,现在让我来做这件事。
Dialogue: 0,1:46:30.77,1:46:35.48,english,,0,0,0,,The first word A.K.A. words[0] will equal, as before, HI!
Dialogue: 0,1:46:30.77,1:46:35.48,chinese,,0,0,0,,第一个单词又名 words[0] 和之前一样，等于 HI！
Dialogue: 0,1:46:35.48,1:46:40.94,english,,0,0,0,,And now words[1] will equal quote unquote, "BYE!"
Dialogue: 0,1:46:35.48,1:46:40.94,chinese,,0,0,0,,现在的话[1] 就等于引号不加引号的 "再见！"
Dialogue: 0,1:46:40.94,1:46:48.65,english,,0,0,0,,And now I've done the exact same thing, but again, I'm just avoiding having s, t, q, r, and all these different variables in my code.
Dialogue: 0,1:46:40.94,1:46:48.65,chinese,,0,0,0,,现在我做了完全相同的事情，但同样，我只是避免在代码中出现 s、t、q、r 和所有这些不同的变量。
Dialogue: 0,1:46:48.65,1:46:52.79,english,,0,0,0,,I just now am treating them as one single array of strings.
Dialogue: 0,1:46:48.65,1:46:52.79,chinese,,0,0,0,,我现在只是把它们当作一个字符串数组。
Dialogue: 0,1:46:52.79,1:46:54.75,english,,0,0,0,,How do I change my code down here?
Dialogue: 0,1:46:52.79,1:46:54.75,chinese,,0,0,0,,如何更改下面的代码？
Dialogue: 0,1:46:54.75,1:46:57.38,english,,0,0,0,,Well, if I want to print the first word, I do words[0].
Dialogue: 0,1:46:54.75,1:46:57.38,chinese,,0,0,0,,好吧，如果我想打印第一个单词，我会打印 words[0]。
Dialogue: 0,1:46:57.38,1:46:59.90,english,,0,0,0,,And if I want to print the second word, I do words[1].
Dialogue: 0,1:46:57.38,1:46:59.90,chinese,,0,0,0,,如果我想打印第二个单词，我会打印 words[1]。
Dialogue: 0,1:46:59.90,1:47:04.13,english,,0,0,0,,This is not a useful exercise at the moment because I'm just making my code more complicated.
Dialogue: 0,1:46:59.90,1:47:04.13,chinese,,0,0,0,,目前这不是一个有用的练习，因为我只是在让我的代码变得更复杂。
Dialogue: 0,1:47:04.13,1:47:09.53,english,,0,0,0,,But again, it allows us to poke around and see what's going on because there is that HI! and BYE!.
Dialogue: 0,1:47:04.13,1:47:09.53,chinese,,0,0,0,,但同样，这也让我们可以四处打探，看看发生了什么，因为这里有 HI！和 BYE！。
Dialogue: 0,1:47:09.53,1:47:10.70,english,,0,0,0,,But watch this.
Dialogue: 0,1:47:09.53,1:47:10.70,chinese,,0,0,0,,但请注意
Dialogue: 0,1:47:10.70,1:47:14.67,english,,0,0,0,,If I really want to be cool, I can do this.
Dialogue: 0,1:47:10.70,1:47:14.67,chinese,,0,0,0,,如果我真的想变酷，我可以做到这一点。
Dialogue: 0,1:47:14.67,1:47:25.70,english,,0,0,0,,Let's print out %c, %c, %c, backslash n, and then here, %c, %c, %c, %c, so four of those.
Dialogue: 0,1:47:14.67,1:47:25.70,chinese,,0,0,0,,让我们打印出 %c、%c、%c、反斜杠 n，然后在这里打印出 %c、%c、%c、%c，这样就有四个了。
Dialogue: 0,1:47:25.70,1:47:28.43,english,,0,0,0,,And now here's where things get interesting.
Dialogue: 0,1:47:25.70,1:47:28.43,chinese,,0,0,0,,现在，事情变得有趣了。
Dialogue: 0,1:47:28.43,1:47:30.62,english,,0,0,0,,Words is an array of strings.
Dialogue: 0,1:47:28.43,1:47:30.62,chinese,,0,0,0,,Words 是一个字符串数组。
Dialogue: 0,1:47:30.62,1:47:33.40,english,,0,0,0,,Again, if I may, what's a string?
Dialogue: 0,1:47:30.62,1:47:33.40,chinese,,0,0,0,,请允许我再问一次，什么是字符串？
Dialogue: 0,1:47:33.40,1:47:35.06,english,,0,0,0,,An array of characters.
Dialogue: 0,1:47:33.40,1:47:35.06,chinese,,0,0,0,,字符数组。
Dialogue: 0,1:47:35.06,1:47:36.79,english,,0,0,0,,So just use the same logic.
Dialogue: 0,1:47:35.06,1:47:36.79,chinese,,0,0,0,,所以，就用同样的逻辑吧。
Dialogue: 0,1:47:36.79,1:47:41.11,english,,0,0,0,,If words is an array of strings, you get at the first string with words[0].
Dialogue: 0,1:47:36.79,1:47:41.11,chinese,,0,0,0,,如果 words 是字符串数组，则用 words[0] 取得第一个字符串。
Dialogue: 0,1:47:41.11,1:47:44.53,english,,0,0,0,,How do you get at the first character in the first string?
Dialogue: 0,1:47:41.11,1:47:44.53,chinese,,0,0,0,,如何获取第一个字符串中的第一个字符？
Dialogue: 0,1:47:44.53,1:47:52.15,english,,0,0,0,,Bracket 0, words[0][1], and lastly, words[0][2].
Dialogue: 0,1:47:44.53,1:47:52.15,chinese,,0,0,0,,括号 0、words[0][1]，最后是 words[0][2]。
Dialogue: 0,1:47:52.15,1:47:57.46,english,,0,0,0,,And now down here, words[1], but the first character is there.
Dialogue: 0,1:47:52.15,1:47:57.46,chinese,,0,0,0,,现在这里是 words[1]，但第一个字符就在这里。
Dialogue: 0,1:47:57.46,1:48:00.40,english,,0,0,0,,Word[1], the second character is here.
Dialogue: 0,1:47:57.46,1:48:00.40,chinese,,0,0,0,,单词[1]，第二个字符在这里。
Dialogue: 0,1:48:00.40,1:48:04.72,english,,0,0,0,,Words[1], the third character is here-- whoops-- third character's here.
Dialogue: 0,1:48:00.40,1:48:04.72,chinese,,0,0,0,,Words[1]，第三个字符在这里--哎呀--第三个字符在这里。
Dialogue: 0,1:48:04.72,1:48:07.89,english,,0,0,0,,And words[1], the fourth character is here.
Dialogue: 0,1:48:04.72,1:48:07.89,chinese,,0,0,0,,第四个字符是 words[1]。
Dialogue: 0,1:48:07.89,1:48:09.19,english,,0,0,0,,This is not how people program.
Dialogue: 0,1:48:07.89,1:48:09.19,chinese,,0,0,0,,人们不是这样编程的。
Dialogue: 0,1:48:09.19,1:48:10.84,english,,0,0,0,,This is only for demonstrations sake.
Dialogue: 0,1:48:09.19,1:48:10.84,chinese,,0,0,0,,这只是为了演示。
Dialogue: 0,1:48:10.84,1:48:13.06,english,,0,0,0,,My God, it's so tedious and verbose already.
Dialogue: 0,1:48:10.84,1:48:13.06,chinese,,0,0,0,,我的天哪，已经如此乏味和啰嗦了。
Dialogue: 0,1:48:13.06,1:48:22.99,english,,0,0,0,,But if I make hi now, ./hi, now, I'm manually reinventing %s, if I forgot it existed, using %c alone.
Dialogue: 0,1:48:13.06,1:48:22.99,chinese,,0,0,0,,但是，如果我现在制作 hi、./hi，如果我忘记了 %s 的存在，我就需要手动重新制作 %s，只使用 %c。
Dialogue: 0,1:48:22.99,1:48:25.90,english,,0,0,0,,But you can indeed manipulate arrays in this way.
Dialogue: 0,1:48:22.99,1:48:25.90,chinese,,0,0,0,,但你确实可以用这种方法来操作数组。
Dialogue: 0,1:48:25.90,1:48:32.20,english,,0,0,0,,But because strings are arrays of characters, you can manipulate strings in this way too.
Dialogue: 0,1:48:25.90,1:48:32.20,chinese,,0,0,0,,但是，由于字符串是字符数组，因此也可以用这种方式操作字符串。
Dialogue: 0,1:48:32.20,1:48:34.67,english,,0,0,0,,Any question now on this syntax?
Dialogue: 0,1:48:32.20,1:48:34.67,chinese,,0,0,0,,现在对这个语法还有疑问吗？
Dialogue: 0,1:48:37.21,1:48:38.80,english,,0,0,0,,Any questions here?
Dialogue: 0,1:48:37.21,1:48:38.80,chinese,,0,0,0,,有问题吗？
Dialogue: 0,1:48:38.80,1:48:39.97,english,,0,0,0,,No?
Dialogue: 0,1:48:39.97,1:48:45.83,english,,0,0,0,,All right, well, let's go ahead and propose that we solve a couple of other problems we might not have as before.
Dialogue: 0,1:48:39.97,1:48:45.83,chinese,,0,0,0,,好吧，让我们继续提议，解决其他几个我们可能没有的问题。
Dialogue: 0,1:48:45.83,1:48:49.15,english,,0,0,0,,But first, a quick visual of what's been going on underneath the hood here.
Dialogue: 0,1:48:45.83,1:48:49.15,chinese,,0,0,0,,但首先，我们要快速了解一下引擎盖下面发生了什么。
Dialogue: 0,1:48:49.15,1:49:00.88,english,,0,0,0,,If here, again, is where we left off on the screen, HI! and BYE! back to back, here is really how I just treated these things. s bracket 0, 1, 2, 3 and then t 0, 1, 2, 3, 4.
Dialogue: 0,1:48:49.15,1:49:00.88,chinese,,0,0,0,,如果这里又是我们在屏幕上离开的地方，HI！和 BYE！背靠背，这里就是我刚才处理这些东西的方式。S 括 0、1、2、3，然后是 T 0、1、2、3、4。
Dialogue: 0,1:49:00.88,1:49:04.84,english,,0,0,0,,But really, once I put them in an array, the picture becomes this.
Dialogue: 0,1:49:00.88,1:49:04.84,chinese,,0,0,0,,但实际上，一旦我把它们放入一个数组，画面就会变成这样。
Dialogue: 0,1:49:04.84,1:49:07.03,english,,0,0,0,,Words[0] is the whole HI!.
Dialogue: 0,1:49:04.84,1:49:07.03,chinese,,0,0,0,,Words[0] 是整个 HI!
Dialogue: 0,1:49:07.03,1:49:08.68,english,,0,0,0,,Words[1] is the whole BYE!.
Dialogue: 0,1:49:07.03,1:49:08.68,chinese,,0,0,0,,Words[1] 是整个 BYE！。
Dialogue: 0,1:49:08.68,1:49:20.71,english,,0,0,0,,But if I really get into the weeds and start indexing into individual characters in those strings, all I'm using is new syntax in order to represent these same values here.
Dialogue: 0,1:49:08.68,1:49:20.71,chinese,,0,0,0,,但是，如果我真的深入其中，开始对这些字符串中的单个字符进行索引，我所使用的只是新的语法，以便在这里表示这些相同的值。
Dialogue: 0,1:49:20.71,1:49:28.71,english,,0,0,0,,Questions then, on these representations before we forge ahead?
Dialogue: 0,1:49:20.71,1:49:28.71,chinese,,0,0,0,,那么，在我们继续前进之前，对这些陈述有什么疑问？
Dialogue: 0,1:49:28.71,1:49:29.43,english,,0,0,0,,No?
Dialogue: 0,1:49:29.43,1:49:30.03,english,,0,0,0,,Yeah?
Dialogue: 0,1:49:30.03,1:49:33.39,english,,0,0,0,,AUDIENCE: Does the new line character not [INAUDIBLE]??
Dialogue: 0,1:49:30.03,1:49:33.39,chinese,,0,0,0,,听众：新的行字符不[听不清]吗？
Dialogue: 0,1:49:33.39,1:49:36.03,english,,0,0,0,,DAVID MALAN: Does the new line character-- say that once more?
Dialogue: 0,1:49:33.39,1:49:36.03,chinese,,0,0,0,,
Dialogue: 0,1:49:36.03,1:49:38.59,english,,0,0,0,,AUDIENCE: Does the new line character take up any space?
Dialogue: 0,1:49:36.03,1:49:38.59,chinese,,0,0,0,,听众：新行字符是否占用空间？
Dialogue: 0,1:49:38.59,1:49:40.18,english,,0,0,0,,DAVID MALAN: Ah, really good question.
Dialogue: 0,1:49:38.59,1:49:40.18,chinese,,0,0,0,,大卫-马兰：啊，真是个好问题。
Dialogue: 0,1:49:40.18,1:49:42.73,english,,0,0,0,,Does the new line character take up any space?
Dialogue: 0,1:49:40.18,1:49:42.73,chinese,,0,0,0,,新行字符是否占用空间？
Dialogue: 0,1:49:42.73,1:49:45.34,english,,0,0,0,,It does, so far as printf is concerned.
Dialogue: 0,1:49:42.73,1:49:45.34,chinese,,0,0,0,,就 printf 而言，确实如此。
Dialogue: 0,1:49:45.34,1:49:53.46,english,,0,0,0,,But I'm not storing the backslash n in my strings, printf is being manually handed that thing instead.
Dialogue: 0,1:49:45.34,1:49:53.46,chinese,,0,0,0,,但我并没有在字符串中存储反斜线 n，而是由 printf 手动将其交给我。
Dialogue: 0,1:49:53.46,1:50:00.68,english,,0,0,0,,All right, so let's go ahead then and consider how we might solve some problems that have arisen now with these strings, as follows here.
Dialogue: 0,1:49:53.46,1:50:00.68,chinese,,0,0,0,,好吧，那么让我们继续考虑如何解决这些字符串现在出现的一些问题，如下所示。
Dialogue: 0,1:50:00.68,1:50:02.76,english,,0,0,0,,Suppose I-- let's do this.
Dialogue: 0,1:50:00.68,1:50:02.76,chinese,,0,0,0,,假设我... 我们开始吧
Dialogue: 0,1:50:02.76,1:50:04.40,english,,0,0,0,,Let me go back to VS Code here.
Dialogue: 0,1:50:02.76,1:50:04.40,chinese,,0,0,0,,让我回到《VS 代码》这里。
Dialogue: 0,1:50:04.40,1:50:09.98,english,,0,0,0,,And let me go ahead and open up a new file called, how about, length.c.
Dialogue: 0,1:50:04.40,1:50:09.98,chinese,,0,0,0,,让我继续打开一个名为 length.c 的新文件。
Dialogue: 0,1:50:09.98,1:50:16.13,english,,0,0,0,,And let's consider for a moment how I might actually figure out what the length of a string is, which is distinct from the length of an array.
Dialogue: 0,1:50:09.98,1:50:16.13,chinese,,0,0,0,,让我们先考虑一下，我如何才能算出字符串的长度，这与数组的长度是不同的。
Dialogue: 0,1:50:16.13,1:50:20.18,english,,0,0,0,,I claimed earlier, you cannot figure out dynamically what the length of an array is.
Dialogue: 0,1:50:16.13,1:50:20.18,chinese,,0,0,0,,我之前说过，你无法动态计算数组的长度。
Dialogue: 0,1:50:20.18,1:50:26.96,english,,0,0,0,,But I can figure out the length of a string, specifically, because of this implementation detail of that null character.
Dialogue: 0,1:50:20.18,1:50:26.96,chinese,,0,0,0,,但我能计算出字符串的长度，特别是因为这个空字符的实现细节。
Dialogue: 0,1:50:26.96,1:50:28.50,english,,0,0,0,,So let me go ahead and do this.
Dialogue: 0,1:50:26.96,1:50:28.50,chinese,,0,0,0,,所以，让我来做这件事吧。
Dialogue: 0,1:50:28.50,1:50:31.94,english,,0,0,0,,Let me include cs50.h in this second program here.
Dialogue: 0,1:50:28.50,1:50:31.94,chinese,,0,0,0,,让我在第二个程序中加入 cs50.h。
Dialogue: 0,1:50:31.94,1:50:35.09,english,,0,0,0,,Let me include stdio.h, as before.
Dialogue: 0,1:50:31.94,1:50:35.09,chinese,,0,0,0,,和之前一样，让我加入 stdio.h。
Dialogue: 0,1:50:35.09,1:50:40.97,english,,0,0,0,,And let me do this, int main void-- and the first thing I'll do is just get a string from the user.
Dialogue: 0,1:50:35.09,1:50:40.97,chinese,,0,0,0,,让我这样做， int main void -- 我要做的第一件事就是从用户那里获取一个字符串。
Dialogue: 0,1:50:40.97,1:50:43.25,english,,0,0,0,,I'll ask the user, as always, for their name.
Dialogue: 0,1:50:40.97,1:50:43.25,chinese,,0,0,0,,我会一如既往地询问用户的姓名。
Dialogue: 0,1:50:43.25,1:50:48.17,english,,0,0,0,,So I'll call getString, and say, what's your name, question mark, as always.
Dialogue: 0,1:50:43.25,1:50:48.17,chinese,,0,0,0,,因此，我会调用 getString，然后说，你叫什么名字，问号，一如既往。
Dialogue: 0,1:50:48.17,1:50:58.46,english,,0,0,0,,And then down here, if I want to figure out the length of this string and print the length out on the screen, well, I can kind of do this similar in spirit to the average,
Dialogue: 0,1:50:48.17,1:50:58.46,chinese,,0,0,0,,然后，如果我想计算出这个字符串的长度，并在屏幕上打印出来，那么我就可以用类似平均值的方法来计算、
Dialogue: 0,1:50:58.46,1:50:59.84,english,,0,0,0,,where I'm accumulating something.
Dialogue: 0,1:50:58.46,1:50:59.84,chinese,,0,0,0,,在那里我积累了一些东西。
Dialogue: 0,1:50:59.84,1:51:02.60,english,,0,0,0,,Let me go ahead and initialize N to 0.
Dialogue: 0,1:50:59.84,1:51:02.60,chinese,,0,0,0,,让我把 N 初始化为 0。
Dialogue: 0,1:51:02.60,1:51:07.03,english,,0,0,0,,Let me give myself-- it's not a for loop because I don't have a--
Dialogue: 0,1:51:02.60,1:51:07.03,chinese,,0,0,0,,让我给自己 - 这不是一个循环，因为我没有 -
Dialogue: 0,1:51:07.03,1:51:08.66,english,,0,0,0,,I don't know in advance how long it is.
Dialogue: 0,1:51:07.03,1:51:08.66,chinese,,0,0,0,,我事先不知道时间有多长。
Dialogue: 0,1:51:08.66,1:51:09.98,english,,0,0,0,,But what if I do this?
Dialogue: 0,1:51:08.66,1:51:09.98,chinese,,0,0,0,,但如果我这样做呢？
Dialogue: 0,1:51:09.98,1:51:25.59,english,,0,0,0,,While the value at name[n] does not equal '/0'-- crazy syntax at the moment, but it's just the culmination of these various building blocks.
Dialogue: 0,1:51:09.98,1:51:25.59,chinese,,0,0,0,,虽然 name[n] 的值不等于'/0'--目前的语法很疯狂，但它只是这些不同构件的顶点。
Dialogue: 0,1:51:25.59,1:51:28.97,english,,0,0,0,,Let me just finish the thought here, n++.
Dialogue: 0,1:51:25.59,1:51:28.97,chinese,,0,0,0,,让我在这里把想法说完，n++。
Dialogue: 0,1:51:28.97,1:51:43.22,english,,0,0,0,,And then down here, let's just print out, with printf and %i, that value of N. So I claim this is going to show me the length of any string I type in, whether it's hi or bye or David or anything else.
Dialogue: 0,1:51:28.97,1:51:43.22,chinese,,0,0,0,,然后，在下面用 printf 和 %i 打印出 N 的值。我声称这将显示我输入的任何字符串的长度，无论是 hi、bye 还是 David 或其他任何字符串。
Dialogue: 0,1:51:43.22,1:51:47.53,english,,0,0,0,,I initialize a variable to zero, and that's good because that's where you start counting in general.
Dialogue: 0,1:51:43.22,1:51:47.53,chinese,,0,0,0,,我将一个变量初始化为零，这很好，因为一般来说，你就是从这里开始计数的。
Dialogue: 0,1:51:47.53,1:51:50.99,english,,0,0,0,,While name[0] does not equal backslash zero.
Dialogue: 0,1:51:47.53,1:51:50.99,chinese,,0,0,0,,而 name[0] 不等于反斜杠 0。
Dialogue: 0,1:51:50.99,1:51:51.93,english,,0,0,0,,What is this saying?
Dialogue: 0,1:51:50.99,1:51:51.93,chinese,,0,0,0,,这是什么意思？
Dialogue: 0,1:51:51.93,1:51:59.39,english,,0,0,0,,Well, if name is the string the user typed in-- and name is just an array, as you noted-- the name[0] is going to be the first character.
Dialogue: 0,1:51:51.93,1:51:59.39,chinese,,0,0,0,,如果 name 是用户输入的字符串，而 name 又是一个数组，那么 name[0] 将是第一个字符。
Dialogue: 0,1:51:59.39,1:52:03.68,english,,0,0,0,,And I'm asking the question, well, does the first character not equal backslash zero?
Dialogue: 0,1:51:59.39,1:52:03.68,chinese,,0,0,0,,我想问的是，第一个字符不等于反斜杠 0 吗？
Dialogue: 0,1:52:03.68,1:52:08.75,english,,0,0,0,,And if I type in David, D, it's not, so I keep going and I add 1 to N.
Dialogue: 0,1:52:03.68,1:52:08.75,chinese,,0,0,0,,如果我输入大卫，D，就不是了，所以我继续输入，然后在 N 后面加 1。
Dialogue: 0,1:52:08.75,1:52:10.75,english,,0,0,0,,Then I'm going to check name[1].
Dialogue: 0,1:52:08.75,1:52:10.75,chinese,,0,0,0,,然后我要检查 name[1]。
Dialogue: 0,1:52:10.75,1:52:13.89,english,,0,0,0,,Well, if I typed in David, name[1] is going to be A.
Dialogue: 0,1:52:10.75,1:52:13.89,chinese,,0,0,0,,那么，如果我输入 David，name[1] 就会是 A。
Dialogue: 0,1:52:13.89,1:52:18.74,english,,0,0,0,,A does not equal backslash zero, and so it's going to go again and again and again.
Dialogue: 0,1:52:13.89,1:52:18.74,chinese,,0,0,0,,A 不等于反斜杠 0，因此会反复出现。
Dialogue: 0,1:52:18.74,1:52:23.09,english,,0,0,0,,But five steps in total later, it's going to get to the byte after
Dialogue: 0,1:52:18.74,1:52:23.09,chinese,,0,0,0,,但总共五步之后，它就会到达字节。
Dialogue: 0,1:52:23.09,1:52:26.48,english,,0,0,0,,D-A-V-I-D, realize, wait a minute, that is a backslash n.
Dialogue: 0,1:52:23.09,1:52:26.48,chinese,,0,0,0,,D-A-V-I-D，等一下，那是反斜杠 N。
Dialogue: 0,1:52:26.48,1:52:29.75,english,,0,0,0,,The loop finishes, and I print out the total length.
Dialogue: 0,1:52:26.48,1:52:29.75,chinese,,0,0,0,,循环结束，我打印出总长度。
Dialogue: 0,1:52:29.75,1:52:33.05,english,,0,0,0,,Arrays, in general, do not have this null character.
Dialogue: 0,1:52:29.75,1:52:33.05,chinese,,0,0,0,,一般来说，数组没有空字符。
Dialogue: 0,1:52:33.05,1:52:34.91,english,,0,0,0,,However, strings do.
Dialogue: 0,1:52:33.05,1:52:34.91,chinese,,0,0,0,,然而，字符串确实如此。
Dialogue: 0,1:52:34.91,1:52:39.59,english,,0,0,0,,Again, strings are special versus all of the other data types we've talked about thus far.
Dialogue: 0,1:52:34.91,1:52:39.59,chinese,,0,0,0,,再说一遍，字符串相对于我们迄今为止讨论过的所有其他数据类型都很特殊。
Dialogue: 0,1:52:39.59,1:52:43.22,english,,0,0,0,,But how could I, for instance, do this differently?
Dialogue: 0,1:52:39.59,1:52:43.22,chinese,,0,0,0,,但是，比如说，我怎样才能以不同的方式做到这一点呢？
Dialogue: 0,1:52:43.22,1:52:47.22,english,,0,0,0,,Well, let's actually factor this out as a function, as I've commonly done.
Dialogue: 0,1:52:43.22,1:52:47.22,chinese,,0,0,0,,那么，让我们按照我通常的做法，把它作为一个函数来计算。
Dialogue: 0,1:52:47.22,1:52:50.54,english,,0,0,0,,But rather than implement it myself, you know what?
Dialogue: 0,1:52:47.22,1:52:50.54,chinese,,0,0,0,,但与其自己实施，你知道吗？
Dialogue: 0,1:52:50.54,1:52:57.26,english,,0,0,0,,It turns out what's nice about strings being so common, there are many other people who have solved these problems before.
Dialogue: 0,1:52:50.54,1:52:57.26,chinese,,0,0,0,,事实证明，字符串如此常见的好处是，有很多其他人以前也解决过这些问题。
Dialogue: 0,1:52:57.26,1:53:00.29,english,,0,0,0,,And in fact, there's a whole string library in C.
Dialogue: 0,1:52:57.26,1:53:00.29,chinese,,0,0,0,,事实上，在 C 语言中有一个完整的字符串库。
Dialogue: 0,1:53:00.29,1:53:04.19,english,,0,0,0,,It is used by way of a header file called string.h.
Dialogue: 0,1:53:00.29,1:53:04.19,chinese,,0,0,0,,它是通过一个名为 string.h 的头文件来使用的。
Dialogue: 0,1:53:04.19,1:53:08.40,english,,0,0,0,,And what string.h is, is a library of string-related functions.
Dialogue: 0,1:53:04.19,1:53:08.40,chinese,,0,0,0,,string.h 是一个字符串相关函数库。
Dialogue: 0,1:53:08.40,1:53:18.05,english,,0,0,0,,In fact, you can see in CS50's manual pages for C, the string.h functions, at least those that we recommend as most useful, and in particular, if you poke around there,
Dialogue: 0,1:53:08.40,1:53:18.05,chinese,,0,0,0,,事实上，你可以在 CS50 的 C 语言手册页面中看到 string.h 函数，至少是我们推荐的那些最有用的函数，特别是，如果你在那里搜索的话、
Dialogue: 0,1:53:18.05,1:53:20.29,english,,0,0,0,,you'll see that there's a function called strlen.
Dialogue: 0,1:53:18.05,1:53:20.29,chinese,,0,0,0,,你会发现有一个叫做 strlen 的函数。
Dialogue: 0,1:53:20.29,1:53:22.05,english,,0,0,0,,It means string length.
Dialogue: 0,1:53:20.29,1:53:22.05,chinese,,0,0,0,,表示字符串长度。
Dialogue: 0,1:53:22.05,1:53:25.85,english,,0,0,0,,It was named very succinctly, just because it's a little easier to type than string length.
Dialogue: 0,1:53:22.05,1:53:25.85,chinese,,0,0,0,,命名非常简洁，只是因为它比字符串长度更容易输入。
Dialogue: 0,1:53:25.85,1:53:28.80,english,,0,0,0,,But strlen tells you the length of a string.
Dialogue: 0,1:53:25.85,1:53:28.80,chinese,,0,0,0,,但 strlen 会告诉你字符串的长度。
Dialogue: 0,1:53:28.80,1:53:30.99,english,,0,0,0,,So how might I use this in my code here?
Dialogue: 0,1:53:28.80,1:53:30.99,chinese,,0,0,0,,那么，如何在我的代码中使用它呢？
Dialogue: 0,1:53:30.99,1:53:34.02,english,,0,0,0,,Well, it turns out, I can simplify this quite a bit.
Dialogue: 0,1:53:30.99,1:53:34.02,chinese,,0,0,0,,事实证明，我可以简化很多。
Dialogue: 0,1:53:34.02,1:53:45.63,english,,0,0,0,,Let me get rid of my loop, get rid of my accounting manually, and do something like this-- int n equals strlen of the humans name, name.
Dialogue: 0,1:53:34.02,1:53:45.63,chinese,,0,0,0,,让我去掉循环，去掉手工记账，然后这样做-- int n 等于人类名称 name 的 strlen。
Dialogue: 0,1:53:45.63,1:53:51.29,english,,0,0,0,,And now I'll just use printf, as before, with %i backslash n, and output the value of n.
Dialogue: 0,1:53:45.63,1:53:51.29,chinese,,0,0,0,,现在，我将像以前一样使用 printf，使用 %i 反斜线 n，并输出 n 的值。
Dialogue: 0,1:53:51.29,1:53:54.38,english,,0,0,0,,But there's a bug at the moment.
Dialogue: 0,1:53:51.29,1:53:54.38,chinese,,0,0,0,,但目前有一个漏洞。
Dialogue: 0,1:53:54.38,1:53:58.48,english,,0,0,0,,What have I forgotten to do?
Dialogue: 0,1:53:54.38,1:53:58.48,chinese,,0,0,0,,我忘记做什么了？
Dialogue: 0,1:53:58.48,1:54:03.26,english,,0,0,0,,Yeah, I have to include the header file at the top of the screen, so let me-- at the top of the code.
Dialogue: 0,1:53:58.48,1:54:03.26,chinese,,0,0,0,,是的，我必须在屏幕顶部加入头文件，所以让我 -- 在代码的顶部。
Dialogue: 0,1:54:03.26,1:54:10.97,english,,0,0,0,,So let me also include string.h at the top of my file, so that C knows that, in fact, strlen exists.
Dialogue: 0,1:54:03.26,1:54:10.97,chinese,,0,0,0,,因此，让我在文件顶部包含 string.h，这样 C 就会知道 strlen 确实存在。
Dialogue: 0,1:54:10.97,1:54:14.17,english,,0,0,0,,Let me go ahead and make length, as before.
Dialogue: 0,1:54:10.97,1:54:14.17,chinese,,0,0,0,,请允许我像以前一样，把长度加长。
Dialogue: 0,1:54:14.17,1:54:18.67,english,,0,0,0,,./length-- or actually, really for the first time, what's your name?
Dialogue: 0,1:54:14.17,1:54:18.67,chinese,,0,0,0,,................长度--或者，实际上，真的是第一次，你叫什么名字？
Dialogue: 0,1:54:18.67,1:54:22.36,english,,0,0,0,,D-A-V-I-D. And hopefully, I'm going to see, in fact, 5.
Dialogue: 0,1:54:18.67,1:54:22.36,chinese,,0,0,0,,D -A -V希望我能看到，事实上，5。
Dialogue: 0,1:54:22.36,1:54:26.95,english,,0,0,0,,By contrast, if I run it again and type in HI!, now I see three.
Dialogue: 0,1:54:22.36,1:54:26.95,chinese,,0,0,0,,相比之下，如果我再次运行它并输入 HI！，现在我看到了三个。
Dialogue: 0,1:54:26.95,1:54:29.78,english,,0,0,0,,So strlen is just one of the functions in that library.
Dialogue: 0,1:54:26.95,1:54:29.78,chinese,,0,0,0,,因此，strlen 只是该函数库中的一个函数。
Dialogue: 0,1:54:29.78,1:54:30.91,english,,0,0,0,,And there are so many more.
Dialogue: 0,1:54:29.78,1:54:30.91,chinese,,0,0,0,,还有很多很多。
Dialogue: 0,1:54:30.91,1:54:40.58,english,,0,0,0,,In fact, yet another library that might be useful moving forward is this one, ctype, which relates to C data types and lots of functions therein that can be useful.
Dialogue: 0,1:54:30.91,1:54:40.58,chinese,,0,0,0,,事实上，还有一个库在未来可能会很有用，那就是 ctype 库，它与 C 数据类型有关，其中有很多有用的函数。
Dialogue: 0,1:54:40.58,1:54:49.46,english,,0,0,0,,For instance, if you review its documentation in the manual pages online, you'll see that there are functions via which we can solve problems like this.
Dialogue: 0,1:54:40.58,1:54:49.46,chinese,,0,0,0,,例如，如果您查看在线手册页面中的文档，就会发现我们可以通过一些功能来解决类似问题。
Dialogue: 0,1:54:49.46,1:54:53.68,english,,0,0,0,,Let me go ahead and propose here-- let me see.
Dialogue: 0,1:54:49.46,1:54:53.68,chinese,,0,0,0,,让我在这里提议 -- 让我看看。
Dialogue: 0,1:54:53.68,1:55:06.70,english,,0,0,0,,Let's do an example here involving-- how about checking if something is uppercase or lowercase, and converting it to uppercase only.
Dialogue: 0,1:54:53.68,1:55:06.70,chinese,,0,0,0,,让我们举个例子--如何检查某些内容是大写还是小写，并将其转换为大写。
Dialogue: 0,1:55:06.70,1:55:10.81,english,,0,0,0,,Let me go back to VS Code, and code a program called uppercase.c.
Dialogue: 0,1:55:06.70,1:55:10.81,chinese,,0,0,0,,让我回到 VS 代码，编写一个名为 uppercase.c 的程序。
Dialogue: 0,1:55:10.81,1:55:15.22,english,,0,0,0,,In this, file I'm going to start by including now, as always, cs50.h.
Dialogue: 0,1:55:10.81,1:55:15.22,chinese,,0,0,0,,在这个文件中，我将一如既往地首先包含 cs50.h。
Dialogue: 0,1:55:15.22,1:55:17.71,english,,0,0,0,,I'm going to include stdio.h.
Dialogue: 0,1:55:15.22,1:55:17.71,chinese,,0,0,0,,我将包含 stdio.h。
Dialogue: 0,1:55:17.71,1:55:26.23,english,,0,0,0,,And I'm going to add one other to the mix, which is string.h now too, so I can access the length of things as needed.
Dialogue: 0,1:55:17.71,1:55:26.23,chinese,,0,0,0,,我现在还要添加一个 string.h，这样我就可以根据需要访问事物的长度了。
Dialogue: 0,1:55:26.23,1:55:28.57,english,,0,0,0,,Int main void comes next.
Dialogue: 0,1:55:26.23,1:55:28.57,chinese,,0,0,0,,接下来是 Int main void。
Dialogue: 0,1:55:28.57,1:55:32.23,english,,0,0,0,,And then within my main function, I'm going to go ahead and declare a string called s.
Dialogue: 0,1:55:28.57,1:55:32.23,chinese,,0,0,0,,然后在我的主函数中，我要继续声明一个名为 s 的字符串。
Dialogue: 0,1:55:32.23,1:55:34.24,english,,0,0,0,,I'm going to call getString, as before.
Dialogue: 0,1:55:32.23,1:55:34.24,chinese,,0,0,0,,我要像以前一样调用 getString。
Dialogue: 0,1:55:34.24,1:55:38.17,english,,0,0,0,,And I'm going to go ahead and just ask the user for a string called before.
Dialogue: 0,1:55:34.24,1:55:38.17,chinese,,0,0,0,,我将继续询问用户之前调用的字符串。
Dialogue: 0,1:55:38.17,1:55:39.67,english,,0,0,0,,I want to do a before and after.
Dialogue: 0,1:55:38.17,1:55:39.67,chinese,,0,0,0,,我想做一个前后对比。
Dialogue: 0,1:55:39.67,1:55:41.35,english,,0,0,0,,Whatever the user types in is before.
Dialogue: 0,1:55:39.67,1:55:41.35,chinese,,0,0,0,,用户输入的内容都在前面。
Dialogue: 0,1:55:41.35,1:55:44.77,english,,0,0,0,,But I want to force everything to uppercase, thereafter.
Dialogue: 0,1:55:41.35,1:55:44.77,chinese,,0,0,0,,但此后，我想把所有东西都强制改为大写。
Dialogue: 0,1:55:44.77,1:55:48.74,english,,0,0,0,,Let me now, in this loop here, do this.
Dialogue: 0,1:55:44.77,1:55:48.74,chinese,,0,0,0,,现在，让我在这个循环中这样做。
Dialogue: 0,1:55:48.74,1:55:53.80,english,,0,0,0,,Let me printf quote unquote, "After," just so we can see this on the screen.
Dialogue: 0,1:55:48.74,1:55:53.80,chinese,,0,0,0,,让我打印出 "之后"，这样我们就能在屏幕上看到了。
Dialogue: 0,1:55:53.80,1:56:02.44,english,,0,0,0,,And let me do four int i gets 0, i is less than strlen of s, i++.
Dialogue: 0,1:55:53.80,1:56:02.44,chinese,,0,0,0,,让我来做四个 int i 得到 0，i 小于 s 的 strlen，i++。
Dialogue: 0,1:56:02.44,1:56:03.61,english,,0,0,0,,What am I about to do?
Dialogue: 0,1:56:02.44,1:56:03.61,chinese,,0,0,0,,我要做什么？
Dialogue: 0,1:56:03.61,1:56:11.23,english,,0,0,0,,I'm about to iterate over every character in the string from left to right, from 0 on up to, but not through, the length of s.
Dialogue: 0,1:56:03.61,1:56:11.23,chinese,,0,0,0,,我要从左到右遍历字符串中的每个字符，从 0 开始，直到 s 的长度。
Dialogue: 0,1:56:11.23,1:56:16.99,english,,0,0,0,,And how do I check if something is lowercase, so that I can actually force it to uppercase?
Dialogue: 0,1:56:11.23,1:56:16.99,chinese,,0,0,0,,如何检查某些内容是否是小写，以便将其强制改为大写？
Dialogue: 0,1:56:16.99,1:56:19.63,english,,0,0,0,,Well, it turns out, I could do this literally.
Dialogue: 0,1:56:16.99,1:56:19.63,chinese,,0,0,0,,事实证明，我真的可以做到这一点。
Dialogue: 0,1:56:19.63,1:56:31.78,english,,0,0,0,,If the character in s at location i is greater than or equal to capital A, ampersand, ampersand, which means and instead of or, which we saw
Dialogue: 0,1:56:19.63,1:56:31.78,chinese,,0,0,0,,如果 s 中位于 i 处的字符大于或等于大写字母 A，则为 "and"、"amppersand"，即 "and"，而不是我们看到的 "or"。
Dialogue: 0,1:56:31.78,1:56:41.80,english,,0,0,0,,in the past, s[i] is less than or equal to little z, that means, logically in English, that this is indeed lowercase.
Dialogue: 0,1:56:31.78,1:56:41.80,chinese,,0,0,0,,在过去，s[i] 小于或等于 little z，这在英语逻辑上意味着这确实是小写字母。
Dialogue: 0,1:56:41.80,1:56:44.83,english,,0,0,0,,How do I now convert it to uppercase, this character?
Dialogue: 0,1:56:41.80,1:56:44.83,chinese,,0,0,0,,现在如何将这个字符转换成大写字母？
Dialogue: 0,1:56:44.83,1:56:48.16,english,,0,0,0,,Well, I could just literally print out the same character.
Dialogue: 0,1:56:44.83,1:56:48.16,chinese,,0,0,0,,好吧，我可以直接打印出相同的字符。
Dialogue: 0,1:56:48.16,1:56:52.28,english,,0,0,0,,But that would not be the answer here because that's not changing the value.
Dialogue: 0,1:56:48.16,1:56:52.28,chinese,,0,0,0,,但这并不是答案，因为这并没有改变价值。
Dialogue: 0,1:56:52.28,1:56:54.47,english,,0,0,0,,But what could I do instead?
Dialogue: 0,1:56:52.28,1:56:54.47,chinese,,0,0,0,,但我能做什么呢？
Dialogue: 0,1:56:54.47,1:57:03.22,english,,0,0,0,,Well, let me actually pull up here real fast the ASCII chart as before, and let's see if we can't glean some insight.
Dialogue: 0,1:56:54.47,1:57:03.22,chinese,,0,0,0,,好吧，让我在这里快速调出之前的 ASCII 图表，看看我们是否能从中获得一些启示。
Dialogue: 0,1:57:03.22,1:57:09.79,english,,0,0,0,,If I pull up the same ASCII chart, and suppose the human has typed in a lowercase a, that's 97.
Dialogue: 0,1:57:03.22,1:57:09.79,chinese,,0,0,0,,如果我调出同样的 ASCII 图表，假设人类输入的是小写 a，那就是 97。
Dialogue: 0,1:57:09.79,1:57:13.24,english,,0,0,0,,What letter-- I want to convert it to uppercase
Dialogue: 0,1:57:09.79,1:57:13.24,chinese,,0,0,0,,什么字母--我想把它转换成大写字母
Dialogue: 0,1:57:13.24,1:57:18.66,english,,0,0,0,,A, so what number do I want to convert the 97 to, per week zero?
Dialogue: 0,1:57:13.24,1:57:18.66,chinese,,0,0,0,,A，那么我想把 97 转换成什么数字，每周 0？
Dialogue: 0,1:57:18.66,1:57:21.00,english,,0,0,0,,So 65, we keep coming back to that one.
Dialogue: 0,1:57:18.66,1:57:21.00,chinese,,0,0,0,,所以 65，我们一直在回想这个问题。
Dialogue: 0,1:57:21.00,1:57:23.01,english,,0,0,0,,What if the user types in lowercase b?
Dialogue: 0,1:57:21.00,1:57:23.01,chinese,,0,0,0,,如果用户输入的是小写 b 呢？
Dialogue: 0,1:57:23.01,1:57:27.55,english,,0,0,0,,I want to change the 98 value to 66, and so forth.
Dialogue: 0,1:57:23.01,1:57:27.55,chinese,,0,0,0,,我想把 98 的值改为 66，以此类推。
Dialogue: 0,1:57:27.55,1:57:30.13,english,,0,0,0,,And any quick math, how far apart are those?
Dialogue: 0,1:57:27.55,1:57:30.13,chinese,,0,0,0,,快速计算一下，它们之间相距多远？
Dialogue: 0,1:57:30.13,1:57:37.99,english,,0,0,0,,So it's always 32, like uppercase to lowercase is always, wonderfully, good design, 32 away, one from the other.
Dialogue: 0,1:57:30.13,1:57:37.99,chinese,,0,0,0,,因此，从大写字母到小写字母总是相差 32 个，就像大写字母到小写字母总是相差 32 个一样，奇妙的设计。
Dialogue: 0,1:57:37.99,1:57:39.10,english,,0,0,0,,So what does this mean?
Dialogue: 0,1:57:37.99,1:57:39.10,chinese,,0,0,0,,这意味着什么？
Dialogue: 0,1:57:39.10,1:57:42.60,english,,0,0,0,,Well, I think we saw earlier that underneath the hood, a char is just a number.
Dialogue: 0,1:57:39.10,1:57:42.60,chinese,,0,0,0,,嗯，我想我们之前已经看到，在引擎盖下面，字符只是一个数字。
Dialogue: 0,1:57:42.60,1:57:44.34,english,,0,0,0,,You can certainly do arithmetic on it.
Dialogue: 0,1:57:42.60,1:57:44.34,chinese,,0,0,0,,你当然可以用它来做算术题。
Dialogue: 0,1:57:44.34,1:57:48.18,english,,0,0,0,,And here, again, if you understand these lower level primitives, what if I do this?
Dialogue: 0,1:57:44.34,1:57:48.18,chinese,,0,0,0,,同样，如果你理解了这些低级基元，如果我这样做呢？
Dialogue: 0,1:57:48.18,1:57:57.04,english,,0,0,0,,Whatever s[i] is, if I know on line 13 that it's lowercase, do I want to add or subtract 32?
Dialogue: 0,1:57:48.18,1:57:57.04,chinese,,0,0,0,,无论 s[i] 是什么，如果我在第 13 行知道它是小写，我是要加上还是减去 32 呢？
Dialogue: 0,1:57:57.04,1:57:57.84,english,,0,0,0,,AUDIENCE: Subtract.
Dialogue: 0,1:57:57.04,1:57:57.84,chinese,,0,0,0,,听众：减去
Dialogue: 0,1:57:57.84,1:58:06.56,english,,0,0,0,,DAVID MALAN: So I want to subtract because I want to go from like 97 to 65 or 98 to 66, so indeed, if you do some quick math, that gives you 32.
Dialogue: 0,1:57:57.84,1:58:06.56,chinese,,0,0,0,,戴维-马兰：所以我想做减法，因为我想从 97 减到 65，或者从 98 减到 66。
Dialogue: 0,1:58:06.56,1:58:16.37,english,,0,0,0,,So it's suffices to just treat chars as numbers, subtract the 32, and printing it with %c, I think, will just convert lowercase to uppercase.
Dialogue: 0,1:58:06.56,1:58:16.37,chinese,,0,0,0,,因此，只需将字符视为数字，减去 32，然后用 %c 打印即可，我认为这样就能将小写转换为大写。
Dialogue: 0,1:58:16.37,1:58:24.98,english,,0,0,0,,If you now fast forward to the real world, Microsoft Word or Google Docs, if you've ever chosen the menu option that forces things to uppercase or lowercase on occasion, literally, that's
Dialogue: 0,1:58:16.37,1:58:24.98,chinese,,0,0,0,,如果你现在快进到现实世界，Microsoft Word 或 Google Docs，如果你曾经选择过菜单选项，偶尔会强制将东西变成大写或小写，从字面上看，那就是
Dialogue: 0,1:58:24.98,1:58:26.48,english,,0,0,0,,what Microsoft and Google have done.
Dialogue: 0,1:58:24.98,1:58:26.48,chinese,,0,0,0,,微软和谷歌所做的一切。
Dialogue: 0,1:58:26.48,1:58:33.81,english,,0,0,0,,They iterate over every character in the document, check if it's lowercase, and if so, they subtract 32 from it and show you the new value.
Dialogue: 0,1:58:26.48,1:58:33.81,chinese,,0,0,0,,它们会遍历文档中的每个字符，检查其是否小写，如果是，就会从中减去 32，然后向你显示新值。
Dialogue: 0,1:58:33.81,1:58:36.65,english,,0,0,0,,What if, though, it is not a lowercase letter?
Dialogue: 0,1:58:33.81,1:58:36.65,chinese,,0,0,0,,如果不是小写字母呢？
Dialogue: 0,1:58:36.65,1:58:46.49,english,,0,0,0,,I think I can keep it easy and just print out the current letter unchanged, if my goal is to simply force things to all uppercase, and that letter, then would be s[i].
Dialogue: 0,1:58:36.65,1:58:46.49,chinese,,0,0,0,,如果我的目标只是强制全部大写，我想我可以简单一点，只打印出当前的字母，而这个字母就是 s[i]。
Dialogue: 0,1:58:46.49,1:58:50.75,english,,0,0,0,,So let me go ahead now and make uppercase, hopefully, no errors.
Dialogue: 0,1:58:46.49,1:58:50.75,chinese,,0,0,0,,所以，让我现在继续大写，希望不会出错。
Dialogue: 0,1:58:50.75,1:58:57.12,english,,0,0,0,,./uppercase, and I'll now type in David with an uppercase D, but lowercase everything else.
Dialogue: 0,1:58:50.75,1:58:57.12,chinese,,0,0,0,,./uppercase，现在我会用大写字母 D 键入 David，但其他内容都要小写。
Dialogue: 0,1:58:57.12,1:59:01.19,english,,0,0,0,,But now the after version is DAVID-- an aesthetic bug.
Dialogue: 0,1:58:57.12,1:59:01.19,chinese,,0,0,0,,但现在的版本是 DAVID--一个美学错误。
Dialogue: 0,1:59:01.19,1:59:05.93,english,,0,0,0,,Notice here, I forgot to include, just for prettiness sake, a backslash n at the end.
Dialogue: 0,1:59:01.19,1:59:05.93,chinese,,0,0,0,,请注意，为了美观起见，我忘了在末尾加上反斜杠 n。
Dialogue: 0,1:59:05.93,1:59:07.64,english,,0,0,0,,No problem, I'll add that.
Dialogue: 0,1:59:05.93,1:59:07.64,chinese,,0,0,0,,没问题，我会加进去的。
Dialogue: 0,1:59:07.64,1:59:08.87,english,,0,0,0,,Let me fix my mistake.
Dialogue: 0,1:59:07.64,1:59:08.87,chinese,,0,0,0,,让我来弥补我的错误。
Dialogue: 0,1:59:08.87,1:59:12.05,english,,0,0,0,,Make uppercase, ./uppercase, Enter.
Dialogue: 0,1:59:08.87,1:59:12.05,chinese,,0,0,0,,大写，./uppercase，回车。
Dialogue: 0,1:59:12.05,1:59:14.24,english,,0,0,0,,D-A-V-I-D, Enter, and voila.
Dialogue: 0,1:59:12.05,1:59:14.24,chinese,,0,0,0,,D-A-V-I-D，回车，就可以了。
Dialogue: 0,1:59:14.24,1:59:22.07,english,,0,0,0,,And I deliberately added another space after, just so they would line up pretty, even though before and after have different numbers of letters.
Dialogue: 0,1:59:14.24,1:59:22.07,chinese,,0,0,0,,我还特意在后面又加了一个空格，尽管前后的字母数不同，但这样排列起来会更美观。
Dialogue: 0,1:59:22.07,1:59:28.38,english,,0,0,0,,Questions then, on this implementation of forcing something to uppercase, which in and of itself is not all that enlightening,
Dialogue: 0,1:59:22.07,1:59:28.38,chinese,,0,0,0,,那么，关于将某些内容强制为大写的问题，这本身并没有什么启发性、
Dialogue: 0,1:59:28.38,1:59:33.99,english,,0,0,0,,but is representative now of how you can leverage these low level primitives.
Dialogue: 0,1:59:28.38,1:59:33.99,chinese,,0,0,0,,但现在却代表了如何利用这些低级基元的方法。
Dialogue: 0,1:59:33.99,1:59:35.88,english,,0,0,0,,Question?
Dialogue: 0,1:59:35.88,1:59:36.38,english,,0,0,0,,No?
Dialogue: 0,1:59:36.38,1:59:38.63,english,,0,0,0,,All right, well, this honestly is tedious.
Dialogue: 0,1:59:36.38,1:59:38.63,chinese,,0,0,0,,好吧，老实说，这太乏味了。
Dialogue: 0,1:59:38.63,1:59:43.55,english,,0,0,0,,My God, like does Microsoft, Google, everyone, you have to literally write out this code just to do something simple?
Dialogue: 0,1:59:38.63,1:59:43.55,chinese,,0,0,0,,我的天啊，微软、谷歌、每个人都要写这么多代码才能完成这么简单的事情吗？
Dialogue: 0,1:59:43.55,1:59:46.31,english,,0,0,0,,Well, no, that's, again, why we have things like libraries.
Dialogue: 0,1:59:43.55,1:59:46.31,chinese,,0,0,0,,不，这就是为什么我们有图书馆这样的东西。
Dialogue: 0,1:59:46.31,1:59:55.94,english,,0,0,0,,And increasingly now, for problem sets, projects, and beyond, well, you just use libraries more often off-the-shelf so as to solve problems that, surely, other people have had before you.
Dialogue: 0,1:59:46.31,1:59:55.94,chinese,,0,0,0,,现在，越来越多的问题集、项目以及其他方面，你都会更多地使用现成的库，以便解决别人在你之前已经遇到过的问题。
Dialogue: 0,1:59:55.94,1:59:59.57,english,,0,0,0,,So how can I now use this library, ctype.h?
Dialogue: 0,1:59:55.94,1:59:59.57,chinese,,0,0,0,,那么，我现在如何使用这个库 ctype.h？
Dialogue: 0,1:59:59.57,2:00:01.32,english,,0,0,0,,Well, let me go back into my code.
Dialogue: 0,1:59:59.57,2:00:01.32,chinese,,0,0,0,,好吧，让我回到我的代码中去。
Dialogue: 0,2:00:01.32,2:00:05.09,english,,0,0,0,,Let me include this among my header files here.
Dialogue: 0,2:00:01.32,2:00:05.09,chinese,,0,0,0,,让我在这里把它加入我的头文件中。
Dialogue: 0,2:00:05.09,2:00:08.03,english,,0,0,0,,Just so I can skim things easily, I tend to alphabetize my headers.
Dialogue: 0,2:00:05.09,2:00:08.03,chinese,,0,0,0,,为了方便浏览，我倾向于按字母顺序排列标题。
Dialogue: 0,2:00:08.03,2:00:13.40,english,,0,0,0,,But that's not strictly necessary, but it allows me, at a glance, to realize, did I or did I not include something I need?
Dialogue: 0,2:00:08.03,2:00:13.40,chinese,,0,0,0,,但严格来说，这并不是必须的，但它能让我一目了然地意识到，我是否包含了我需要的东西？
Dialogue: 0,2:00:13.40,2:00:15.57,english,,0,0,0,,Now, let me go ahead and do this.
Dialogue: 0,2:00:13.40,2:00:15.57,chinese,,0,0,0,,现在，让我来做这件事。
Dialogue: 0,2:00:15.57,2:00:28.91,english,,0,0,0,,It turns out if you read the documentation for the C type library, there's a function, wonderfully called, if islower, that takes in a character as its argument, essentially, so s[i].
Dialogue: 0,2:00:15.57,2:00:28.91,chinese,,0,0,0,,原来，如果你阅读 C 类型库的文档，会发现有一个函数，奇妙地叫做 if islower，它的参数是一个字符，本质上就是 s[i]。
Dialogue: 0,2:00:28.91,2:00:33.89,english,,0,0,0,,And if that returns true, a Boolean value, if you will, well, I'm going to force it to lowercase.
Dialogue: 0,2:00:28.91,2:00:33.89,chinese,,0,0,0,,如果返回值为 true（一个布尔值），我将强制它小写。
Dialogue: 0,2:00:33.89,2:00:36.56,english,,0,0,0,,But I don't have to do this math anymore.
Dialogue: 0,2:00:33.89,2:00:36.56,chinese,,0,0,0,,但我不用再做这样的计算了。
Dialogue: 0,2:00:36.56,2:00:45.06,english,,0,0,0,,Turns out, in the C type library, there's also a function called to upper that takes a character as input, like s[i], and it just does the math for you.
Dialogue: 0,2:00:36.56,2:00:45.06,chinese,,0,0,0,,原来，在 C 类型库中，也有一个调用 upper 的函数，它将一个字符作为输入，如 s[i]，然后它就会帮你计算。
Dialogue: 0,2:00:45.06,2:00:50.40,english,,0,0,0,,So that you can abstract away the 32 thing, and just know that someone else has solved that problem for you.
Dialogue: 0,2:00:45.06,2:00:50.40,chinese,,0,0,0,,这样，你就可以抽象出 32 件事，只知道别人已经为你解决了这个问题。
Dialogue: 0,2:00:50.40,2:00:55.20,english,,0,0,0,,Otherwise, I can leave my code unchanged down below because I'm not changing anything else.
Dialogue: 0,2:00:50.40,2:00:55.20,chinese,,0,0,0,,否则，我可以保持下面的代码不变，因为我不会更改任何其他内容。
Dialogue: 0,2:00:55.20,2:01:03.71,english,,0,0,0,,So if I do make uppercase now, and then ./uppercase, D-a-v-i-d, with just a capital D, and now it still works.
Dialogue: 0,2:00:55.20,2:01:03.71,chinese,,0,0,0,,因此，如果我现在将大写字母改为./uppercase，D-a-v-i-d，只用大写字母 D，现在它仍然可以工作。
Dialogue: 0,2:01:03.71,2:01:07.52,english,,0,0,0,,But if you read the documentation further, it turns out that to upper is smart.
Dialogue: 0,2:01:03.71,2:01:07.52,chinese,,0,0,0,,但如果你进一步阅读文档，就会发现 "upper"（上）才是明智之举。
Dialogue: 0,2:01:07.52,2:01:13.04,english,,0,0,0,,If you pass in a character to to upper, that's lowercase, it obviously converts it to uppercase by doing that math.
Dialogue: 0,2:01:07.52,2:01:13.04,chinese,,0,0,0,,如果你输入的字符是小写的大写字母，它显然会通过数学运算将其转换为大写字母。
Dialogue: 0,2:01:13.04,2:01:21.54,english,,0,0,0,,But if you pass in a character to to upper that's already uppercase, the documentation you would see tells you that it leaves it unchanged.
Dialogue: 0,2:01:13.04,2:01:21.54,chinese,,0,0,0,,但是，如果你传入一个已经是大写的字符到 upper，你看到的文档会告诉你，它会保持不变。
Dialogue: 0,2:01:21.54,2:01:23.91,english,,0,0,0,,So I can tighten all of this up.
Dialogue: 0,2:01:21.54,2:01:23.91,chinese,,0,0,0,,这样我就能把这些都收紧。
Dialogue: 0,2:01:23.91,2:01:25.88,english,,0,0,0,,I can get rid of the whole else.
Dialogue: 0,2:01:23.91,2:01:25.88,chinese,,0,0,0,,我可以摆脱整个其他。
Dialogue: 0,2:01:25.88,2:01:33.62,english,,0,0,0,,I can get rid of the whole if, and arguably now, implement a program that's just as correct, but better designed.
Dialogue: 0,2:01:25.88,2:01:33.62,chinese,,0,0,0,,现在，我可以摆脱整个程序，实施一个同样正确但设计更好的程序。
Dialogue: 0,2:01:33.62,2:01:34.25,english,,0,0,0,,Why?
Dialogue: 0,2:01:34.25,2:01:39.74,english,,0,0,0,,Fewer lines of code easier to read, lower probability of mistakes, assuming the library is correct.
Dialogue: 0,2:01:34.25,2:01:39.74,chinese,,0,0,0,,代码行数更少，更容易阅读，出错概率更低，前提是库是正确的。
Dialogue: 0,2:01:39.74,2:01:43.16,english,,0,0,0,,It just makes it easier and faster for me, now, to write code.
Dialogue: 0,2:01:39.74,2:01:43.16,chinese,,0,0,0,,现在，它能让我更轻松、更快速地编写代码。
Dialogue: 0,2:01:43.16,2:01:50.19,english,,0,0,0,,So if I now do, one last time, make uppercase, Enter, ./uppercase, and type in my name, still working.
Dialogue: 0,2:01:43.16,2:01:50.19,chinese,,0,0,0,,所以，如果我现在再做最后一次，输入大写字母，回车，./uppercase，然后输入我的名字，仍然有效。
Dialogue: 0,2:01:50.19,2:01:57.74,english,,0,0,0,,But now notice, we've whittled this down to far fewer lines of code, albeit, using now this additional library.
Dialogue: 0,2:01:50.19,2:01:57.74,chinese,,0,0,0,,但现在请注意，我们已经将代码行数减少了很多，尽管现在使用了这个额外的库。
Dialogue: 0,2:01:57.74,2:02:00.14,english,,0,0,0,,Questions then on how we did this?
Dialogue: 0,2:01:57.74,2:02:00.14,chinese,,0,0,0,,有问题吗？
Dialogue: 0,2:02:03.93,2:02:09.12,english,,0,0,0,,Well, even though this code, I daresay, is correct, it's not necessarily well-designed just yet.
Dialogue: 0,2:02:03.93,2:02:09.12,chinese,,0,0,0,,我敢说，尽管这段代码是正确的，但还不一定是精心设计的。
Dialogue: 0,2:02:09.12,2:02:17.90,english,,0,0,0,,In fact, there's one line of code, one function call in this current implementation that's more inefficient than it needs to be.
Dialogue: 0,2:02:09.12,2:02:17.90,chinese,,0,0,0,,事实上，在当前的实现中，有一行代码、一个函数调用的效率比它需要的还要低。
Dialogue: 0,2:02:17.90,2:02:24.32,english,,0,0,0,,And allow me to draw your attention to this here, line 10, wherein we're calling strlen.
Dialogue: 0,2:02:17.90,2:02:24.32,chinese,,0,0,0,,请大家注意这里的第 10 行，我们正在调用 strlen。
Dialogue: 0,2:02:24.32,2:02:29.00,english,,0,0,0,,But we're calling it inside of this for loop, specifically, inside of the condition.
Dialogue: 0,2:02:24.32,2:02:29.00,chinese,,0,0,0,,但我们是在 for 循环中调用它，特别是在条件中。
Dialogue: 0,2:02:29.00,2:02:33.72,english,,0,0,0,,And why might that not necessarily be the best idea?
Dialogue: 0,2:02:29.00,2:02:33.72,chinese,,0,0,0,,为什么这不一定是最好的主意呢？
Dialogue: 0,2:02:33.72,2:02:36.81,english,,0,0,0,,Well, is the length of the string as changing, ever?
Dialogue: 0,2:02:33.72,2:02:36.81,chinese,,0,0,0,,那么，字符串的长度是否一直在变化？
Dialogue: 0,2:02:36.81,2:02:38.95,english,,0,0,0,,I mean, certainly not within the span of this loop.
Dialogue: 0,2:02:36.81,2:02:38.95,chinese,,0,0,0,,我的意思是，肯定不是在这个循环的范围内。
Dialogue: 0,2:02:38.95,2:02:45.24,english,,0,0,0,,And so here we are within our for loop on line 10, 11, 12, and 13, asking on every iteration that same question.
Dialogue: 0,2:02:38.95,2:02:45.24,chinese,,0,0,0,,因此，我们在第 10、11、12 和 13 行的 for 循环中，每次迭代都会问同一个问题。
Dialogue: 0,2:02:45.24,2:02:48.33,english,,0,0,0,,What's the length of s?
Dialogue: 0,2:02:45.24,2:02:48.33,chinese,,0,0,0,,s 的长度是多少？
Dialogue: 0,2:02:48.33,2:02:52.66,english,,0,0,0,,And in turn, we're calling strlen every time, even though we're getting back the same answer.
Dialogue: 0,2:02:48.33,2:02:52.66,chinese,,0,0,0,,反过来，我们每次都要调用 strlen，尽管得到的答案是一样的。
Dialogue: 0,2:02:52.66,2:02:59.49,english,,0,0,0,,So I daresay a better solution here would be to maybe figure out the length of s earlier on in my code, and maybe declare a variable.
Dialogue: 0,2:02:52.66,2:02:59.49,chinese,,0,0,0,,因此，我敢说，更好的解决办法是在代码的前面找出 s 的长度，然后声明一个变量。
Dialogue: 0,2:02:59.49,2:03:07.86,english,,0,0,0,,Or perhaps do something that's syntactically a little more elegant, and in fact, a very common design in a loop like this, would be to declare not just one variable like i,
Dialogue: 0,2:02:59.49,2:03:07.86,chinese,,0,0,0,,或者，也可以做一些语法上更优雅的事情，事实上，在这样的循环中，一个非常常见的设计是，不只声明一个像 i 这样的变量、
Dialogue: 0,2:03:07.86,2:03:16.53,english,,0,0,0,,but to actually declare a second variable called n, for instance, where n is just some number, set n equal to the length of s.
Dialogue: 0,2:03:07.86,2:03:16.53,chinese,,0,0,0,,但实际上，如果要声明第二个变量 n，例如 n 只是一个数字，则应将 n 设置为等于 s 的长度。
Dialogue: 0,2:03:16.53,2:03:24.54,english,,0,0,0,,But thereafter, inside of this condition, instead of calling strlen of s again and again and again, what might I now do?
Dialogue: 0,2:03:16.53,2:03:24.54,chinese,,0,0,0,,但此后，在这个条件中，我不再一次又一次地调用 s 的 strlen，而是该怎么做呢？
Dialogue: 0,2:03:24.54,2:03:32.73,english,,0,0,0,,I could instead just compare i against n itself, because n now will only be calculated once when it's initialized, just as i is initialize to zero.
Dialogue: 0,2:03:24.54,2:03:32.73,chinese,,0,0,0,,我可以直接将 i 与 n 本身进行比较，因为现在 n 只会在初始化时计算一次，就像 i 初始化为零一样。
Dialogue: 0,2:03:32.73,2:03:37.35,english,,0,0,0,,And thereafter, we're going to be comparing i, which is changing, against n, which will not be.
Dialogue: 0,2:03:32.73,2:03:37.35,chinese,,0,0,0,,此后，我们将把正在变化的 i 与不会变化的 n 进行比较。
Dialogue: 0,2:03:37.35,2:03:40.33,english,,0,0,0,,So it's going to be marginally more efficient by design.
Dialogue: 0,2:03:37.35,2:03:40.33,chinese,,0,0,0,,因此，从设计上讲，它的效率会略有提高。
Dialogue: 0,2:03:40.33,2:03:47.10,english,,0,0,0,,Now with that said, a good compiler could also recognize that there is this optimization possibility, and maybe do it for us.
Dialogue: 0,2:03:40.33,2:03:47.10,chinese,,0,0,0,,尽管如此，一个好的编译器也能识别出这种优化的可能性，并为我们做到这一点。
Dialogue: 0,2:03:47.10,2:03:54.01,english,,0,0,0,,But for now, best to get into the habit, best to develop the muscle memory for making those better design decisions yourselves.
Dialogue: 0,2:03:47.10,2:03:54.01,chinese,,0,0,0,,但现在，最好还是养成习惯，培养肌肉记忆，以便自己做出更好的设计决定。
Dialogue: 0,2:03:54.01,2:03:56.38,english,,0,0,0,,Questions, then, on how we did this?
Dialogue: 0,2:03:54.01,2:03:56.38,chinese,,0,0,0,,那么，我们是如何做到这一点的呢？
Dialogue: 0,2:03:58.90,2:03:59.65,english,,0,0,0,,No?
Dialogue: 0,2:03:59.65,2:04:03.05,english,,0,0,0,,All right, a few final building blocks for the day.
Dialogue: 0,2:03:59.65,2:04:03.05,chinese,,0,0,0,,好了，今天的最后几项内容。
Dialogue: 0,2:04:03.05,2:04:13.09,english,,0,0,0,,So we started by talking about those command line arguments that clang uses, whereby, anything after the command that you type at a prompt, be it make
Dialogue: 0,2:04:03.05,2:04:13.09,chinese,,0,0,0,,因此，我们首先讨论了 clang 使用的命令行参数，即在提示符下键入的命令后的任何内容，无论是 make
Dialogue: 0,2:04:13.09,2:04:21.35,english,,0,0,0,,or clang or even CD in Linux, any word thereafter, or something cryptic like -o is a command line argument.
Dialogue: 0,2:04:13.09,2:04:21.35,chinese,,0,0,0,,或 clang，甚至 Linux 中的 CD，其后的任何单词，或像 -o 这样的隐晦词都是命令行参数。
Dialogue: 0,2:04:21.35,2:04:22.84,english,,0,0,0,,It's an input to the command.
Dialogue: 0,2:04:21.35,2:04:22.84,chinese,,0,0,0,,这是命令的输入。
Dialogue: 0,2:04:22.84,2:04:27.28,english,,0,0,0,,It's different from a function argument because a function argument, of course, is an input to a function.
Dialogue: 0,2:04:22.84,2:04:27.28,chinese,,0,0,0,,它不同于函数参数，因为函数参数当然是函数的输入。
Dialogue: 0,2:04:27.28,2:04:28.34,english,,0,0,0,,But it's the same idea.
Dialogue: 0,2:04:27.28,2:04:28.34,chinese,,0,0,0,,但想法是一样的。
Dialogue: 0,2:04:28.34,2:04:30.97,english,,0,0,0,,It's just different syntax after the dollar sign at the prompt.
Dialogue: 0,2:04:28.34,2:04:30.97,chinese,,0,0,0,,只是提示符后的语法不同而已。
Dialogue: 0,2:04:30.97,2:04:41.80,english,,0,0,0,,Well, it turns out that command line arguments are something you can now use in your own programs by accessing words after the prompt.
Dialogue: 0,2:04:30.97,2:04:41.80,chinese,,0,0,0,,原来，命令行参数可以通过访问提示符后的单词在自己的程序中使用。
Dialogue: 0,2:04:41.80,2:04:45.41,english,,0,0,0,,And let me propose that we invent this as follows.
Dialogue: 0,2:04:41.80,2:04:45.41,chinese,,0,0,0,,请允许我提议，我们可以这样来发明它。
Dialogue: 0,2:04:45.41,2:04:53.56,english,,0,0,0,,Let me propose that we switch back to VS Code here, and I'll open a new file here called greet.c.
Dialogue: 0,2:04:45.41,2:04:53.56,chinese,,0,0,0,,我建议我们切换回 VS 代码，然后在这里打开一个名为 greet.c 的新文件。
Dialogue: 0,2:04:53.56,2:04:57.07,english,,0,0,0,,So in greet.c, it's going to be a program that very simply greets the user.
Dialogue: 0,2:04:53.56,2:04:57.07,chinese,,0,0,0,,因此，在 greet.c 中，它将是一个非常简单地问候用户的程序。
Dialogue: 0,2:04:57.07,2:04:59.44,english,,0,0,0,,Had we written this last week, we would have done this.
Dialogue: 0,2:04:57.07,2:04:59.44,chinese,,0,0,0,,如果我们上周写这篇文章，我们就会这样做。
Dialogue: 0,2:04:59.44,2:05:15.98,english,,0,0,0,,Include cs50.h, and then include stdio.h, and then int main void, and then we might do something simple like string name equals getString, quote unquote, "What's your name?"
Dialogue: 0,2:04:59.44,2:05:15.98,chinese,,0,0,0,,包括 cs50.h，然后包括 stdio.h，然后 int main void，然后我们可能会做一些简单的事情，比如字符串 name 等于 getString，引号 unquote，"你叫什么名字？"
Dialogue: 0,2:05:15.98,2:05:21.49,english,,0,0,0,,And then we would have printed out, as always, Hello, %s, and then plugging in that name.
Dialogue: 0,2:05:15.98,2:05:21.49,chinese,,0,0,0,,然后，我们会一如既往地打印出 "Hello, %s"，然后输入该名称。
Dialogue: 0,2:05:21.49,2:05:29.14,english,,0,0,0,,So this is the same program we've implemented many times, just to make sure it works-- although, nope, that's not quite the same program.
Dialogue: 0,2:05:21.49,2:05:29.14,chinese,,0,0,0,,所以，这是我们已经实施过多次的相同程序，只是为了确保它能正常运行--不过，不对，这不是完全相同的程序。
Dialogue: 0,2:05:29.14,2:05:30.94,english,,0,0,0,,Semicolon's in the wrong place.
Dialogue: 0,2:05:29.14,2:05:30.94,chinese,,0,0,0,,分号的位置不对。
Dialogue: 0,2:05:30.94,2:05:32.96,english,,0,0,0,,This now is the same program.
Dialogue: 0,2:05:30.94,2:05:32.96,chinese,,0,0,0,,现在是同一个程序。
Dialogue: 0,2:05:32.96,2:05:37.61,english,,0,0,0,,So make greet, dot ./greet, and I'll type in my own name. hello, David.
Dialogue: 0,2:05:32.96,2:05:37.61,chinese,,0,0,0,,因此，请输入问候语，点 ./问候语，我会输入自己的名字。你好，戴维。
Dialogue: 0,2:05:37.61,2:05:38.77,english,,0,0,0,,So we're back there.
Dialogue: 0,2:05:37.61,2:05:38.77,chinese,,0,0,0,,所以我们又回到了那里。
Dialogue: 0,2:05:38.77,2:05:44.11,english,,0,0,0,,Now, what's arguably a little annoying about this program, if I type in something else like, Carter,
Dialogue: 0,2:05:38.77,2:05:44.11,chinese,,0,0,0,,现在，可以说这个程序有点恼人的是，如果我输入其他内容，比如卡特、
Dialogue: 0,2:05:44.11,2:05:48.91,english,,0,0,0,,Enter, I have to run the program, wait for the prompt, type in my name, hit Enter.
Dialogue: 0,2:05:44.11,2:05:48.91,chinese,,0,0,0,,回车，我必须运行程序，等待提示，输入我的名字，按回车键。
Dialogue: 0,2:05:48.91,2:05:52.36,english,,0,0,0,,And that's fine, but imagine if every program worked like this.
Dialogue: 0,2:05:48.91,2:05:52.36,chinese,,0,0,0,,这很好，但想象一下，如果每个程序都是这样运行的。
Dialogue: 0,2:05:52.36,2:05:58.54,english,,0,0,0,,Like make, suppose you could only type make, then you wait for a prompt, then you type the name of the program you want to make, then you hit Enter.
Dialogue: 0,2:05:52.36,2:05:58.54,chinese,,0,0,0,,比如 make，假设你只能键入 make，然后等待提示，接着键入要制作的程序名称，然后按 Enter。
Dialogue: 0,2:05:58.54,2:06:07.93,english,,0,0,0,,Or worse, in Linux when you have to change directories, as you might have for problem set one, what if you had to type CD, Enter, now type the name of the folder you want to change into, Enter--
Dialogue: 0,2:05:58.54,2:06:07.93,chinese,,0,0,0,,更糟糕的是，在 Linux 中，当你需要更改目录时，比如要解决一个问题时，如果你必须键入 CD、回车，然后键入要更改的文件夹名称、回车----
Dialogue: 0,2:06:07.93,2:06:09.71,english,,0,0,0,,I mean, it just slows life down.
Dialogue: 0,2:06:07.93,2:06:09.71,chinese,,0,0,0,,我的意思是，这只会让生活变慢。
Dialogue: 0,2:06:09.71,2:06:11.47,english,,0,0,0,,And so it just gets annoying quickly.
Dialogue: 0,2:06:09.71,2:06:11.47,chinese,,0,0,0,,所以很快就会让人厌烦。
Dialogue: 0,2:06:11.47,2:06:16.07,english,,0,0,0,,So command line arguments just let you express your whole thought all at once.
Dialogue: 0,2:06:11.47,2:06:16.07,chinese,,0,0,0,,因此，命令行参数可以让你一次性表达你的全部想法。
Dialogue: 0,2:06:16.07,2:06:18.20,english,,0,0,0,,So how can I do this?
Dialogue: 0,2:06:16.07,2:06:18.20,chinese,,0,0,0,,那么，我该怎么做呢？
Dialogue: 0,2:06:18.20,2:06:22.45,english,,0,0,0,,Well, if I want to express the notion of command line arguments in my code,
Dialogue: 0,2:06:18.20,2:06:22.45,chinese,,0,0,0,,好吧，如果我想在代码中表达命令行参数的概念、
Dialogue: 0,2:06:22.45,2:06:25.64,english,,0,0,0,,I could do something like this.
Dialogue: 0,2:06:22.45,2:06:25.64,chinese,,0,0,0,,我可以这样做
Dialogue: 0,2:06:25.64,2:06:34.78,english,,0,0,0,,I could, for the very first time, go up and get rid of this void, which as of today means, this program takes no command line arguments.
Dialogue: 0,2:06:25.64,2:06:34.78,chinese,,0,0,0,,这是我第一次可以上天入地，摆脱这种无效状态，也就是从今天开始，这个程序不需要命令行参数了。
Dialogue: 0,2:06:34.78,2:06:37.54,english,,0,0,0,,And I can change it to exactly this.
Dialogue: 0,2:06:34.78,2:06:37.54,chinese,,0,0,0,,我可以把它改成这样。
Dialogue: 0,2:06:37.54,2:06:43.49,english,,0,0,0,,Int argc, string argv, with brackets.
Dialogue: 0,2:06:37.54,2:06:43.49,chinese,,0,0,0,,Int argc，字符串 argv，带括号。
Dialogue: 0,2:06:43.49,2:06:44.95,english,,0,0,0,,Now it's cryptic, admittedly.
Dialogue: 0,2:06:43.49,2:06:44.95,chinese,,0,0,0,,诚然，现在它很隐晦。
Dialogue: 0,2:06:44.95,2:06:46.15,english,,0,0,0,,And let me zoom in.
Dialogue: 0,2:06:44.95,2:06:46.15,chinese,,0,0,0,,让我放大画面。
Dialogue: 0,2:06:46.15,2:06:49.30,english,,0,0,0,,But I think we can perhaps infer now, what's going on.
Dialogue: 0,2:06:46.15,2:06:49.30,chinese,,0,0,0,,但我认为，我们现在或许可以推断出发生了什么。
Dialogue: 0,2:06:49.30,2:06:59.23,english,,0,0,0,,If main now does not have void as its input, which means it takes no arguments, surely, the spoiler here is that now main will take command line arguments somehow.
Dialogue: 0,2:06:49.30,2:06:59.23,chinese,,0,0,0,,如果现在的 main 没有 void 作为输入，这意味着它不需要参数，当然，这里的剧透是，现在的 main 将以某种方式获取命令行参数。
Dialogue: 0,2:06:59.23,2:07:05.18,english,,0,0,0,,Any guesses as to what argv is or will be?
Dialogue: 0,2:06:59.23,2:07:05.18,chinese,,0,0,0,,猜猜 argv 现在是什么样子，将来会是什么样子？
Dialogue: 0,2:07:05.18,2:07:08.33,english,,0,0,0,,What might this represent?
Dialogue: 0,2:07:05.18,2:07:08.33,chinese,,0,0,0,,这可能代表什么？
Dialogue: 0,2:07:08.33,2:07:11.39,english,,0,0,0,,It's an array of strings, right, by way of the syntax.
Dialogue: 0,2:07:08.33,2:07:11.39,chinese,,0,0,0,,根据语法，这是一个字符串数组。
Dialogue: 0,2:07:11.39,2:07:13.22,english,,0,0,0,,Yeah?
Dialogue: 0,2:07:13.22,2:07:15.48,english,,0,0,0,,AUDIENCE: All the characters will be typed out.
Dialogue: 0,2:07:13.22,2:07:15.48,chinese,,0,0,0,,观众：所有的字符都会打出来。
Dialogue: 0,2:07:15.48,2:07:16.05,english,,0,0,0,,DAVID MALAN: Exactly.
Dialogue: 0,2:07:15.48,2:07:16.05,chinese,,0,0,0,,大卫-马兰：没错。
Dialogue: 0,2:07:16.05,2:07:19.83,english,,0,0,0,,It will be all of the characters, or really all of the words that you type at the prompt.
Dialogue: 0,2:07:16.05,2:07:19.83,chinese,,0,0,0,,这将是您在提示符下输入的所有字符，或者说所有单词。
Dialogue: 0,2:07:19.83,2:07:21.76,english,,0,0,0,,Argc, as an int, any guess?
Dialogue: 0,2:07:19.83,2:07:21.76,chinese,,0,0,0,,Argc，作为一个 int，猜猜看？
Dialogue: 0,2:07:24.36,2:07:30.29,english,,0,0,0,,Argument count is what it generally stands for, though technically, you could call these things anything.
Dialogue: 0,2:07:24.36,2:07:30.29,chinese,,0,0,0,,一般来说，"论据数 "代表的是 "论证次数"，不过从技术上讲，你可以把这些东西叫做任何东西。
Dialogue: 0,2:07:30.29,2:07:31.52,english,,0,0,0,,But this is the convention.
Dialogue: 0,2:07:30.29,2:07:31.52,chinese,,0,0,0,,但这就是惯例。
Dialogue: 0,2:07:31.52,2:07:41.42,english,,0,0,0,,Because I claimed earlier that arrays don't keep track of their own length, if you want to know how many words the human typed at the prompt after your program's name, you have to be told,
Dialogue: 0,2:07:31.52,2:07:41.42,chinese,,0,0,0,,因为我之前说过数组不会记录自己的长度，所以如果你想知道人类在你的程序名称后面的提示符下输入了多少个字，你必须被告知、
Dialogue: 0,2:07:41.42,2:07:45.65,english,,0,0,0,,not just the array of the words, but the length of that array.
Dialogue: 0,2:07:41.42,2:07:45.65,chinese,,0,0,0,,不仅是单词数组，还有数组的长度。
Dialogue: 0,2:07:45.65,2:07:55.02,english,,0,0,0,,The strings, you can figure out the length of using strlen, but you can't figure out the length of the array of strings, the collection of words that the human typed in.
Dialogue: 0,2:07:45.65,2:07:55.02,chinese,,0,0,0,,使用 strlen 可以计算出字符串的长度，但无法计算出字符串数组的长度，即人类输入的单词集合的长度。
Dialogue: 0,2:07:55.02,2:07:56.76,english,,0,0,0,,So how can I now use this?
Dialogue: 0,2:07:55.02,2:07:56.76,chinese,,0,0,0,,那么，我现在该如何使用它呢？
Dialogue: 0,2:07:56.76,2:07:59.19,english,,0,0,0,,Well, let me go ahead and do this.
Dialogue: 0,2:07:56.76,2:07:59.19,chinese,,0,0,0,,好吧，让我来做这件事。
Dialogue: 0,2:07:59.19,2:08:04.19,english,,0,0,0,,Let me go ahead and change this program now just to be printf, quote unquote,
Dialogue: 0,2:07:59.19,2:08:04.19,chinese,,0,0,0,,让我现在就把这个程序改成 printf，引号后加引号、
Dialogue: 0,2:08:04.19,2:08:11.63,english,,0,0,0,,"hello, %2 /n", then argv[1].
Dialogue: 0,2:08:04.19,2:08:11.63,chinese,,0,0,0,,"hello, %2 /n"，则 argv[1]。
Dialogue: 0,2:08:11.63,2:08:14.78,english,,0,0,0,,So this is not the best version of my code yet, but it's my first.
Dialogue: 0,2:08:11.63,2:08:14.78,chinese,,0,0,0,,因此，这还不是我的代码的最佳版本，但这是我的第一个版本。
Dialogue: 0,2:08:14.78,2:08:21.02,english,,0,0,0,,Make greet, and now let me do ./greet, David all at once.
Dialogue: 0,2:08:14.78,2:08:21.02,chinese,,0,0,0,,打招呼，现在让我一次完成 ./greet, David。
Dialogue: 0,2:08:21.02,2:08:23.21,english,,0,0,0,,Enter, hello, David.
Dialogue: 0,2:08:21.02,2:08:23.21,chinese,,0,0,0,,进来，你好，戴维。
Dialogue: 0,2:08:23.21,2:08:25.82,english,,0,0,0,,Now let me run it again, ./greet, Carter.
Dialogue: 0,2:08:23.21,2:08:25.82,chinese,,0,0,0,,现在让我再运行一次，./问候，卡特。
Dialogue: 0,2:08:25.82,2:08:27.62,english,,0,0,0,,Enter, hello, Carter.
Dialogue: 0,2:08:25.82,2:08:27.62,chinese,,0,0,0,,进来，你好，卡特
Dialogue: 0,2:08:27.62,2:08:32.33,english,,0,0,0,,It's a marginal improvement, but I don't have to wait for getString to prompt me to hit Enter.
Dialogue: 0,2:08:27.62,2:08:32.33,chinese,,0,0,0,,这只是微不足道的改进，但我不必等待 getString 提示我按回车键。
Dialogue: 0,2:08:32.33,2:08:34.37,english,,0,0,0,,It's just speeding things up, twice as fast.
Dialogue: 0,2:08:32.33,2:08:34.37,chinese,,0,0,0,,这只是加快了速度，快了一倍。
Dialogue: 0,2:08:34.37,2:08:36.89,english,,0,0,0,,One less command to type in.
Dialogue: 0,2:08:34.37,2:08:36.89,chinese,,0,0,0,,少输入一条命令
Dialogue: 0,2:08:36.89,2:08:41.39,english,,0,0,0,,But I deliberately did [1], but what's the beginning of argv?
Dialogue: 0,2:08:36.89,2:08:41.39,chinese,,0,0,0,,但我故意做了 [1]，但 argv 的开头是什么？
Dialogue: 0,2:08:41.39,2:08:42.17,english,,0,0,0,,It would be [0].
Dialogue: 0,2:08:41.39,2:08:42.17,chinese,,0,0,0,,应该是 [0]。
Dialogue: 0,2:08:44.73,2:08:45.78,english,,0,0,0,,Well, what's that?
Dialogue: 0,2:08:44.73,2:08:45.78,chinese,,0,0,0,,那是什么？
Dialogue: 0,2:08:45.78,2:08:48.84,english,,0,0,0,,This is sometimes useful, though for now, it's not.
Dialogue: 0,2:08:45.78,2:08:48.84,chinese,,0,0,0,,这有时是有用的，但目前还没有。
Dialogue: 0,2:08:48.84,2:08:54.11,english,,0,0,0,,Suppose I recompile my code and run this program now, greet David.
Dialogue: 0,2:08:48.84,2:08:54.11,chinese,,0,0,0,,假设我现在重新编译代码并运行这个程序，向大卫问好。
Dialogue: 0,2:08:54.11,2:08:58.59,english,,0,0,0,,Anyone want to guess what's in argv[0]?
Dialogue: 0,2:08:54.11,2:08:58.59,chinese,,0,0,0,,有人想猜猜 argv[0] 中的内容吗？
Dialogue: 0,2:08:58.59,2:08:59.53,english,,0,0,0,,AUDIENCE: [INAUDIBLE]
Dialogue: 0,2:08:59.53,2:09:00.22,english,,0,0,0,,DAVID MALAN: Say again?
Dialogue: 0,2:08:59.53,2:09:00.22,chinese,,0,0,0,,再说一遍？
Dialogue: 0,2:09:00.22,2:09:01.23,english,,0,0,0,,AUDIENCE: Greet, hello.
Dialogue: 0,2:09:00.22,2:09:01.23,chinese,,0,0,0,,观众：Greet, hello.
Dialogue: 0,2:09:01.23,2:09:04.53,english,,0,0,0,,DAVID MALAN: Greet, Enter, hello, ./greet.
Dialogue: 0,2:09:01.23,2:09:04.53,chinese,,0,0,0,,DAVID MALAN：Greet（问候），Enter（输入），hello（你好），./greet（问候）。
Dialogue: 0,2:09:04.53,2:09:14.46,english,,0,0,0,,So if you want to sort of inception style your program to figure out what its own name is, or at least how it was executed at the command line, at the terminal, you can look at argv[0].
Dialogue: 0,2:09:04.53,2:09:14.46,chinese,,0,0,0,,因此，如果你想对你的程序进行初探，找出它自己的名字，或者至少知道它是如何在命令行、终端上执行的，你可以查看 argv[0]。
Dialogue: 0,2:09:14.46,2:09:21.90,english,,0,0,0,,In general, probably not that useful, probably better to start looking at [1], which was the first word after the program name.
Dialogue: 0,2:09:14.46,2:09:21.90,chinese,,0,0,0,,总的来说，可能用处不大，最好还是从 [1] 开始看起，这是程序名称后面的第一个词。
Dialogue: 0,2:09:21.90,2:09:27.69,english,,0,0,0,,And if there were more, I could do this how about argv[2], let me add in a second %s.
Dialogue: 0,2:09:21.90,2:09:27.69,chinese,,0,0,0,,如果有更多，我可以这样做 argv[2] 怎么样，让我添加第二个 %s。
Dialogue: 0,2:09:27.69,2:09:29.55,english,,0,0,0,,Let me recompile greet.
Dialogue: 0,2:09:27.69,2:09:29.55,chinese,,0,0,0,,让我重新编译问候语。
Dialogue: 0,2:09:29.55,2:09:37.11,english,,0,0,0,,Let me do ./greet David Malan, Enter, and that, too, now works, taking in two words at the prompt.
Dialogue: 0,2:09:29.55,2:09:37.11,chinese,,0,0,0,,让我输入 ./greet David Malan，回车，现在也可以了，按提示输入了两个单词。
Dialogue: 0,2:09:37.11,2:09:38.82,english,,0,0,0,,If I really want to be smart at this now,
Dialogue: 0,2:09:37.11,2:09:38.82,chinese,,0,0,0,,如果我现在真的想在这个问题上耍小聪明的话、
Dialogue: 0,2:09:38.82,2:09:40.44,english,,0,0,0,,I could do something like this, though.
Dialogue: 0,2:09:38.82,2:09:40.44,chinese,,0,0,0,,不过，我可以这样做。
Dialogue: 0,2:09:40.44,2:09:58.44,english,,0,0,0,,How about if the count of arguments, A.K.A. argc, equals equals to, then assume that the human typed in only their first name, and do printf hello comma %s /n, and then argv[1].
Dialogue: 0,2:09:40.44,2:09:58.44,chinese,,0,0,0,,如果参数数（又称 argc）等于等于，那么假定人类只输入了自己的名字，并执行 printf hello comma %s /n，然后输入 argv[1]。
Dialogue: 0,2:09:58.44,2:10:07.89,english,,0,0,0,,Else, if the human did not provide exactly two arguments, the name of the program and their own name, let's just print out a default value, lest they forgot their name
Dialogue: 0,2:09:58.44,2:10:07.89,chinese,,0,0,0,,否则，如果人类没有提供准确的两个参数，即程序名称和他们自己的姓名，我们就打印出一个默认值，以免他们忘记自己的姓名
Dialogue: 0,2:10:07.89,2:10:09.99,english,,0,0,0,,or they typed in two names or three names.
Dialogue: 0,2:10:07.89,2:10:09.99,chinese,,0,0,0,,或者他们输入了两个或三个名字。
Dialogue: 0,2:10:09.99,2:10:13.11,english,,0,0,0,,Let's just do, hello comma world as a default.
Dialogue: 0,2:10:09.99,2:10:13.11,chinese,,0,0,0,,让我们把 "你好，逗号世界 "作为默认设置。
Dialogue: 0,2:10:13.11,2:10:15.27,english,,0,0,0,,And we'll just ignore what the human typed in.
Dialogue: 0,2:10:13.11,2:10:15.27,chinese,,0,0,0,,我们将忽略人类输入的内容。
Dialogue: 0,2:10:15.27,2:10:20.85,english,,0,0,0,,If I recompile this, make greet, I can do ./greet and David again, Enter.
Dialogue: 0,2:10:15.27,2:10:20.85,chinese,,0,0,0,,如果我重新编译，制作问候语，我就可以再次执行 ./greet 和 David，回车。
Dialogue: 0,2:10:20.85,2:10:24.84,english,,0,0,0,,Oops-- sorry, what am I missing?
Dialogue: 0,2:10:20.85,2:10:24.84,chinese,,0,0,0,,哎呀--对不起，我漏掉了什么？
Dialogue: 0,2:10:24.84,2:10:26.64,english,,0,0,0,,Yeah, so newbie mistake.
Dialogue: 0,2:10:24.84,2:10:26.64,chinese,,0,0,0,,是啊，新手的错误。
Dialogue: 0,2:10:26.64,2:10:30.09,english,,0,0,0,,Else, all right, make greet again.
Dialogue: 0,2:10:26.64,2:10:30.09,chinese,,0,0,0,,否则，好吧，再打一次招呼。
Dialogue: 0,2:10:30.09,2:10:34.05,english,,0,0,0,,./greet, David, Enter, there's my hello, David.
Dialogue: 0,2:10:30.09,2:10:34.05,chinese,,0,0,0,,./你好，戴维，回车，这是我的你好，戴维。
Dialogue: 0,2:10:34.05,2:10:37.87,english,,0,0,0,,But if I omit my name, I just get the generic, like a default value.
Dialogue: 0,2:10:34.05,2:10:37.87,chinese,,0,0,0,,但如果我省略自己的名字，就会得到通用值，就像默认值一样。
Dialogue: 0,2:10:37.87,2:10:41.59,english,,0,0,0,,And if I get a little curious and I type in both names, then I get ignored too.
Dialogue: 0,2:10:37.87,2:10:41.59,chinese,,0,0,0,,如果我有点好奇，同时输入两个名字，也会被忽略。
Dialogue: 0,2:10:41.59,2:10:42.09,english,,0,0,0,,Why?
Dialogue: 0,2:10:42.09,2:10:44.88,english,,0,0,0,,Because I just haven't built in support for argc of three.
Dialogue: 0,2:10:42.09,2:10:44.88,chinese,,0,0,0,,因为我还没有为三个 argc 建立支持。
Dialogue: 0,2:10:44.88,2:10:50.73,english,,0,0,0,,I could do anything I want, but now we have access to these kinds of building blocks.
Dialogue: 0,2:10:44.88,2:10:50.73,chinese,,0,0,0,,我可以做任何我想做的事情，但现在我们可以使用这些积木了。
Dialogue: 0,2:10:50.73,2:10:52.78,english,,0,0,0,,All right, what else might I do here?
Dialogue: 0,2:10:50.73,2:10:52.78,chinese,,0,0,0,,好吧，我还能在这里做什么？
Dialogue: 0,2:10:52.78,2:10:57.66,english,,0,0,0,,Well, it turns out there might be some final features for us to now execute.
Dialogue: 0,2:10:52.78,2:10:57.66,chinese,,0,0,0,,事实证明，我们现在可能需要执行一些最终功能。
Dialogue: 0,2:10:57.66,2:11:06.18,english,,0,0,0,,Notice, though, that in C, despite what you might see in books or online tutorials, nowadays, the two official formats for defining a main function
Dialogue: 0,2:10:57.66,2:11:06.18,chinese,,0,0,0,,不过请注意，在 C 语言中，尽管你可能会在书本或在线教程中看到，但如今定义主函数的两种正式格式是
Dialogue: 0,2:11:06.18,2:11:17.88,english,,0,0,0,,are either this, which we've been using now for two plus weeks or now this, whereby, you change the void to int argc, and then for now, string argv, and then empty brackets.
Dialogue: 0,2:11:06.18,2:11:17.88,chinese,,0,0,0,,要么是这个，我们已经用了两个多星期了；要么是这个，你把 void 改成 int argc，然后现在是字符串 argv，然后是空括号。
Dialogue: 0,2:11:17.88,2:11:21.40,english,,0,0,0,,And we'll see that this, too, is a simplification, some training wheels if you will.
Dialogue: 0,2:11:17.88,2:11:21.40,chinese,,0,0,0,,我们会发现，这也是一种简化，可以说是一种训练。
Dialogue: 0,2:11:21.40,2:11:27.84,english,,0,0,0,,But for now, those are the two forms, even though you will see in online tutorials and even books, some people use main in different ways.
Dialogue: 0,2:11:21.40,2:11:27.84,chinese,,0,0,0,,但现在，这是两种形式，尽管你会在在线教程甚至书籍中看到，有些人以不同的方式使用 main。
Dialogue: 0,2:11:27.84,2:11:30.14,english,,0,0,0,,These are the two now to keep in mind.
Dialogue: 0,2:11:27.84,2:11:30.14,chinese,,0,0,0,,这是现在需要牢记的两点。
Dialogue: 0,2:11:30.14,2:11:33.36,english,,0,0,0,,And I'll note that these command line arguments are kind of all over the place.
Dialogue: 0,2:11:30.14,2:11:33.36,chinese,,0,0,0,,我要指出的是，这些命令行参数有点杂乱无章。
Dialogue: 0,2:11:33.36,2:11:35.59,english,,0,0,0,,Didn't probably expect to see this word on the screen here.
Dialogue: 0,2:11:33.36,2:11:35.59,chinese,,0,0,0,,可能没想到会在这里的屏幕上看到这个词。
Dialogue: 0,2:11:35.59,2:11:36.49,english,,0,0,0,,And what does it mean?
Dialogue: 0,2:11:35.59,2:11:36.49,chinese,,0,0,0,,这意味着什么？
Dialogue: 0,2:11:36.49,2:11:41.88,english,,0,0,0,,Well, it turns out that for decades-- there's actually this program that comes with Linux systems in particular called cowsay.
Dialogue: 0,2:11:36.49,2:11:41.88,chinese,,0,0,0,,事实证明，几十年来，Linux 系统自带的一个程序叫做 cowsay。
Dialogue: 0,2:11:41.88,2:11:42.51,english,,0,0,0,,Why?
Dialogue: 0,2:11:42.51,2:11:51.52,english,,0,0,0,,Probably because someone had too much free time once and decided to write a program that creates ASCII art out of a cow saying something textually on the screen.
Dialogue: 0,2:11:42.51,2:11:51.52,chinese,,0,0,0,,可能是因为有一次有人闲得无聊，决定写一个程序，把一头牛在屏幕上说的文字创作成 ASCII 艺术。
Dialogue: 0,2:11:51.52,2:11:55.78,english,,0,0,0,,But you use cowsay, just for fun, by way of command line arguments.
Dialogue: 0,2:11:51.52,2:11:55.78,chinese,,0,0,0,,但你使用 cowsay，只是为了好玩，通过命令行参数的方式。
Dialogue: 0,2:11:55.78,2:12:04.77,english,,0,0,0,,So for instance, let me propose that I go back to VS Code here, not because I want to write any code, but I just want to use my terminal window.
Dialogue: 0,2:11:55.78,2:12:04.77,chinese,,0,0,0,,例如，我建议回到 VS Code，这并不是因为我想写代码，而是我想使用我的终端窗口。
Dialogue: 0,2:12:04.77,2:12:07.32,english,,0,0,0,,And let me maximize my terminal window here.
Dialogue: 0,2:12:04.77,2:12:07.32,chinese,,0,0,0,,让我最大化终端窗口。
Dialogue: 0,2:12:07.32,2:12:13.17,english,,0,0,0,,And let me go ahead and type in something like, how about cowsay, space moo?
Dialogue: 0,2:12:07.32,2:12:13.17,chinese,,0,0,0,,让我继续输入 "cowsay "和 "space moo "怎么样？
Dialogue: 0,2:12:13.17,2:12:14.82,english,,0,0,0,,So cowsay is not a program I wrote.
Dialogue: 0,2:12:13.17,2:12:14.82,chinese,,0,0,0,,所以，cowsay 并不是我写的程序。
Dialogue: 0,2:12:14.82,2:12:16.03,english,,0,0,0,,It's been around for decades.
Dialogue: 0,2:12:14.82,2:12:16.03,chinese,,0,0,0,,它已经存在了几十年。
Dialogue: 0,2:12:16.03,2:12:18.87,english,,0,0,0,,But we installed it in VS Code for you in the cloud.
Dialogue: 0,2:12:16.03,2:12:18.87,chinese,,0,0,0,,但我们在云中为您将其安装到了 VS 代码中。
Dialogue: 0,2:12:18.87,2:12:21.33,english,,0,0,0,,It takes at least one command line argument.
Dialogue: 0,2:12:18.87,2:12:21.33,chinese,,0,0,0,,它至少需要一个命令行参数。
Dialogue: 0,2:12:21.33,2:12:23.07,english,,0,0,0,,What do you want the cow to say?
Dialogue: 0,2:12:21.33,2:12:23.07,chinese,,0,0,0,,你想让奶牛说什么？
Dialogue: 0,2:12:23.07,2:12:29.49,english,,0,0,0,,I can say, cowsay moo, and hit Enter, and voila, there is my ASCII art of a cow saying moo on the screen.
Dialogue: 0,2:12:23.07,2:12:29.49,chinese,,0,0,0,,我可以说 "cowsay moo"，然后点击回车键，瞧，屏幕上就出现了我的 ASCII 艺术作品--一头牛在说 "哞"。
Dialogue: 0,2:12:29.49,2:12:31.09,english,,0,0,0,,It can say multiple words.
Dialogue: 0,2:12:29.49,2:12:31.09,chinese,,0,0,0,,它可以说多个单词。
Dialogue: 0,2:12:31.09,2:12:33.96,english,,0,0,0,,So I can say, Hello, world, Enter.
Dialogue: 0,2:12:31.09,2:12:33.96,chinese,,0,0,0,,这样我就可以说，你好，世界，输入。
Dialogue: 0,2:12:33.96,2:12:35.80,english,,0,0,0,,And now it says, Hello, world.
Dialogue: 0,2:12:33.96,2:12:35.80,chinese,,0,0,0,,现在它说，你好，世界。
Dialogue: 0,2:12:35.80,2:12:40.47,english,,0,0,0,,So this is just an example of a silly program that uses command line arguments, but it takes others too.
Dialogue: 0,2:12:35.80,2:12:40.47,chinese,,0,0,0,,因此，这只是一个使用命令行参数的傻瓜程序的例子，但它也会使用其他参数。
Dialogue: 0,2:12:40.47,2:12:45.75,english,,0,0,0,,Just like clang, use this convention of hyphens to change the output of the program.
Dialogue: 0,2:12:40.47,2:12:45.75,chinese,,0,0,0,,就像 clang 一样，使用连字符来改变程序的输出。
Dialogue: 0,2:12:45.75,2:12:53.52,english,,0,0,0,,Dash something is just a super common convention with command line arguments when you want a very terse notation for some option like output.
Dialogue: 0,2:12:45.75,2:12:53.52,chinese,,0,0,0,,Dash something 只是命令行参数的一个超级通用约定，当你想用非常简洁的符号来表示某些选项（如输出）时，就可以使用它。
Dialogue: 0,2:12:53.52,2:13:03.46,english,,0,0,0,,In cowsay, I read the documentation, and it turns out there's a dash f command line argument that allows you to change the appearance of the cow, if you will.
Dialogue: 0,2:12:53.52,2:13:03.46,chinese,,0,0,0,,在 "奶牛 "中，我阅读了文档，发现有一个破折号 f 命令行参数，可以改变奶牛的外观。
Dialogue: 0,2:13:03.46,2:13:11.64,english,,0,0,0,,So if I do cowsay dash f, duck, and then some other word like quack, it's no longer a cow.
Dialogue: 0,2:13:03.46,2:13:11.64,chinese,,0,0,0,,所以，如果我用 cowsay 破折号 f、duck，再加上其他一些词，比如 quack，它就不再是一头牛了。
Dialogue: 0,2:13:11.64,2:13:15.85,english,,0,0,0,,That command line argument turns it into a tiny, adorable duck instead.
Dialogue: 0,2:13:11.64,2:13:15.85,chinese,,0,0,0,,命令行参数会把它变成一只可爱的小鸭子。
Dialogue: 0,2:13:15.85,2:13:20.79,english,,0,0,0,,And then lastly, just for fun, because I spent way too much time playing with command line arguments.
Dialogue: 0,2:13:15.85,2:13:20.79,chinese,,0,0,0,,最后，只是为了好玩，因为我花了太多时间玩命令行参数。
Dialogue: 0,2:13:20.79,2:13:27.91,english,,0,0,0,,Cowsay dash f, dragon, and then how about, rawr, Enter, you can even get this on the screen here.
Dialogue: 0,2:13:20.79,2:13:27.91,chinese,,0,0,0,,Cowsay dash f, dragon, and then how about, rawr, Enter, you can even get this on the screen here.
Dialogue: 0,2:13:27.91,2:13:34.23,english,,0,0,0,,So this, too, is just an example of what you can do with these command line arguments now that we have this building block.
Dialogue: 0,2:13:27.91,2:13:34.23,chinese,,0,0,0,,因此，这也只是一个例子，说明我们有了这个构建模块后，可以用这些命令行参数做些什么。
Dialogue: 0,2:13:34.23,2:13:36.96,english,,0,0,0,,And there's one final thing we can now do with code.
Dialogue: 0,2:13:34.23,2:13:36.96,chinese,,0,0,0,,最后，我们还可以用代码做一件事。
Dialogue: 0,2:13:36.96,2:13:48.45,english,,0,0,0,,There's one last feature today that we'll introduce before we now connect all of these dots to readability and encryption by talking, lastly, about something called exit status.
Dialogue: 0,2:13:36.96,2:13:48.45,chinese,,0,0,0,,在我们将所有这些点与可读性和加密连接起来之前，我们今天还要介绍最后一个功能，即退出状态。
Dialogue: 0,2:13:48.45,2:13:58.26,english,,0,0,0,,It turns out that whenever your main function exits, it returns a secret integer that you can figure out, as the programmer or an advanced user, what it was.
Dialogue: 0,2:13:48.45,2:13:58.26,chinese,,0,0,0,,原来，每当主函数退出时，它都会返回一个秘密整数，作为程序员或高级用户，你可以猜出它是什么。
Dialogue: 0,2:13:58.26,2:14:02.39,english,,0,0,0,,And these exit codes, exit statuses, are typically used to indicate errors.
Dialogue: 0,2:13:58.26,2:14:02.39,chinese,,0,0,0,,这些退出代码、退出状态通常用来表示错误。
Dialogue: 0,2:14:02.39,2:14:08.56,english,,0,0,0,,So for instance, over the past couple of years, if you've used zoom and you ever got some kind of error, you might have seen a screen like this.
Dialogue: 0,2:14:02.39,2:14:08.56,chinese,,0,0,0,,例如，在过去的几年里，如果你使用缩放功能时出现了错误，你可能会看到这样的屏幕。
Dialogue: 0,2:14:08.56,2:14:11.04,english,,0,0,0,,It's usually not that helpful, maybe tells you to click
Dialogue: 0,2:14:08.56,2:14:11.04,chinese,,0,0,0,,通常没有什么帮助，也许会告诉你点击
Dialogue: 0,2:14:11.04,2:14:13.05,english,,0,0,0,,Report Problem or Contact Support.
Dialogue: 0,2:14:11.04,2:14:13.05,chinese,,0,0,0,,报告问题或联系技术支持。
Dialogue: 0,2:14:13.05,2:14:23.64,english,,0,0,0,,But very often in our human world on Macs, PCs, and phones, you see cryptic error codes, like literally numbers that probably only Zoom knows, or Microsoft or Google or whatever company
Dialogue: 0,2:14:13.05,2:14:23.64,chinese,,0,0,0,,但在我们人类世界的 Mac、PC 和手机上，你经常会看到隐晦的错误代码，比如字面上的数字，可能只有 Zoom、微软、谷歌或其他公司知道。
Dialogue: 0,2:14:23.64,2:14:25.05,english,,0,0,0,,wrote the software you're using.
Dialogue: 0,2:14:23.64,2:14:25.05,chinese,,0,0,0,,编写了您正在使用的软件。
Dialogue: 0,2:14:25.05,2:14:32.07,english,,0,0,0,,But that number corresponds to a specific error that some human somewhere knows might very well happen.
Dialogue: 0,2:14:25.05,2:14:32.07,chinese,,0,0,0,,但这个数字对应的是某个地方的某个人知道很可能会发生的特定错误。
Dialogue: 0,2:14:32.07,2:14:38.26,english,,0,0,0,,These are used similarly, although under a different name that we'll talk about later in the term, on the web as well.
Dialogue: 0,2:14:32.07,2:14:38.26,chinese,,0,0,0,,虽然名称不同，但在网络上也有类似的用法，我们稍后将讨论。
Dialogue: 0,2:14:38.26,2:14:41.35,english,,0,0,0,,Have you ever seen this-- maybe not character, but number?
Dialogue: 0,2:14:38.26,2:14:41.35,chinese,,0,0,0,,你见过这种情况吗--也许不是性格，而是数量？
Dialogue: 0,2:14:41.35,2:14:43.48,english,,0,0,0,,So, 404 means what?
Dialogue: 0,2:14:41.35,2:14:43.48,chinese,,0,0,0,,那么，404 意味着什么？
Dialogue: 0,2:14:43.48,2:14:44.88,english,,0,0,0,,AUDIENCE: Error.
Dialogue: 0,2:14:43.48,2:14:44.88,chinese,,0,0,0,,错误：错误。
Dialogue: 0,2:14:44.88,2:14:47.79,english,,0,0,0,,DAVID MALAN: So error, yes, but really, not found.
Dialogue: 0,2:14:44.88,2:14:47.79,chinese,,0,0,0,,DAVID MALAN：所以，错误，是的，但真的，没有找到。
Dialogue: 0,2:14:47.79,2:14:48.41,english,,0,0,0,,So, why?
Dialogue: 0,2:14:48.41,2:14:49.99,english,,0,0,0,,I mean, this is the most arcane thing.
Dialogue: 0,2:14:48.41,2:14:49.99,chinese,,0,0,0,,我的意思是，这是最神秘的事情。
Dialogue: 0,2:14:49.99,2:14:57.50,english,,0,0,0,,And we'll talk in a few weeks about what this and other numbers mean, but numbers are all around us in technology, and they very often mean something to the technical people who
Dialogue: 0,2:14:49.99,2:14:57.50,chinese,,0,0,0,,我们将在几周后讨论这个数字和其他数字的含义，但在技术领域，数字无处不在，它们通常对技术人员来说意味着什么。
Dialogue: 0,2:14:57.50,2:15:00.27,english,,0,0,0,,wrote the software, less so to humans like you and me.
Dialogue: 0,2:14:57.50,2:15:00.27,chinese,,0,0,0,,而对你我这样的人来说，就不那么重要了。
Dialogue: 0,2:15:00.27,2:15:05.90,english,,0,0,0,,Why so many of us recognize 404 is kind of weird, that like that's been around long enough that we all know it.
Dialogue: 0,2:15:00.27,2:15:05.90,chinese,,0,0,0,,为什么我们这么多人都认识 404，这有点奇怪，因为它已经存在了足够长的时间，我们都知道它。
Dialogue: 0,2:15:05.90,2:15:10.25,english,,0,0,0,,But it really is just a special number that represents an error of some sort.
Dialogue: 0,2:15:05.90,2:15:10.25,chinese,,0,0,0,,但它实际上只是一个特殊的数字，代表着某种错误。
Dialogue: 0,2:15:10.25,2:15:18.20,english,,0,0,0,,So it turns out, the last thing we'll reveal today about what we've been taking for granted for two weeks, is what the int is in main.
Dialogue: 0,2:15:10.25,2:15:18.20,chinese,,0,0,0,,事实证明，我们今天要揭示的最后一件事，就是这两周来我们一直认为理所当然的事情--主要的 int 是什么。
Dialogue: 0,2:15:18.20,2:15:24.68,english,,0,0,0,,We've seen, just a moment ago, that the thing in the parentheses, which up until now has been void, which means no command line arguments.
Dialogue: 0,2:15:18.20,2:15:24.68,chinese,,0,0,0,,刚才我们已经看到，括号中的内容到目前为止都是无效的，这意味着没有命令行参数。
Dialogue: 0,2:15:24.68,2:15:29.69,english,,0,0,0,,now int argc string argv brackets just means, yes, command line arguments.
Dialogue: 0,2:15:24.68,2:15:29.69,chinese,,0,0,0,,现在 int argc string argv 括弧的意思就是，是的，命令行参数。
Dialogue: 0,2:15:29.69,2:15:31.29,english,,0,0,0,,And we've seen how to access them.
Dialogue: 0,2:15:29.69,2:15:31.29,chinese,,0,0,0,,我们已经知道了如何访问它们。
Dialogue: 0,2:15:31.29,2:15:37.46,english,,0,0,0,,So the last piece of the puzzle, honestly, of all the cryptic syntax the past two weeks, is just what int means.
Dialogue: 0,2:15:31.29,2:15:37.46,chinese,,0,0,0,,因此，老实说，在过去两周所有的隐晦语法中，最后一块拼图就是 int 的含义。
Dialogue: 0,2:15:37.46,2:15:46.01,english,,0,0,0,,Int is always there for main, and it indicates that main will always return an integer, even though you and I have never done so explicitly.
Dialogue: 0,2:15:37.46,2:15:46.01,chinese,,0,0,0,,Int 始终存在于 main 中，它表明 main 将始终返回一个整数，尽管你我从未明确这样做。
Dialogue: 0,2:15:46.01,2:15:53.92,english,,0,0,0,,Usually, main returns 0, by default. But it would be weird if you saw an error message saying 0, so 0 is just hidden.
Dialogue: 0,2:15:46.01,2:15:53.92,chinese,,0,0,0,,通常，main 默认返回 0。但如果你看到的错误信息是 0，那就太奇怪了，所以 0 被隐藏起来了。
Dialogue: 0,2:15:53.92,2:15:55.47,english,,0,0,0,,You would never see it on the screen.
Dialogue: 0,2:15:53.92,2:15:55.47,chinese,,0,0,0,,你永远不会在屏幕上看到它。
Dialogue: 0,2:15:55.47,2:15:58.67,english,,0,0,0,,But it's happening automatically by way of how C is designed.
Dialogue: 0,2:15:55.47,2:15:58.67,chinese,,0,0,0,,但由于 C 语言的设计方式，这一切都会自动发生。
Dialogue: 0,2:15:58.67,2:16:01.55,english,,0,0,0,,So let me write one final program here.
Dialogue: 0,2:15:58.67,2:16:01.55,chinese,,0,0,0,,所以，让我在这里写最后一个程序。
Dialogue: 0,2:16:01.55,2:16:05.75,english,,0,0,0,,I'll call it, for instance, status.c to show you these exit statuses.
Dialogue: 0,2:16:01.55,2:16:05.75,chinese,,0,0,0,,例如，我会调用 status.c 向你展示这些退出状态。
Dialogue: 0,2:16:05.75,2:16:21.35,english,,0,0,0,,Code of status.c, and then up here, let me do something simple like include cs50.h, then include stdio.h, and then int main-- actually, let's use a command line argument. int argc, string argv[],
Dialogue: 0,2:16:05.75,2:16:21.35,chinese,,0,0,0,,status.c 的代码，然后在这里，让我做一些简单的事情，比如包含 cs50.h，然后包含 stdio.h，然后 int main -- 实际上，让我们使用命令行参数。 int argc，字符串 argv[]、
Dialogue: 0,2:16:21.35,2:16:23.18,english,,0,0,0,,so that's copy, paste.
Dialogue: 0,2:16:21.35,2:16:23.18,chinese,,0,0,0,,这就是复制、粘贴。
Dialogue: 0,2:16:23.18,2:16:26.00,english,,0,0,0,,But now let's do this.
Dialogue: 0,2:16:23.18,2:16:26.00,chinese,,0,0,0,,但现在，让我们这样做吧。
Dialogue: 0,2:16:26.00,2:16:30.78,english,,0,0,0,,If argc does not equal to-- why don't we do something like this?
Dialogue: 0,2:16:26.00,2:16:30.78,chinese,,0,0,0,,如果 argc 不等于 -- 为什么我们不这样做呢？
Dialogue: 0,2:16:30.78,2:16:33.74,english,,0,0,0,,Let's not just default to hello, world like last time.
Dialogue: 0,2:16:30.78,2:16:33.74,chinese,,0,0,0,,我们不要像上次一样，只默认为 "你好，世界"。
Dialogue: 0,2:16:33.74,2:16:34.77,english,,0,0,0,,Let's yell at the user.
Dialogue: 0,2:16:33.74,2:16:34.77,chinese,,0,0,0,,让我们对用户大喊大叫吧。
Dialogue: 0,2:16:34.77,2:16:43.16,english,,0,0,0,,So let's say something like printf missing command line argument, so that they know they screwed up and they need to run the program again correctly.
Dialogue: 0,2:16:34.77,2:16:43.16,chinese,,0,0,0,,因此，我们可以说printf 缺少命令行参数这样的话，这样他们就知道自己搞砸了，需要重新正确运行程序。
Dialogue: 0,2:16:43.16,2:16:56.73,english,,0,0,0,,Else, let's go ahead and say, print out, as before, Hello, comma %s, and then plug in argv[1], so the human's name from the prompt.
Dialogue: 0,2:16:43.16,2:16:56.73,chinese,,0,0,0,,否则，就像之前一样，打印出 "你好，逗号 %s"，然后输入 argv[1]，即提示符中的人名。
Dialogue: 0,2:16:56.73,2:17:03.59,english,,0,0,0,,Now at this point, let me go ahead and run status, ./status, and I'll type nothing first.
Dialogue: 0,2:16:56.73,2:17:03.59,chinese,,0,0,0,,现在，让我继续运行状态，./status，我先什么也不输入。
Dialogue: 0,2:17:03.59,2:17:04.70,english,,0,0,0,,I get yelled at.
Dialogue: 0,2:17:03.59,2:17:04.70,chinese,,0,0,0,,我被骂了。
Dialogue: 0,2:17:04.70,2:17:10.17,english,,0,0,0,,This time, I'll type it again. ./status David, and it works properly.
Dialogue: 0,2:17:04.70,2:17:10.17,chinese,,0,0,0,,这次，我再输入./status David，就可以正常工作了。
Dialogue: 0,2:17:10.17,2:17:14.09,english,,0,0,0,,But now let me show you a somewhat secret, cryptic command.
Dialogue: 0,2:17:10.17,2:17:14.09,chinese,,0,0,0,,不过，现在让我给你看一个有点秘密的、隐秘的命令。
Dialogue: 0,2:17:14.09,2:17:18.74,english,,0,0,0,,You can type this at your prompt, and it's just a coincidence that there's another dollar sign.
Dialogue: 0,2:17:14.09,2:17:18.74,chinese,,0,0,0,,你可以在提示符下输入这个，只是巧合的是，这里还有一个美元符号。
Dialogue: 0,2:17:18.74,2:17:25.49,english,,0,0,0,,Echo $?, totally arcane, but it allows you to see what exit status your program has ended with.
Dialogue: 0,2:17:18.74,2:17:25.49,chinese,,0,0,0,,Echo $?（回声 $?），完全神秘，但它可以让你看到程序结束时的退出状态。
Dialogue: 0,2:17:25.49,2:17:27.55,english,,0,0,0,,So let me run this again the wrong way.
Dialogue: 0,2:17:25.49,2:17:27.55,chinese,,0,0,0,,所以，让我用错误的方式再跑一次。
Dialogue: 0,2:17:27.55,2:17:31.03,english,,0,0,0,,./status, I get the error message.
Dialogue: 0,2:17:27.55,2:17:31.03,chinese,,0,0,0,,./status，我得到了错误信息。
Dialogue: 0,2:17:31.04,2:17:32.78,english,,0,0,0,,What was secretly returned?
Dialogue: 0,2:17:31.04,2:17:32.78,chinese,,0,0,0,,秘密归还了什么？
Dialogue: 0,2:17:32.78,2:17:33.44,english,,0,0,0,,I can't see it.
Dialogue: 0,2:17:32.78,2:17:33.44,chinese,,0,0,0,,我看不到。
Dialogue: 0,2:17:33.44,2:17:37.28,english,,0,0,0,,There's obviously no error screen, but by typing echo $?,
Dialogue: 0,2:17:33.44,2:17:37.28,chinese,,0,0,0,,显然没有错误屏幕，但输入 echo $?
Dialogue: 0,2:17:37.28,2:17:42.17,english,,0,0,0,,I can see that, oh, my program automatically, by default, returns zero.
Dialogue: 0,2:17:37.28,2:17:42.17,chinese,,0,0,0,,我可以看到，哦，我的程序默认自动返回 0。
Dialogue: 0,2:17:42.17,2:17:48.69,english,,0,0,0,,However, if I run it again correctly, ./status David, Enter, this is the correct version.
Dialogue: 0,2:17:42.17,2:17:48.69,chinese,,0,0,0,,不过，如果我再次正确运行 ./status David，回车，这就是正确的版本。
Dialogue: 0,2:17:48.69,2:17:52.87,english,,0,0,0,,But if I run echo $? status again, it's still entered with 0.
Dialogue: 0,2:17:48.69,2:17:52.87,chinese,,0,0,0,,但如果我再次运行 echo $? status，输入的仍然是 0。
Dialogue: 0,2:17:52.87,2:17:55.87,english,,0,0,0,,And long story short, this is just a missed opportunity.
Dialogue: 0,2:17:52.87,2:17:55.87,chinese,,0,0,0,,长话短说，这只是错失良机。
Dialogue: 0,2:17:55.87,2:17:59.57,english,,0,0,0,,When something goes wrong, why don't I return a value other than 0?
Dialogue: 0,2:17:55.87,2:17:59.57,chinese,,0,0,0,,出错时，为什么不返回 0 以外的值？
Dialogue: 0,2:17:59.57,2:18:01.07,english,,0,0,0,,0, by default, means success.
Dialogue: 0,2:17:59.57,2:18:01.07,chinese,,0,0,0,,默认情况下，0 表示成功。
Dialogue: 0,2:18:01.07,2:18:02.69,english,,0,0,0,,And it's always there automatically.
Dialogue: 0,2:18:01.07,2:18:02.69,chinese,,0,0,0,,它总是自动存在。
Dialogue: 0,2:18:02.69,2:18:04.94,english,,0,0,0,,But you can control this.
Dialogue: 0,2:18:02.69,2:18:04.94,chinese,,0,0,0,,但你可以控制这一点。
Dialogue: 0,2:18:04.94,2:18:11.16,english,,0,0,0,,I can go into my code here and return 1, else, if something works fine,
Dialogue: 0,2:18:04.94,2:18:11.16,chinese,,0,0,0,,我可以在这里输入我的代码，然后返回 1，否则，如果某些东西工作正常的话、
Dialogue: 0,2:18:11.16,2:18:17.12,english,,0,0,0,,I can return 0, by default. And honestly, if I omit the return zero, again, zero automatically is returned.
Dialogue: 0,2:18:11.16,2:18:17.12,chinese,,0,0,0,,默认情况下，我可以返回 0。老实说，如果我省略了返回 0，同样会自动返回 0。
Dialogue: 0,2:18:17.12,2:18:20.71,english,,0,0,0,,So let me go ahead and go be explicit, just so I know what's going on.
Dialogue: 0,2:18:17.12,2:18:20.71,chinese,,0,0,0,,所以让我先说清楚，好让我知道发生了什么。
Dialogue: 0,2:18:20.71,2:18:26.35,english,,0,0,0,,Make status again, ./status, and let's do this correctly with David.
Dialogue: 0,2:18:20.71,2:18:26.35,chinese,,0,0,0,,再做一次状态，./status，让我们和大卫一起正确操作。
Dialogue: 0,2:18:26.36,2:18:28.52,english,,0,0,0,,Enter, hello, David.
Dialogue: 0,2:18:26.36,2:18:28.52,chinese,,0,0,0,,进来，你好，戴维。
Dialogue: 0,2:18:28.52,2:18:32.05,english,,0,0,0,,Echo $?, zero.
Dialogue: 0,2:18:28.52,2:18:32.05,chinese,,0,0,0,,回声 $？
Dialogue: 0,2:18:32.05,2:18:33.26,english,,0,0,0,,So all is well.
Dialogue: 0,2:18:32.05,2:18:33.26,chinese,,0,0,0,,所以一切顺利。
Dialogue: 0,2:18:33.27,2:18:38.24,english,,0,0,0,,But now if I do ./status and nothing, or multiple things, but not just David,
Dialogue: 0,2:18:33.27,2:18:38.24,chinese,,0,0,0,,但现在，如果我执行 ./status 操作，什么都没有，或者执行多个操作，但不只是 David、
Dialogue: 0,2:18:38.24,2:18:40.53,english,,0,0,0,,Enter, I get the error message.
Dialogue: 0,2:18:38.24,2:18:40.53,chinese,,0,0,0,,输入后，我收到了错误信息。
Dialogue: 0,2:18:40.53,2:18:45.23,english,,0,0,0,,But now if I do echo $?, voila, there now is the one.
Dialogue: 0,2:18:40.53,2:18:45.23,chinese,,0,0,0,,但现在，如果我执行 echo $？
Dialogue: 0,2:18:45.23,2:18:47.33,english,,0,0,0,,So what does this now mean?
Dialogue: 0,2:18:45.23,2:18:47.33,chinese,,0,0,0,,这意味着什么？
Dialogue: 0,2:18:47.33,2:18:52.45,english,,0,0,0,,This is, in the graphical world, we would just show something like this on the screen, which is a little more informative to the user.
Dialogue: 0,2:18:47.33,2:18:52.45,chinese,,0,0,0,,在图形世界中，我们只需在屏幕上显示类似这样的内容，这对用户来说信息量更大一些。
Dialogue: 0,2:18:52.45,2:18:58.54,english,,0,0,0,,But even in the Linux world where you don't have a GUI, necessarily, even for the programs we've written, you can check these exit statuses.
Dialogue: 0,2:18:52.45,2:18:58.54,chinese,,0,0,0,,但即使在没有图形用户界面的 Linux 世界，即使是我们编写的程序，也可以检查这些退出状态。
Dialogue: 0,2:18:58.54,2:19:07.33,english,,0,0,0,,And in fact, more comfortable, more advanced programmers, when they write code that calls programs, be it cowsay or anything else, you can encode,
Dialogue: 0,2:18:58.54,2:19:07.33,chinese,,0,0,0,,事实上，更自如、更高级的程序员在编写调用程序的代码时，不管是 Cowsay 还是其他任何程序，都可以进行编码、
Dialogue: 0,2:19:07.34,2:19:13.17,english,,0,0,0,,check what the exit status is of a program, and then decide, did my program work or did it not?
Dialogue: 0,2:19:07.34,2:19:13.17,chinese,,0,0,0,,检查程序的退出状态，然后决定我的程序是成功了还是失败了？
Dialogue: 0,2:19:13.17,2:19:19.06,english,,0,0,0,,And now let's connect the final dots before we adjourn for some fruit snacks.
Dialogue: 0,2:19:13.17,2:19:19.06,chinese,,0,0,0,,现在，在我们散会去吃水果点心之前，让我们把最后的点连起来。
Dialogue: 0,2:19:19.07,2:19:27.65,english,,0,0,0,,Cryptography, namely one of the applications this week via which you'll be able to send, if you will, secret messages, and better yet, decrypt secret messages.
Dialogue: 0,2:19:19.07,2:19:27.65,chinese,,0,0,0,,密码学是本周的应用之一，通过它，你可以发送秘密信息，更好的是，还可以解密秘密信息。
Dialogue: 0,2:19:27.65,2:19:34.04,english,,0,0,0,,This will be in addition to perhaps analyzing the readability of text using heuristics, like we identified at the start of class two.
Dialogue: 0,2:19:27.65,2:19:34.04,chinese,,0,0,0,,除此之外，我们还可以使用启发式方法分析文本的可读性，就像我们在第二课开始时确定的那样。
Dialogue: 0,2:19:34.04,2:19:45.98,english,,0,0,0,,So cryptography is just the art, the science of encrypting information, scrambling information so that if you have a secret message to send in so-called plaintext, you can run it through some algorithm
Dialogue: 0,2:19:34.04,2:19:45.98,chinese,,0,0,0,,因此，密码学就是一门艺术，一门对信息进行加密、扰乱的科学，这样，如果你有一条秘密信息要以所谓的明文发送，你就可以通过某种算法来处理它。
Dialogue: 0,2:19:45.98,2:19:49.91,english,,0,0,0,,and turn it into what's called ciphertext, thereby, encrypting it.
Dialogue: 0,2:19:45.98,2:19:49.91,chinese,,0,0,0,,并将其转化为所谓的密文，从而对其进行加密。
Dialogue: 0,2:19:49.91,2:19:59.88,english,,0,0,0,,And only someone who knows what algorithm you've used and what input you've used to the algorithm, theoretically, can decrypt that process and convert it back to the original message.
Dialogue: 0,2:19:49.91,2:19:59.88,chinese,,0,0,0,,从理论上讲，只有知道你使用了什么算法以及你对算法使用了什么输入的人，才能解密这一过程，并将其转换回原始信息。
Dialogue: 0,2:19:59.88,2:20:03.03,english,,0,0,0,,So if we use our mental model from last week, here is a problem.
Dialogue: 0,2:19:59.88,2:20:03.03,chinese,,0,0,0,,因此，如果我们使用上周的思维模式，问题就来了。
Dialogue: 0,2:20:03.03,2:20:04.91,english,,0,0,0,,Here is an input and output.
Dialogue: 0,2:20:03.03,2:20:04.91,chinese,,0,0,0,,下面是输入和输出。
Dialogue: 0,2:20:04.91,2:20:13.64,english,,0,0,0,,The goal I claim here is to take some plain text, like the message you want to send, think back to grade school if you ever passed a note to a friend or to your crush saying, I love you,
Dialogue: 0,2:20:04.91,2:20:13.64,chinese,,0,0,0,,我在这里提出的目标是获取一些纯文本，比如你想发送的信息，回想一下小学时，你是否曾给朋友或暗恋的人递过一张纸条，上面写着 "我爱你"、
Dialogue: 0,2:20:13.64,2:20:16.91,english,,0,0,0,,it's a little awkward if the teacher or someone else intercepts the paper.
Dialogue: 0,2:20:13.64,2:20:16.91,chinese,,0,0,0,,如果老师或其他人拦截试卷，那就有点尴尬了。
Dialogue: 0,2:20:16.91,2:20:19.49,english,,0,0,0,,And in English, it just says, I love you, or whatever it is.
Dialogue: 0,2:20:16.91,2:20:19.49,chinese,,0,0,0,,而在英语中，它只是说 "我爱你"，或者其他什么意思。
Dialogue: 0,2:20:19.49,2:20:22.35,english,,0,0,0,,It'd be nice if you had at least encrypted it in some way.
Dialogue: 0,2:20:19.49,2:20:22.35,chinese,,0,0,0,,如果你至少能以某种方式加密就更好了。
Dialogue: 0,2:20:22.35,2:20:32.04,english,,0,0,0,,But the other person needs to know what algorithm you used and what inputs you use to that algorithm so that, ultimately, they can decode the so-called ciphertext, which is the output.
Dialogue: 0,2:20:22.35,2:20:32.04,chinese,,0,0,0,,但对方需要知道你使用了什么算法，以及该算法的输入是什么，这样才能最终解码所谓的密文，也就是输出。
Dialogue: 0,2:20:32.04,2:20:34.19,english,,0,0,0,,So what goes inside of the box today?
Dialogue: 0,2:20:32.04,2:20:34.19,chinese,,0,0,0,,那么，今天盒子里装的是什么呢？
Dialogue: 0,2:20:34.19,2:20:37.97,english,,0,0,0,,Well, an algorithm, as it relates to cryptography, is called a cipher.
Dialogue: 0,2:20:34.19,2:20:37.97,chinese,,0,0,0,,那么，与密码学有关的算法被称为密码。
Dialogue: 0,2:20:37.97,2:20:43.25,english,,0,0,0,,And a cipher is a fancy name for an algorithm that encrypts text from plaintext to ciphertext.
Dialogue: 0,2:20:37.97,2:20:43.25,chinese,,0,0,0,,密码是一种将文本从明文加密为密文的算法的别称。
Dialogue: 0,2:20:43.25,2:20:48.75,english,,0,0,0,,The catch is, there needs to be not just the algorithm, there needs to be an input to it.
Dialogue: 0,2:20:43.25,2:20:48.75,chinese,,0,0,0,,问题是，不仅需要有算法，还需要有输入。
Dialogue: 0,2:20:48.75,2:20:53.09,english,,0,0,0,,And so, for instance, you might draw the picture like this for the first time today.
Dialogue: 0,2:20:48.75,2:20:53.09,chinese,,0,0,0,,比如说，你今天可能第一次这样画图。
Dialogue: 0,2:20:53.09,2:20:54.25,english,,0,0,0,,And we've seen this in code.
Dialogue: 0,2:20:53.09,2:20:54.25,chinese,,0,0,0,,我们已经在代码中看到了这一点。
Dialogue: 0,2:20:54.25,2:20:57.18,english,,0,0,0,,You can give multiple inputs or arguments to functions.
Dialogue: 0,2:20:54.25,2:20:57.18,chinese,,0,0,0,,您可以为函数提供多个输入或参数。
Dialogue: 0,2:20:57.18,2:21:02.51,english,,0,0,0,,So in this black box, can you imagine passing in the message you want to send, and then some secret.
Dialogue: 0,2:20:57.18,2:21:02.51,chinese,,0,0,0,,所以，在这个黑盒子里，你能想象传入你想发送的信息，然后再传入一些秘密吗？
Dialogue: 0,2:21:02.51,2:21:10.31,english,,0,0,0,,So for instance, suppose that, the simplest thing I could think of as a kid was instead of sending the letter A, why don't I write the letter B?
Dialogue: 0,2:21:02.51,2:21:10.31,chinese,,0,0,0,,举个例子，假设我小时候能想到的最简单的事情是，与其寄信 A，我为什么不写 B 呢？
Dialogue: 0,2:21:10.31,2:21:13.07,english,,0,0,0,,Instead of the letter B, why don't I write the letter C?
Dialogue: 0,2:21:10.31,2:21:13.07,chinese,,0,0,0,,与其写字母 B，我为什么不写字母 C 呢？
Dialogue: 0,2:21:13.07,2:21:16.28,english,,0,0,0,,So I can kind of shift the English alphabet by one space.
Dialogue: 0,2:21:13.07,2:21:16.28,chinese,,0,0,0,,因此，我可以把英语字母表移动一个空格。
Dialogue: 0,2:21:16.28,2:21:18.74,english,,0,0,0,,So A becomes B, B becomes C, dot, dot, dot,
Dialogue: 0,2:21:16.28,2:21:18.74,chinese,,0,0,0,,因此，A 变成 B，B 变成 C，点，点，点、
Dialogue: 0,2:21:18.74,2:21:21.69,english,,0,0,0,,Z becomes A. You can wrap around at the end.
Dialogue: 0,2:21:18.74,2:21:21.69,chinese,,0,0,0,,Z 变成 A。
Dialogue: 0,2:21:21.69,2:21:24.12,english,,0,0,0,,And let's assume no punctuation in this part of the story.
Dialogue: 0,2:21:21.69,2:21:24.12,chinese,,0,0,0,,假设这部分故事没有标点符号。
Dialogue: 0,2:21:24.12,2:21:32.09,english,,0,0,0,,So that's a very simple algorithm-- add a value to each letter and send the value as the ciphertext.
Dialogue: 0,2:21:24.12,2:21:32.09,chinese,,0,0,0,,因此，这是一种非常简单的算法--给每个字母加上一个值，然后将这个值作为密文发送。
Dialogue: 0,2:21:32.09,2:21:41.30,english,,0,0,0,,And now the teacher, the classmate, they have to know that you use, not only this rotational algorithm, also known as a Caesar cipher, they also need to know what number you use.
Dialogue: 0,2:21:32.09,2:21:41.30,chinese,,0,0,0,,现在，老师和同学不仅要知道你使用了这种旋转算法，也就是所谓的凯撒密码，还要知道你使用了什么数字。
Dialogue: 0,2:21:41.30,2:21:45.20,english,,0,0,0,,Did you add 1 to every letter, 2 to every letter, 25 to every letter?
Dialogue: 0,2:21:41.30,2:21:45.20,chinese,,0,0,0,,你是每个字母加 1，每个字母加 2，还是每个字母加 25？
Dialogue: 0,2:21:45.20,2:21:51.16,english,,0,0,0,,Now if they're super smart and probably not the young age in this story, they could also just try all possibilities.
Dialogue: 0,2:21:45.20,2:21:51.16,chinese,,0,0,0,,现在，如果他们超级聪明，而且可能不是故事中的那个年纪，他们也可以尝试所有的可能性。
Dialogue: 0,2:21:51.16,2:21:53.04,english,,0,0,0,,And that would be an attack on the algorithm.
Dialogue: 0,2:21:51.16,2:21:53.04,chinese,,0,0,0,,这将是对算法的攻击。
Dialogue: 0,2:21:53.04,2:21:56.97,english,,0,0,0,,This is not a sophisticated algorithm, but it's enough to send a message in class.
Dialogue: 0,2:21:53.04,2:21:56.97,chinese,,0,0,0,,这种算法并不复杂，但足以在课堂上传递信息。
Dialogue: 0,2:21:56.97,2:22:06.95,english,,0,0,0,,So if the two inputs now are HI! as the plain text message, and 1 as the so-called key, the secret number that only you and the other person know, you
Dialogue: 0,2:21:56.97,2:22:06.95,chinese,,0,0,0,,因此，如果现在的两个输入是作为纯文本信息的 HI！和作为所谓密钥（即只有你和对方知道的秘密数字）的 1，那么你
Dialogue: 0,2:22:06.95,2:22:11.04,english,,0,0,0,,might be able to encrypt a message from one way to the other.
Dialogue: 0,2:22:06.95,2:22:11.04,chinese,,0,0,0,,可能会从一个方面对信息进行加密。
Dialogue: 0,2:22:11.04,2:22:16.19,english,,0,0,0,,And so in this case, for instance, HI! would become I-J-!.
Dialogue: 0,2:22:11.04,2:22:16.19,chinese,,0,0,0,,因此，在这种情况下，举例来说，"HI！"就会变成 "I-J-！"。
Dialogue: 0,2:22:16.19,2:22:19.82,english,,0,0,0,,In this version of the algorithm, we're not going to bother with numbers or punctuation.
Dialogue: 0,2:22:16.19,2:22:19.82,chinese,,0,0,0,,在这一版本的算法中，我们不打算使用数字或标点符号。
Dialogue: 0,2:22:19.82,2:22:23.09,english,,0,0,0,,We'll only operate on A through Z, be it uppercase or lowercase.
Dialogue: 0,2:22:19.82,2:22:23.09,chinese,,0,0,0,,我们只对 A 到 Z 进行操作，无论是大写还是小写。
Dialogue: 0,2:22:23.09,2:22:33.44,english,,0,0,0,,So now if you were to receive a slip of paper in class with I-J on it, you, the recipient, would know what it is so long as you know that the sender used one,
Dialogue: 0,2:22:23.09,2:22:33.44,chinese,,0,0,0,,因此，现在如果你在课堂上收到一张写有 I-J 的纸条，只要你知道发件人用的是 I-J，作为收件人的你就会知道它是什么、
Dialogue: 0,2:22:33.44,2:22:36.50,english,,0,0,0,,because you just reverse the algorithm and you subtract one instead.
Dialogue: 0,2:22:33.44,2:22:36.50,chinese,,0,0,0,,因为你只是颠倒了算法，而是减去了 1。
Dialogue: 0,2:22:36.50,2:22:42.97,english,,0,0,0,,The teacher, they probably don't know what this means, and they're not going to spend time hacking the message, so it just looks scrambled to them.
Dialogue: 0,2:22:36.50,2:22:42.97,chinese,,0,0,0,,老师可能不知道这是什么意思，他们也不会花时间去破解信息，所以对他们来说，这看起来就是乱码。
Dialogue: 0,2:22:42.97,2:22:44.60,english,,0,0,0,,And that's what we get from encryption.
Dialogue: 0,2:22:42.97,2:22:44.60,chinese,,0,0,0,,这就是我们从加密中得到的。
Dialogue: 0,2:22:44.60,2:22:52.70,english,,0,0,0,,Someone who intercepts it, be it in class or in the real world, on the internet or anywhere else, can't actually figure out, ideally, what it is you have sent.
Dialogue: 0,2:22:44.60,2:22:52.70,chinese,,0,0,0,,无论是在课堂上还是在现实世界中，无论是在互联网上还是在其他任何地方，被拦截的人实际上都无法弄清楚，理想情况下，你发送的是什么。
Dialogue: 0,2:22:52.70,2:22:56.30,english,,0,0,0,,The opposite, of course, is indeed called decryption, but the process is the same.
Dialogue: 0,2:22:52.70,2:22:56.30,chinese,,0,0,0,,当然，与之相反的情况确实叫做解密，但过程是一样的。
Dialogue: 0,2:22:56.30,2:22:58.37,english,,0,0,0,,We now pass in negative 1.
Dialogue: 0,2:22:56.30,2:22:58.37,chinese,,0,0,0,,我们现在通过负 1。
Dialogue: 0,2:22:58.37,2:23:00.30,english,,0,0,0,,And so how about this?
Dialogue: 0,2:22:58.37,2:23:00.30,chinese,,0,0,0,,这样如何？
Dialogue: 0,2:23:00.30,2:23:02.84,english,,0,0,0,,Why don't we end with a demonstration here?
Dialogue: 0,2:23:00.30,2:23:02.84,chinese,,0,0,0,,我们为什么不在这里以示威结束呢？
Dialogue: 0,2:23:02.84,2:23:08.36,english,,0,0,0,,UIJT XBT DT50-- there's a bit of a tell there.
Dialogue: 0,2:23:02.84,2:23:08.36,chinese,,0,0,0,,UIJT XBT DT50--有一些信息。
Dialogue: 0,2:23:08.36,2:23:14.18,english,,0,0,0,,If we pass that in and do negative 1, well, how do we get out the plaintext originally?
Dialogue: 0,2:23:08.36,2:23:14.18,chinese,,0,0,0,,如果我们把它传进去，然后做负 1，那么我们如何取出明文呢？
Dialogue: 0,2:23:14.18,2:23:18.20,english,,0,0,0,,Well, if this is the ciphertext, and we subtract 1 from each letter,
Dialogue: 0,2:23:14.18,2:23:18.20,chinese,,0,0,0,,好吧，如果这是密文，我们从每个字母中减去 1、
Dialogue: 0,2:23:18.20,2:23:28.01,english,,0,0,0,,I think U becomes T, I becomes H, J becomes I, T becomes S, X becomes W,
Dialogue: 0,2:23:18.20,2:23:28.01,chinese,,0,0,0,,我认为 U 变成了 T，I 变成了 H，J 变成了 I，T 变成了 S，X 变成了 W、
Dialogue: 0,2:23:28.01,2:23:37.58,english,,0,0,0,,B becomes A, T becomes S, D becomes C, T becomes S, and this was, indeed, CS50.
Dialogue: 0,2:23:28.01,2:23:37.58,chinese,,0,0,0,,B 变成 A，T 变成 S，D 变成 C，T 变成 S，这就是 CS50。
Dialogue: 0,2:23:37.58,2:23:40.25,english,,0,0,0,,Have a duck on your way out, and some snacks in the lobby.
Dialogue: 0,2:23:37.58,2:23:40.25,chinese,,0,0,0,,出门时吃只鸭子，在大厅里吃点小吃。
Dialogue: 0,2:23:40.25,2:23:42.35,english,,0,0,0,,[APPLAUSE]
Dialogue: 0,2:23:42.35,2:23:43.85,english,,0,0,0,,[FILM ROLLING]
Dialogue: 0,2:23:43.85,2:23:47.50,english,,0,0,0,,[MUSIC PLAYING]
