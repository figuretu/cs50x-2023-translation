1
00:00:00,330 --> 00:00:05,980
SPEAKER 1: In this lab, your task is going to be to write a program to simulate population growth.

2
00:00:05,980 --> 00:00:10,830
Let's imagine that we have a population of animals, a population of llamas, for example.

3
00:00:10,830 --> 00:00:15,570
Every year, we lose some animals from that population as older llamas die.

4
00:00:15,570 --> 00:00:20,050
But we also gain some animals to that population as new llamas are born.

5
00:00:20,050 --> 00:00:24,090
We can model this kind of population growth using a mathematical formula.

6
00:00:24,090 --> 00:00:34,470
Let's assume, for example, that every year, if we have a population of n llamas, we gain n divided by 3 llamas and we lose n divided by 4 llamas.

7
00:00:34,470 --> 00:00:41,940
So in a population of 12 llamas, for example, in the next year, we would gain 12 divided by 3, or four new llamas.

8
00:00:41,940 --> 00:00:47,320
And we would lose at 12 divided by 4, or losing three llamas, in that case.

9
00:00:47,320 --> 00:00:50,070
Given this setup, we could ask ourselves a question.

10
00:00:50,070 --> 00:00:58,120
For example, we could ask, how many years would it take to go from 20 llamas in a population to 30 llamas in a population?

11
00:00:58,120 --> 00:01:01,540
Right now for example, we have 20 llamas in this population.

12
00:01:01,540 --> 00:01:06,310
But after one year we would gain 20 divided by 3 llamas.

13
00:01:06,310 --> 00:01:10,000
Now notice here that 20 doesn't divide evenly into three.

14
00:01:10,000 --> 00:01:14,080
And as a result, we need to just truncate whatever would come after the decimal.

15
00:01:14,080 --> 00:01:17,180
The actual answer is going to be six point something.

16
00:01:17,180 --> 00:01:24,100
But because we can't have a fraction of an animal, we're just going to truncate whatever is after the decimal and say that we're gaining six llamas.

17
00:01:24,100 --> 00:01:28,810
And we're going to lose 20 divided by 4, which nicely equals five llamas.

18
00:01:28,810 --> 00:01:33,070
So after one year, we will now have 21 llamas.

19
00:01:33,070 --> 00:01:36,610
We can then repeat the process and consider what might happen in the next year.

20
00:01:36,610 --> 00:01:40,870
In the next year, we would gain 21 divided by 3, or seven llamas.

21
00:01:40,870 --> 00:01:47,290
And we would lose 21 divided by 4, truncating whatever is after the decimal, losing five llamas.

22
00:01:47,290 --> 00:01:49,750
Meaning we have a net change of two llamas.

23
00:01:49,750 --> 00:01:53,050
Which means that after two years, we now have 23 llamas.

24
00:01:53,050 --> 00:01:59,800
After the next year, we would gain seven llamas, lose five, for a new total of 25 llamas after three years.

25
00:01:59,800 --> 00:02:06,130
In the next year, we would gain eight llamas and lose six, for a new total of 27 llamas after four years.

26
00:02:06,130 --> 00:02:14,570
And then in the fifth year, we would gain at nine llamas and lose six for a total now of 30 llamas after five years.

27
00:02:14,570 --> 00:02:23,590
So the answer to the question, how many years would it take to go from a population of 20 llamas to a population of 30 llamas is five years.

28
00:02:23,590 --> 00:02:25,780
Now we did all of that math manually.

29
00:02:25,780 --> 00:02:31,600
But your task now is going to be to write a program in C that can do that calculation for us.

30
00:02:31,600 --> 00:02:33,700
The program will work like this.

31
00:02:33,700 --> 00:02:37,830
At the command line, you'll run a program, ./population.

32
00:02:37,830 --> 00:02:43,000
And at that point, your program should prompt the user for a starting population size.

33
00:02:43,000 --> 00:02:46,990
You might type of starting population size of 100, for example.

34
00:02:46,990 --> 00:02:51,130
Then your program should prompt the user for an ending population size.

35
00:02:51,130 --> 00:02:55,720
And the user will type in another population size, say 200, for example.

36
00:02:55,720 --> 00:03:06,320
Then your program should figure out how many years it would take to bring the population of llamas from the starting size to the ending size, and then print out that number of years.

37
00:03:06,320 --> 00:03:15,520
So in this case, our program would print years colon 9 because it would take nine years to bring the population from 100 to 200.

38
00:03:15,520 --> 00:03:18,030
So in summary, here's what you have to do.

39
00:03:18,030 --> 00:03:24,840
First, start by prompting the user for the starting population size of your population of llamas.

40
00:03:24,840 --> 00:03:29,340
And you should check to make sure that the user's input is at least nine.

41
00:03:29,340 --> 00:03:34,980
The population size needs to be at least nine so that we can actually start to grow this population of llamas.

42
00:03:34,980 --> 00:03:45,300
So if the user types in a number that's less than nine, you should keep re-prompting the user to type in a number again until they give you a number that's at least nine.

43
00:03:45,300 --> 00:03:55,130
Next, you should prompt the user for the ending population size, here making sure that the user's input is at least as large as the starting size.

44
00:03:55,130 --> 00:04:04,470
It wouldn't make sense, for example, to imagine the population going from a population of 100 to a population of 50 because the population is always going to be growing.

45
00:04:04,470 --> 00:04:11,380
So you'll want to make sure that the end population size is greater than or equal to the starting population size.

46
00:04:11,380 --> 00:04:22,980
If the user tries to type in an end population size that is less than the starting population size, then your program should continually re-prompt the user to type in another ending population size

47
00:04:22,980 --> 00:04:28,210
until they provide you one that is at least the starting population size.

48
00:04:28,210 --> 00:04:35,830
After that, your program should calculate how many years would be required to bring the population from the starting size to the ending size,

49
00:04:35,830 --> 00:04:42,190
recalling that every year we are going to add n divided by 3 llamas, if there are n llamas to begin with.

50
00:04:42,190 --> 00:04:45,010
And we're going to lose n divided by 4 llamas.

51
00:04:45,010 --> 00:04:52,360
And as with before, because we can't have fractions of a llama, if either of those computations ends up with something after the decimal,

52
00:04:52,360 --> 00:04:57,660
you're going to truncate or ignore what comes after that decimal when doing your math.

53
00:04:57,660 --> 00:05:01,890
Finally, after you've made that calculation, you'll print the number of years required.

54
00:05:01,890 --> 00:05:10,080
Printing years colon and then the number of years that would be required to bring the population up to that ending population size.

55
00:05:10,080 --> 00:05:14,460
As you start working on this problem, there are a few strategies that might prove helpful.

56
00:05:14,460 --> 00:05:21,310
One is a do while loop, a type of loop that lets you prompt the user one or more times for something, in this case.

57
00:05:21,310 --> 00:05:25,470
So in the loop you're seeing here, we start by declaring a variable called n.

58
00:05:25,470 --> 00:05:31,860
And then inside of a loop, we prompt the user for a positive integer, storing that integer inside of n.

59
00:05:31,860 --> 00:05:36,600
But we're going to keep repeating that loop as long as n is less than 1.

60
00:05:36,600 --> 00:05:41,730
Meaning if the user doesn't type in a positive integer, then we're going to prompt the user again.

61
00:05:41,730 --> 00:05:48,360
You won't use this exact code inside of your lab but you might use something similar, both when you're prompting for the starting population size

62
00:05:48,360 --> 00:05:58,500
to make sure that the starting population size is at least nine, and also when prompting for the end population size to make sure that the end population size is at least as

63
00:05:58,500 --> 00:06:01,410
large as the starting population size.

64
00:06:01,410 --> 00:06:06,190
You might also find it helpful to update a variable as you go about working on this lab.

65
00:06:06,190 --> 00:06:13,530
You might want to repeatedly update your population size variable, for example, in order to add new llamas and get rid of older llamas.

66
00:06:13,530 --> 00:06:15,900
You might do that using a formula like this.

67
00:06:15,900 --> 00:06:27,990
If you have a variable called n inside of which is your current population, you can update the value of n for the next year using a line that says n equals n plus n over 3, the number of llamas

68
00:06:27,990 --> 00:06:34,320
we're adding, minus n over 4, the number of llamas that we're losing in that particular year.

69
00:06:34,320 --> 00:06:47,620
And finally, once you've completed the calculation, you can print out a variable using the print f function, saying, printf years colon, and then %i, we're %i is going to stand in for an integer.

70
00:06:47,620 --> 00:06:50,610
Which Integer Well, that you specify after a comma.

71
00:06:50,610 --> 00:06:56,850
And here we're saying, print out the value of n as the integer to print to the user.

72
00:06:56,850 --> 00:07:02,150
Let's now take a look at the distribution code that we give you as a starting point for this problem.

73
00:07:02,150 --> 00:07:08,180
Here in population.c, we've already included cs50.h and stdio.h for you.

74
00:07:08,180 --> 00:07:11,720
And then giving you a main function with a few to dos to get started.

75
00:07:11,720 --> 00:07:16,760
You're going to first prompt for the start size, then prompt for the n size.

76
00:07:16,760 --> 00:07:23,550
Then calculate how many years it's going to take in order to reach that threshold value from the start size to the n size.

77
00:07:23,550 --> 00:07:31,260
And then finally, once you've done that computation, printing out the number of years that would be required to take you from the start to the end.

78
00:07:31,260 --> 00:07:40,690
Once you've written all of those pieces, you should then be able to compile your program and then run it, giving your program a starting population size and an ending population size.

79
00:07:40,690 --> 00:07:47,430
And then your program should be able to tell you how long it will take to get from point A to point B. My name is Brian.

80
00:07:47,430 --> 00:07:50,240
And this was population growth.

1
00:00:00,330 --> 00:00:05,980
发言人 1：在这个实验室里，你们的任务是编写一个模拟人口增长的程序。

2
00:00:05,980 --> 00:00:10,830
假设我们有一群动物，比如一群骆驼。

3
00:00:10,830 --> 00:00:15,570
每年，随着老骆驼的死亡，我们都会失去一些骆驼。

4
00:00:15,570 --> 00:00:20,050
但随着新骆驼的出生，我们也会增加一些骆驼数量。

5
00:00:20,050 --> 00:00:24,090
我们可以用数学公式来模拟这种人口增长。

6
00:00:24,090 --> 00:00:34,470
举例来说，假设我们每年有 n 只骆驼，那么我们会得到 n 除以 3 的骆驼数量，同时也会失去 n 除以 4 的骆驼数量。

7
00:00:34,470 --> 00:00:41,940
因此，以 12 只美洲驼为例，明年我们将获得 12 除以 3，即 4 只新美洲驼。

8
00:00:41,940 --> 00:00:47,320
如果是这样的话，我们就会以 12 除以 4 的方式输掉比赛，或者说输掉三只骆驼。

9
00:00:47,320 --> 00:00:50,070
在这种情况下，我们可以问自己一个问题。

10
00:00:50,070 --> 00:00:58,120
例如，我们可以问，从 20 只骆驼到 30 只骆驼需要多少年？

11
00:00:58,120 --> 00:01:01,540
比如现在，我们有 20 只美洲驼。

12
00:01:01,540 --> 00:01:06,310
但一年后，我们将获得 20 只骆驼除以 3 只。

13
00:01:06,310 --> 00:01:10,000
现在请注意，20 并没有平均分成 3 份。

14
00:01:10,000 --> 00:01:14,080
因此，我们需要截断小数点后的内容。

15
00:01:14,080 --> 00:01:17,180
实际答案是六点几。

16
00:01:17,180 --> 00:01:24,100
但因为我们不能用动物的分数来表示，所以我们只能截去小数点后面的部分，然后说我们获得了 6 只羊驼。

17
00:01:24,100 --> 00:01:28,810
我们将失去 20 除以 4，正好等于五只骆驼。

18
00:01:28,810 --> 00:01:33,070
因此，一年之后，我们将拥有 21 只骆驼。

19
00:01:33,070 --> 00:01:36,610
然后，我们可以重复这一过程，并考虑下一年可能发生的情况。

20
00:01:36,610 --> 00:01:40,870
下一年，我们将获得 21 除以 3，即 7 只骆驼。

21
00:01:40,870 --> 00:01:47,290
我们会失去 21 除以 4，截去小数点后的数字，失去五只骆驼。

22
00:01:47,290 --> 00:01:49,750
也就是说，我们净变了两只骆驼。

23
00:01:49,750 --> 00:01:53,050
也就是说，两年后，我们现在有 23 只骆驼了。

24
00:01:53,050 --> 00:01:59,800
第二年后，我们将增加 7 只骆驼，减少 5 只，三年后骆驼总数将达到 25 只。

25
00:01:59,800 --> 00:02:06,130
第二年，我们将增加 8 只骆驼，减少 6 只，四年后骆驼总数将达到 27 只。

26
00:02:06,130 --> 00:02:14,570
到了第五年，我们将增加 9 只骆驼，减少 6 只，五年后骆驼总数将达到 30 只。

27
00:02:14,570 --> 00:02:23,590
因此，从 20 只骆驼到 30 只骆驼需要多少年，这个问题的答案是五年。

28
00:02:23,590 --> 00:02:25,780
现在我们都是手动计算的。

29
00:02:25,780 --> 00:02:31,600
但你现在的任务是用 C 语言编写一个程序，帮我们完成计算。

30
00:02:31,600 --> 00:02:33,700
程序将这样运行

31
00:02:33,700 --> 00:02:37,830
在命令行中，你将运行一个程序 ./population。

32
00:02:37,830 --> 00:02:43,000
此时，程序应提示用户起始种群数量。

33
00:02:43,000 --> 00:02:46,990
例如，您可以输入 100 人的起始人口数。

34
00:02:46,990 --> 00:02:51,130
然后，您的程序应提示用户最终的种群数量。

35
00:02:51,130 --> 00:02:55,720
用户将输入另一个人口数量，例如 200。

36
00:02:55,720 --> 00:03:06,320
然后，您的程序应该计算出骆驼的数量从起始数量增加到终止数量需要多少年，然后打印出这个年数。

37
00:03:06,320 --> 00:03:15,520
因此，在这种情况下，我们的程序将打印年份冒号 9，因为需要 9 年时间才能将人口从 100 增至 200。

38
00:03:15,520 --> 00:03:18,030
因此，总而言之，你必须这样做。

39
00:03:18,030 --> 00:03:24,840
首先，提示用户骆驼的起始种群数量。

40
00:03:24,840 --> 00:03:29,340
您还应该检查用户的输入是否至少为 9。

41
00:03:29,340 --> 00:03:34,980
骆驼的数量至少要达到九只，这样我们才能真正开始增加骆驼的数量。

42
00:03:34,980 --> 00:03:45,300
因此，如果用户键入的数字小于 9，你就应该不断再次提示用户键入数字，直到他们给出一个至少是 9 的数字。

43
00:03:45,300 --> 00:03:55,130
接下来，你应该提示用户输入结束的种群数量，这里要确保用户输入的数量至少与起始数量一样大。

44
00:03:55,130 --> 00:04:04,470
例如，想象人口从 100 人变为 50 人是没有意义的，因为人口总是在增长。

45
00:04:04,470 --> 00:04:11,380
因此，您需要确保最终种群数量大于或等于起始种群数量。

46
00:04:11,380 --> 00:04:22,980
如果用户尝试键入的结束种群数量小于起始种群数量，那么程序应不断重新提示用户键入另一个结束种群数量。

47
00:04:22,980 --> 00:04:28,210
直到他们提供一个至少是起始种群数量的种群。

48
00:04:28,210 --> 00:04:35,830
然后，您的程序应该计算出需要多少年才能使人口从起始规模达到终止规模、

49
00:04:35,830 --> 00:04:42,190
回顾一下，如果一开始就有 n 只骆驼，那么每年我们都要加上 n 除以 3 的骆驼。

50
00:04:42,190 --> 00:04:45,010
我们将失去 n 除以 4 的骆驼。

51
00:04:45,010 --> 00:04:52,360
和以前一样，因为我们不能有骆驼的分数，如果其中任何一个计算结果在小数点后有东西的话、

52
00:04:52,360 --> 00:04:57,660
在计算时，你要截断或忽略小数点后面的内容。

53
00:04:57,660 --> 00:05:01,890
最后，在计算之后，您将打印出所需的年数。

54
00:05:01,890 --> 00:05:10,080
然后是使人口数量达到最终人口数量所需的年数。

55
00:05:10,080 --> 00:05:14,460
当你开始解决这个问题时，有一些策略可能会对你有所帮助。

56
00:05:14,460 --> 00:05:21,310
一种是 do while 循环，这种循环可以让你提示用户一次或多次，在本例中就是这样。

57
00:05:21,310 --> 00:05:25,470
因此，在你看到的循环中，我们首先声明一个名为 n 的变量。

58
00:05:25,470 --> 00:05:31,860
然后在一个循环中，我们会提示用户输入一个正整数，并将该整数存储在 n 中。

59
00:05:31,860 --> 00:05:36,600
但只要 n 小于 1，我们就会一直重复这个循环。

60
00:05:36,600 --> 00:05:41,730
也就是说，如果用户没有输入正整数，我们就会再次提示用户。

61
00:05:41,730 --> 00:05:48,360
您不会在实验室中使用完全相同的代码，但您可能会在提示起始种群数量时使用类似的代码

62
00:05:48,360 --> 00:05:58,500
确保起始种群数量至少为 9，在提示最终种群数量时，也要确保最终种群数量至少为

63
00:05:58,500 --> 00:06:01,410
与起始种群规模一样大。

64
00:06:01,410 --> 00:06:06,190
在实验过程中，您可能会发现更新变量也很有帮助。

65
00:06:06,190 --> 00:06:13,530
例如，您可能需要反复更新种群数量变量，以便添加新的骆驼和淘汰旧的骆驼。

66
00:06:13,530 --> 00:06:15,900
您可以使用这样的公式来计算。

67
00:06:15,900 --> 00:06:27,990
如果您有一个名为 n 的变量，其中包含当前的人口数量，您就可以更新下一年的 n 值，只需在一行中写明 n 等于 n 加上 n 超过 3，即骆驼的数量。

68
00:06:27,990 --> 00:06:34,320
我们再加上 n，减去 4，就是当年损失的骆驼数量。

69
00:06:34,320 --> 00:06:47,620
最后，完成计算后，您可以使用 print f 函数打印出一个变量，例如，printf 年冒号，然后是 %i，我们的 %i 将代表一个整数。

70
00:06:47,620 --> 00:06:50,610
您在逗号后指定的整数。

71
00:06:50,610 --> 00:06:56,850
在这里，我们是说，将 n 的值作为整数打印出来，打印给用户。

72
00:06:56,850 --> 00:07:02,150
现在让我们来看看我们为您提供的分发代码，作为解决这个问题的起点。

73
00:07:02,150 --> 00:07:08,180
在 population.c 中，我们已经为您加入了 cs50.h 和 stdio.h。

74
00:07:08,180 --> 00:07:11,720
然后为您提供一个主要功能，其中包括一些入门必做事项。

75
00:07:11,720 --> 00:07:16,760
首先提示起始尺寸，然后提示 n 尺寸。

76
00:07:16,760 --> 00:07:23,550
然后计算从起始规模到 n 规模需要多少年才能达到临界值。

77
00:07:23,550 --> 00:07:31,260
最后，计算完毕后，打印出从起点到终点所需的年数。

78
00:07:31,260 --> 00:07:40,690
写完所有这些部分后，您就可以编译程序并运行它，从而得出起始种群数量和终止种群数量。

79
00:07:40,690 --> 00:07:47,430
然后你的程序就能告诉你从 A 点到 B 点需要多长时间。

80
00:07:47,430 --> 00:07:50,240
这就是人口增长。

