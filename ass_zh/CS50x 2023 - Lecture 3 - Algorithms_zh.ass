[Script Info]
; Script generated by Aegisub 3.2.2
; http://www.aegisub.org/
Title: Default Aegisub file
ScriptType: v4.00+
WrapStyle: 0
ScaledBorderAndShadow: yes
YCbCr Matrix: TV.601
PlayResX: 1920
PlayResY: 1080

[Aegisub Project Garbage]
Audio File: ../video/CS50x 2023 - Lecture 3 - Algorithms.mp4
Video File: ../video/CS50x 2023 - Lecture 3 - Algorithms.mp4
Video AR Mode: 4
Video AR Value: 1.777778
Video Zoom Percent: 0.500000
Scroll Position: 2206
Active Line: 2208
Video Position: 105840

[V4+ Styles]
Format: Name, Fontname, Fontsize, PrimaryColour, SecondaryColour, OutlineColour, BackColour, Bold, Italic, Underline, StrikeOut, ScaleX, ScaleY, Spacing, Angle, BorderStyle, Outline, Shadow, Alignment, MarginL, MarginR, MarginV, Encoding
Style: chinese,思源黑体 CN Medium,60,&H00FFFFFF,&H000000FF,&H00000000,&H00000000,0,0,0,0,100,100,0,0,1,2,1,2,10,10,10,1
Style: english,Arial,35,&H00FFFFFF,&H000000FF,&H00000000,&H00000000,0,0,0,0,100,100,0,0,1,2,1,2,10,10,15,1
Style: Default,Arial,10,&H00FFFFFF,&H000000FF,&H00000000,&H00000000,0,0,0,0,100,100,0,0,1,1,0,2,10,10,10,1
Style: annotation,思源黑体 CN Medium,50,&H00FFFFFF,&H000000FF,&H00000000,&H00000000,0,0,0,0,100,100,0,0,1,2,1,2,10,10,10,1

[Events]
Format: Layer, Start, End, Style, Name, MarginL, MarginR, MarginV, Effect, Text
Dialogue: 0,0:00:00.00,0:00:02.98,english,,0,0,0,,[FILM REEL]
Dialogue: 0,0:00:02.98,0:00:06.46,english,,0,0,0,,[MUSIC PLAYING]
Dialogue: 0,0:01:12.66,0:01:15.42,english,,0,0,0,,DAVID MALAN: All right, this is CS50.
Dialogue: 0,0:01:12.66,0:01:15.42,chinese,,0,0,0,,这里是 CS50。
Dialogue: 0,0:01:15.42,0:01:21.40,english,,0,0,0,,And this is Week 3 already, wherein we'll take a look back actually at Week 0 where we first began.
Dialogue: 0,0:01:15.42,0:01:21.40,chinese,,0,0,0,,现在已经第 3 周了，我们先回顾一下第 0 周的情况。
Dialogue: 0,0:01:21.40,0:01:24.93,english,,0,0,0,,And in Week 0, recall that everything was very intuitive, in a sense.
Dialogue: 0,0:01:21.40,0:01:24.93,chinese,,0,0,0,,在第 0 周里，一切都非常直观，一目了然。
Dialogue: 0,0:01:24.93,0:01:28.00,english,,0,0,0,,We talked not just about representation of information, but algorithms.
Dialogue: 0,0:01:24.93,0:01:28.00,chinese,,0,0,0,,我们不仅仅讨论了信息的表示，还提到了算法。
Dialogue: 0,0:01:28.00,0:01:30.45,english,,0,0,0,,And we talked about tearing a phone book again and again.
Dialogue: 0,0:01:28.00,0:01:30.45,chinese,,0,0,0,,我们一下一下地撕完了整本电话簿。
Dialogue: 0,0:01:30.45,0:01:32.86,english,,0,0,0,,And that somehow got us to a better solution.
Dialogue: 0,0:01:30.45,0:01:32.86,chinese,,0,0,0,,找到了一种更好的解决办法（二分）。
Dialogue: 0,0:01:32.86,0:01:41.65,english,,0,0,0,,But today, we'll try to start formalizing some of those ideas and capturing some of those same ideas not in pseudocode just yet, but in actual code as well.
Dialogue: 0,0:01:32.86,0:01:41.65,chinese,,0,0,0,,今天，我们要试着把这些想法规范一下，不用伪代码，而是实际代码来实现算法。
Dialogue: 0,0:01:41.65,0:01:48.37,english,,0,0,0,,But we'll also consider the efficiency of those algorithms, like just how good, how well-designed our algorithms actually are.
Dialogue: 0,0:01:41.65,0:01:48.37,chinese,,0,0,0,,我们同时也要考虑这些算法的效率，算法到底设计得好不好，有没有很完善。
Dialogue: 0,0:01:48.37,0:01:56.46,english,,0,0,0,,And if you recall, when we did the phone book example wherein I first had an algorithm searching one page at a time, and then second one two pages at a time, and then third,
Dialogue: 0,0:01:48.37,0:01:56.46,chinese,,0,0,0,,还记得电话簿的那个例子吗，我首先是逐页逐页地找，\N第二次的时候，两页两页地找，
Dialogue: 0,0:01:56.46,0:02:01.90,english,,0,0,0,,started tearing the thing in half, recall that we, with a wave of the hand, kind of analyzed it as follows.
Dialogue: 0,0:01:56.46,0:02:01.90,chinese,,0,0,0,,而最后，我们把电话册扯成两份，一挥手就甩掉一半，然后做了下面的分析。
Dialogue: 0,0:02:01.90,0:02:11.43,english,,0,0,0,,We proposed that if the x-axis here is the size of the problem, like number of pages in a phone book, and the y-axis is the time required to solve the problem in seconds, minutes,
Dialogue: 0,0:02:01.90,0:02:11.43,chinese,,0,0,0,,我们让 x 轴代表问题的大小，比如电话簿的页数，\Ny 轴是解决问题花费的时间，单位可以是秒、分钟...
Dialogue: 0,0:02:11.43,0:02:23.28,english,,0,0,0,,page tears, whatever your unit of measure is, recall that the first algorithm, which is the straight line such that if you had n pages in the phone book, it might have this slope of n-- and there's this one-to-one relationship between pages and tears.
Dialogue: 0,0:02:11.43,0:02:23.28,chinese,,0,0,0,,不管计量单位取什么，要记住，第一种算法是这样的直线：\N有 n 页电话簿，它的斜率就是 n—— 页数和花费的时间是一一对应的关系。
Dialogue: 0,0:02:23.28,0:02:33.57,english,,0,0,0,,Two pages at a time, of course, was twice as fast, but still really the same shape, the yellow line here indicating that yeah, it's n over 2, maybe plus 1 if you have to double back, as we discussed.
Dialogue: 0,0:02:23.28,0:02:33.57,chinese,,0,0,0,,如果两页两页地翻，速度快了一倍，但还是一条直线，就是这里的黄线，\N虽然每次过 2 页，可能还要往回翻一次加 1 页，第一节课讨论过的。
Dialogue: 0,0:02:33.57,0:02:38.37,english,,0,0,0,,But it's really still fundamentally the same algorithm one or two pages at a time.
Dialogue: 0,0:02:33.57,0:02:38.37,chinese,,0,0,0,,归根结底，不管每次翻一页或是两页，算法的思想是一样的。
Dialogue: 0,0:02:38.37,0:02:45.66,english,,0,0,0,,But the third algorithm, recall, was this one here in green, where we called it logarithmic in terms of how fast or how slow it was.
Dialogue: 0,0:02:38.37,0:02:45.66,chinese,,0,0,0,,但第三种算法，回忆一下，也就是这条绿色线表示的，我们根据它的效率称之为对数算法。
Dialogue: 0,0:02:45.66,0:02:55.99,english,,0,0,0,,And indeed, the implication of this algorithm was that we could even double the size of the phone book, and no big deal-- one additional page tear, and we take yet another 1,000 page bite out of the phone book.
Dialogue: 0,0:02:45.66,0:02:55.99,chinese,,0,0,0,,对数算法就是说，我们把电话簿的大小增加一倍，也没什么大不了的，\N仅仅是多撕一次，就把这多的 1000 页去掉了。
Dialogue: 0,0:02:55.99,0:03:01.53,english,,0,0,0,,So today, we'll revisit some of these ideas, formalize them a bit, but also translate some of them, ultimately, to code.
Dialogue: 0,0:02:55.99,0:03:01.53,chinese,,0,0,0,,在今天，我们要重温其中的一些想法，形式化地表示出来，并转化成代码。
Dialogue: 0,0:03:01.53,0:03:07.60,english,,0,0,0,,And all of that now is possible because we have this lower-level understanding, perhaps, of what's actually inside of your computer.
Dialogue: 0,0:03:01.53,0:03:07.60,chinese,,0,0,0,,这一切不再遥不可及，因为我们现在对计算机内部的执行情况有了较低层次的认识。
Dialogue: 0,0:03:07.60,0:03:10.17,english,,0,0,0,,This, of course, is your computer's RAM or memory.
Dialogue: 0,0:03:07.60,0:03:10.17,chinese,,0,0,0,,当然，这就是电脑的 RAM，内存。
Dialogue: 0,0:03:10.17,0:03:15.42,english,,0,0,0,,And recall that if we start to abstract this away, your computer's memory is really just a grid of bytes.
Dialogue: 0,0:03:10.17,0:03:15.42,chinese,,0,0,0,,回顾一下，把它抽象化，那么电脑内存实际上就是由字节组成的网格。
Dialogue: 0,0:03:15.42,0:03:17.73,english,,0,0,0,,In fact, we don't have to look at the hardware anymore.
Dialogue: 0,0:03:15.42,0:03:17.73,chinese,,0,0,0,,其实我们没必要在内存条上面看。
Dialogue: 0,0:03:17.73,0:03:27.46,english,,0,0,0,,And we looked at a grid of bytes like this, whereby each of these bytes could be used to store a char, an int, a long, or even an entire string, at that.
Dialogue: 0,0:03:17.73,0:03:27.46,chinese,,0,0,0,,就是这样一个字节网格，可以用来存储 char、int、long，甚至整个字符串。
Dialogue: 0,0:03:27.46,0:03:34.83,english,,0,0,0,,But let's focus perhaps just on a subset of this because last week, of course, we emphasized, really, arrays, storing things in arrays.
Dialogue: 0,0:03:27.46,0:03:34.83,chinese,,0,0,0,,不过，现在把重点放在数据类型的一个子集上，在上周我们重点讲了数组，在数组中存值。
Dialogue: 0,0:03:34.83,0:03:44.77,english,,0,0,0,,And that allowed us to start storing entire strings, sequences of characters, and even arrays of integers if we wanted to have multiple ones and not just multiple variables as well.
Dialogue: 0,0:03:34.83,0:03:44.77,chinese,,0,0,0,,利用数组，可以存储整个字符串，其实是字符序列实现的，\N还有整数数组，避免了单独创建很多个变量。
Dialogue: 0,0:03:44.77,0:03:55.69,english,,0,0,0,,But the catch is that if you look inside of an array in the computer's memory-- and for instance, suppose these integers here are stored-- it's pretty easy for us humans to glance at this and immediately find the number 50.
Dialogue: 0,0:03:44.77,0:03:55.69,chinese,,0,0,0,,关键问题是，假如是我们人类来审视这一个数组，\N这里存的是整数，瞄一眼很容易就能找见数字 50。
Dialogue: 0,0:03:55.69,0:03:59.70,english,,0,0,0,,You sort of have this bird's eye view from where you're seated of everything on the screen.
Dialogue: 0,0:03:55.69,0:03:59.70,chinese,,0,0,0,,你们坐的位置可以俯瞰屏幕上的一切。
Dialogue: 0,0:03:59.70,0:04:02.50,english,,0,0,0,,And so it's pretty obvious how you get to the number 50.
Dialogue: 0,0:03:59.70,0:04:02.50,chinese,,0,0,0,,对人类来说显而易见就可以得到 50 这个数字。
Dialogue: 0,0:04:02.50,0:04:06.72,english,,0,0,0,,But in the world of computers, of course, it turns out that this is hardware.
Dialogue: 0,0:04:02.50,0:04:06.72,chinese,,0,0,0,,在计算机的世界里，归根结底都是硬件。
Dialogue: 0,0:04:06.72,0:04:10.44,english,,0,0,0,,And computers, for today's purposes, can only do one thing at a time.
Dialogue: 0,0:04:06.72,0:04:10.44,chinese,,0,0,0,,而且现在的计算机一次只能做一件事。
Dialogue: 0,0:04:10.44,0:04:14.82,english,,0,0,0,,They can't just take it all in and find instantly some number like 50.
Dialogue: 0,0:04:10.44,0:04:14.82,chinese,,0,0,0,,他们不可能把一切尽收眼底，然后马上找到这里的 50。
Dialogue: 0,0:04:14.82,0:04:22.50,english,,0,0,0,,So perhaps a decent metaphor is to consider the array of memory inside of your computer really is a sequence of closed doors.
Dialogue: 0,0:04:14.82,0:04:22.50,chinese,,0,0,0,,恰当地比喻一下，计算机内存里面的数组可以看作是一连串紧闭的门。
Dialogue: 0,0:04:22.50,0:04:30.73,english,,0,0,0,,And if the computer wants to find some value in an array, it has to do the digital equivalent of opening each of these doors one at a time.
Dialogue: 0,0:04:22.50,0:04:30.73,chinese,,0,0,0,,如果计算机要查找数组中的某个值，其实等价于逐个打开这些门。
Dialogue: 0,0:04:30.73,0:04:32.41,english,,0,0,0,,Now how can code do that?
Dialogue: 0,0:04:30.73,0:04:32.41,chinese,,0,0,0,,怎么用代码实现？
Dialogue: 0,0:04:32.41,0:04:39.90,english,,0,0,0,,Well, of course, we introduced indices or indexes last week, whereby we, by convention, call the first element of an array location 0,
Dialogue: 0,0:04:32.41,0:04:39.90,chinese,,0,0,0,,在上周，我们还介绍了索引（下标），CS 界的惯例是，把数组第一个元素称为位置 0，
Dialogue: 0,0:04:39.90,0:04:45.15,english,,0,0,0,,the second location 1, the third location 2, and so forth-- so-called 0 indexed.
Dialogue: 0,0:04:39.90,0:04:45.15,chinese,,0,0,0,,第二个位置是 1，第三个位置是 2，以此类推，即所谓的零索引。
Dialogue: 0,0:04:45.15,0:04:55.71,english,,0,0,0,,And this allowed us to now bridge this conceptual world of what's going on in memory with actual code, because now we had this square bracket syntax via which we could go searching for something if we so choose.
Dialogue: 0,0:04:45.15,0:04:55.71,chinese,,0,0,0,,这样子，就可以把抽象出的内存概念，跟实际代码连接起来，\N通过这个方括号语法，找到我们选择的数组里元素。
Dialogue: 0,0:04:55.71,0:05:10.39,english,,0,0,0,,And it turns out, if I now paint these red instead of yellow, it would seem that we actually have a pretty good physical metaphor here standing in place for what would be a computer's array of memory if, for instance, you're storing some seven numbers like that.
Dialogue: 0,0:04:55.71,0:05:10.39,chinese,,0,0,0,,现在呢，要是把黄色改成红色，我们就会发现——\N这里跟计算机的内存数组一样，能够存下这样的七个数字。
Dialogue: 0,0:05:10.39,0:05:13.71,english,,0,0,0,,And so today we begin with a look of a specific type of algorithm.
Dialogue: 0,0:05:10.39,0:05:13.71,chinese,,0,0,0,,今天我们首先来看看一种特殊的算法。
Dialogue: 0,0:05:13.71,0:05:14.91,english,,0,0,0,,That is for searching.
Dialogue: 0,0:05:13.71,0:05:14.91,chinese,,0,0,0,,是用来搜索的。
Dialogue: 0,0:05:14.91,0:05:16.27,english,,0,0,0,,Searching is all over the place.
Dialogue: 0,0:05:14.91,0:05:16.27,chinese,,0,0,0,,搜索无处不在。
Dialogue: 0,0:05:16.27,0:05:21.09,english,,0,0,0,,All of us have probably gone to google.com or some equivalent already multiple times per day.
Dialogue: 0,0:05:16.27,0:05:21.09,chinese,,0,0,0,,我们每个人每天都可能访问很多次 google.com 之类的搜索引擎。
Dialogue: 0,0:05:21.09,0:05:25.11,english,,0,0,0,,And getting back answers fast is what companies like Google are really good at.
Dialogue: 0,0:05:21.09,0:05:25.11,chinese,,0,0,0,,Google 这种搜索公司最擅长的就是快速给出搜索结果。
Dialogue: 0,0:05:25.11,0:05:26.70,english,,0,0,0,,So how are they doing that?
Dialogue: 0,0:05:25.11,0:05:26.70,chinese,,0,0,0,,他们是怎么做到的？
Dialogue: 0,0:05:26.70,0:05:29.88,english,,0,0,0,,How are they storing information in computers' memory?
Dialogue: 0,0:05:26.70,0:05:29.88,chinese,,0,0,0,,它们是怎么在计算机内存里存储信息的？
Dialogue: 0,0:05:29.88,0:05:31.59,english,,0,0,0,,Well, let's consider what this really is.
Dialogue: 0,0:05:29.88,0:05:31.59,chinese,,0,0,0,,好吧，我们来推敲一下。
Dialogue: 0,0:05:31.59,0:05:34.50,english,,0,0,0,,It's really just a problem as it was back in Week 0.
Dialogue: 0,0:05:31.59,0:05:34.50,chinese,,0,0,0,,其实和第 0 周的问题一样。
Dialogue: 0,0:05:34.50,0:05:38.25,english,,0,0,0,,The input, though, to the problem, for now, might be this array of seven lockers.
Dialogue: 0,0:05:34.50,0:05:38.25,chinese,,0,0,0,,但是现在，我们只能基于这 7 个柜子来解决问题。
Dialogue: 0,0:05:38.25,0:05:40.92,english,,0,0,0,,So that's the input to the problem, inside of which is a number.
Dialogue: 0,0:05:38.25,0:05:40.92,chinese,,0,0,0,,这是问题的输入，每一个里面都是一个数字。
Dialogue: 0,0:05:40.92,0:05:51.25,english,,0,0,0,,And maybe for simplicity now, we just want a yes/no, a true/false answer-- a bool, that is to say-- of whether or not some number like 50 is in that array.
Dialogue: 0,0:05:40.92,0:05:51.25,chinese,,0,0,0,,简单起见吧，我们现在只需要 true/false 作为答案，\N也就是一个 bool，比如在这里表示数组里是不是有 50 这个数字。
Dialogue: 0,0:05:51.25,0:05:52.68,english,,0,0,0,,It's not quite as fancy as Google.
Dialogue: 0,0:05:51.25,0:05:52.68,chinese,,0,0,0,,没有 Google 里的那么复杂。
Dialogue: 0,0:05:52.68,0:05:55.50,english,,0,0,0,,That doesn't just tell you yes, we have search results.
Dialogue: 0,0:05:52.68,0:05:55.50,chinese,,0,0,0,,Google 不会说告诉你，没错，我们找到搜索结果了。
Dialogue: 0,0:05:55.50,0:05:57.30,english,,0,0,0,,It actually gives you the search results.
Dialogue: 0,0:05:55.50,0:05:57.30,chinese,,0,0,0,,其实，它会把搜索结果提供给你。
Dialogue: 0,0:05:57.30,0:06:06.09,english,,0,0,0,,But for, now we'll keep it simple, and just output as part of this problem yes or no, true or false, we have found the number we're looking for given an input like that array.
Dialogue: 0,0:05:57.30,0:06:06.09,chinese,,0,0,0,,不过，现在我们还是简单点，输入一个数组，输出一个 bool，代表有没有找到。
Dialogue: 0,0:06:06.09,0:06:12.38,english,,0,0,0,,But it turns out inside of this black box that we keep coming back to, there's all sorts of possible algorithms.
Dialogue: 0,0:06:06.09,0:06:12.38,chinese,,0,0,0,,这样的话，中间这个黑盒子里面，会存在着各种可能的算法。
Dialogue: 0,0:06:12.38,0:06:15.86,english,,0,0,0,,And we talked about this at a high level conceptually in Week 0 with the phone book.
Dialogue: 0,0:06:12.38,0:06:15.86,chinese,,0,0,0,,在第 0 周，我们用电话簿从概念上讨论了这个问题。
Dialogue: 0,0:06:15.86,0:06:22.64,english,,0,0,0,,But today, let's consider it a little more concretely by way of a game that some of you might have grown up with, namely Monopoly.
Dialogue: 0,0:06:15.86,0:06:22.64,chinese,,0,0,0,,今天的课呢，大富翁很多人都从小玩过吧，我们来借助这个游戏更具体地思考这个问题。
Dialogue: 0,0:06:22.64,0:06:26.80,english,,0,0,0,,And so behind these doors, it turns out, will be hidden some denominations of monopoly money.
Dialogue: 0,0:06:22.64,0:06:26.80,chinese,,0,0,0,,其实在这些门后面，藏有一些刀乐儿。
Dialogue: 0,0:06:26.80,0:06:28.69,english,,0,0,0,,But for this, we now have two volunteers.
Dialogue: 0,0:06:26.80,0:06:28.69,chinese,,0,0,0,,我们现在有两名志愿者。
Dialogue: 0,0:06:28.69,0:06:30.48,english,,0,0,0,,If you'd like to greet the world?
Dialogue: 0,0:06:28.69,0:06:30.48,chinese,,0,0,0,,来向大家介绍一下自己吧。
Dialogue: 0,0:06:30.48,0:06:31.52,english,,0,0,0,,JACKSON: Hi, I'm Jackson.
Dialogue: 0,0:06:35.44,0:06:37.22,english,,0,0,0,,STEPHANIE: Hi, my name is Stephanie.
Dialogue: 0,0:06:37.22,0:06:40.57,english,,0,0,0,,DAVID MALAN: And do you want to say a little something about yourselves-- years, house, dorm?
Dialogue: 0,0:06:37.22,0:06:40.57,chinese,,0,0,0,,说说自己的情况可以吗？多大了、住哪、宿舍什么的？
Dialogue: 0,0:06:40.57,0:06:43.03,english,,0,0,0,,STEPHANIE: I'm a first year living in Matthews.
Dialogue: 0,0:06:40.57,0:06:43.03,chinese,,0,0,0,,我是住在 Matthews 的一年级学生。
Dialogue: 0,0:06:43.03,0:06:43.78,english,,0,0,0,,DAVID MALAN: Nice.
Dialogue: 0,0:06:43.03,0:06:43.78,chinese,,0,0,0,,很好。
Dialogue: 0,0:06:43.78,0:06:45.58,english,,0,0,0,,JACKSON: And I'm a first year in Canaday.
Dialogue: 0,0:06:43.78,0:06:45.58,chinese,,0,0,0,,我是加拿大人，读一年级。
Dialogue: 0,0:06:45.58,0:06:46.33,english,,0,0,0,,DAVID MALAN: Nice.
Dialogue: 0,0:06:45.58,0:06:46.33,chinese,,0,0,0,,很好。
Dialogue: 0,0:06:46.33,0:06:48.67,english,,0,0,0,,Well, welcome to our two volunteers.
Dialogue: 0,0:06:46.33,0:06:48.67,chinese,,0,0,0,,欢迎两位志愿者。
Dialogue: 0,0:06:48.67,0:06:50.71,english,,0,0,0,,So why don't we do this?
Dialogue: 0,0:06:48.67,0:06:50.71,chinese,,0,0,0,,那我们开始吧。
Dialogue: 0,0:06:50.71,0:06:54.46,english,,0,0,0,,Would one of you like to volunteer the other to go first?
Dialogue: 0,0:06:50.71,0:06:54.46,chinese,,0,0,0,,哪位愿意谦让一下吃螃蟹的机会？
Dialogue: 0,0:06:54.46,0:06:55.51,english,,0,0,0,,STEPHANIE: I'll go.
Dialogue: 0,0:06:54.46,0:06:55.51,chinese,,0,0,0,,我去吧。
Dialogue: 0,0:06:55.51,0:06:56.56,english,,0,0,0,,DAVID MALAN: OK.
Dialogue: 0,0:06:55.51,0:06:56.56,chinese,,0,0,0,,好的。
Dialogue: 0,0:06:56.56,0:06:58.30,english,,0,0,0,,All right, so Stephanie's up first.
Dialogue: 0,0:06:56.56,0:06:58.30,chinese,,0,0,0,,好了，Stephanie 先来。
Dialogue: 0,0:06:58.30,0:07:02.56,english,,0,0,0,,And behind one of these doors here, we've hidden the monopoly money 50.
Dialogue: 0,0:06:58.30,0:07:02.56,chinese,,0,0,0,,其中一扇门背后，我们藏了 50 美元。
Dialogue: 0,0:07:02.56,0:07:04.18,english,,0,0,0,,And so we'd like you to find the 50.
Dialogue: 0,0:07:02.56,0:07:04.18,chinese,,0,0,0,,我们希望能快点找到。
Dialogue: 0,0:07:04.18,0:07:06.49,english,,0,0,0,,We'll tell you nothing more about the lockers.
Dialogue: 0,0:07:04.18,0:07:06.49,chinese,,0,0,0,,关于柜子，我们就不多说了。
Dialogue: 0,0:07:06.49,0:07:08.90,english,,0,0,0,,But we would like you to execute a certain algorithm.
Dialogue: 0,0:07:06.49,0:07:08.90,chinese,,0,0,0,,我们希望你执行某种算法。
Dialogue: 0,0:07:08.90,0:07:11.02,english,,0,0,0,,And in fact, I'm going to give you some pseudocode for this.
Dialogue: 0,0:07:08.90,0:07:11.02,chinese,,0,0,0,,其实我会把算法的伪代码给你。
Dialogue: 0,0:07:11.02,0:07:12.77,english,,0,0,0,,And I'm going to give you the name for it.
Dialogue: 0,0:07:11.02,0:07:12.77,chinese,,0,0,0,,还告诉你它的名字。
Dialogue: 0,0:07:12.77,0:07:13.90,english,,0,0,0,,It's called linear search.
Dialogue: 0,0:07:12.77,0:07:13.90,chinese,,0,0,0,,这就是所谓的线性查找。
Dialogue: 0,0:07:13.90,0:07:17.98,english,,0,0,0,,And as the name implies, you're pretty much going to end up walking in sort of a straight line.
Dialogue: 0,0:07:13.90,0:07:17.98,chinese,,0,0,0,,顾名思义，你最终会走成一条直线。
Dialogue: 0,0:07:17.98,0:07:19.22,english,,0,0,0,,But how are you going to do this?
Dialogue: 0,0:07:17.98,0:07:19.22,chinese,,0,0,0,,那要怎么做呢？
Dialogue: 0,0:07:19.22,0:07:23.17,english,,0,0,0,,Well, let me propose that in a moment, your first step will be to think kind of like a loop.
Dialogue: 0,0:07:19.22,0:07:23.17,chinese,,0,0,0,,好吧，我来提议一下，第一步是像循环一样思考。
Dialogue: 0,0:07:23.17,0:07:27.28,english,,0,0,0,,For each door from left to right, what do we want you to do on each iteration?
Dialogue: 0,0:07:23.17,0:07:27.28,chinese,,0,0,0,,对于从左到右的每扇门，每次迭代时我们希望做什么？
Dialogue: 0,0:07:27.28,0:07:33.07,english,,0,0,0,,Well, if 50 is behind that door, then we want to go ahead and have you return true.
Dialogue: 0,0:07:27.28,0:07:33.07,chinese,,0,0,0,,好吧，如果 50 刚好在这扇门后面，那就要返回 true。
Dialogue: 0,0:07:33.07,0:07:35.86,english,,0,0,0,,And hold up the 50 proudly, if you will, for the group.
Dialogue: 0,0:07:33.07,0:07:35.86,chinese,,0,0,0,,如果你愿意的话，还可以骄傲地举起这 50 块钱给大家看。
Dialogue: 0,0:07:35.86,0:07:42.64,english,,0,0,0,,Otherwise, if you get through that whole loop and you haven't found the number 50, you can just throw up your hands in disappointment.
Dialogue: 0,0:07:35.86,0:07:42.64,chinese,,0,0,0,,要不然，你绕了一圈还没找到数字 50，只能失望地举起双手了。
Dialogue: 0,0:07:42.64,0:07:45.19,english,,0,0,0,,False-- you've not found the number 50.
Dialogue: 0,0:07:42.64,0:07:45.19,chinese,,0,0,0,,false 就代表 50 没找着。
Dialogue: 0,0:07:45.19,0:07:50.29,english,,0,0,0,,So to be clear, step one is going to be for each door from left to right.
Dialogue: 0,0:07:45.19,0:07:50.29,chinese,,0,0,0,,明确点说，第一步从左到右逐个检查每扇门。
Dialogue: 0,0:07:50.29,0:07:51.46,english,,0,0,0,,How would you like to begin?
Dialogue: 0,0:07:50.29,0:07:51.46,chinese,,0,0,0,,那就请你开始吧。
Dialogue: 0,0:07:55.61,0:07:56.49,english,,0,0,0,,Yep.
Dialogue: 0,0:07:56.49,0:07:57.84,english,,0,0,0,,Oh, and then-- yep.
Dialogue: 0,0:07:57.84,0:07:58.34,english,,0,0,0,,There we go.
Dialogue: 0,0:07:57.84,0:07:58.34,chinese,,0,0,0,,开始。
Dialogue: 0,0:07:58.34,0:08:00.36,english,,0,0,0,,Yep.
Dialogue: 0,0:08:00.36,0:08:04.04,english,,0,0,0,,And if you'd like to at least tell-- good, good acting here.
Dialogue: 0,0:08:00.36,0:08:04.04,chinese,,0,0,0,,如果你想至少告诉... 好，演技很不错。
Dialogue: 0,0:08:04.04,0:08:06.14,english,,0,0,0,,What have you found instead?
Dialogue: 0,0:08:04.04,0:08:06.14,chinese,,0,0,0,,你发现啥了？
Dialogue: 0,0:08:06.14,0:08:07.97,english,,0,0,0,,STEPHANIE: It's not 50, but 20.
Dialogue: 0,0:08:06.14,0:08:07.97,chinese,,0,0,0,,不是 50，是 20。
Dialogue: 0,0:08:07.97,0:08:08.90,english,,0,0,0,,DAVID MALAN: Oh, OK.
Dialogue: 0,0:08:07.97,0:08:08.90,chinese,,0,0,0,,啊，好吧。
Dialogue: 0,0:08:08.90,0:08:10.28,english,,0,0,0,,So step one was a fail.
Dialogue: 0,0:08:08.90,0:08:10.28,chinese,,0,0,0,,所以第一步没成功。
Dialogue: 0,0:08:10.28,0:08:11.87,english,,0,0,0,,So let's move on to step two.
Dialogue: 0,0:08:10.28,0:08:11.87,chinese,,0,0,0,,下面进入第二步。
Dialogue: 0,0:08:11.87,0:08:14.45,english,,0,0,0,,Inside of this loop, what are you going to do next?
Dialogue: 0,0:08:11.87,0:08:14.45,chinese,,0,0,0,,在这个循环里，下一步要做什么？
Dialogue: 0,0:08:14.45,0:08:16.37,english,,0,0,0,,STEPHANIE: I'm going to move to the next door.
Dialogue: 0,0:08:14.45,0:08:16.37,chinese,,0,0,0,,我要看隔壁柜子。
Dialogue: 0,0:08:16.37,0:08:17.03,english,,0,0,0,,DAVID MALAN: OK.
Dialogue: 0,0:08:16.37,0:08:17.03,chinese,,0,0,0,,好的。
Dialogue: 0,0:08:20.79,0:08:22.10,english,,0,0,0,,STEPHANIE: Almost.
Dialogue: 0,0:08:22.10,0:08:23.10,english,,0,0,0,,DAVID MALAN: OK, almost.
Dialogue: 0,0:08:22.10,0:08:23.10,chinese,,0,0,0,,好吧，差不多。
Dialogue: 0,0:08:23.10,0:08:23.79,english,,0,0,0,,Sort of.
Dialogue: 0,0:08:23.79,0:08:25.11,english,,0,0,0,,A 500 instead.
Dialogue: 0,0:08:23.79,0:08:25.11,chinese,,0,0,0,,这个是 500。
Dialogue: 0,0:08:25.11,0:08:26.28,english,,0,0,0,,Next locker?
Dialogue: 0,0:08:25.11,0:08:26.28,chinese,,0,0,0,,下一个柜子？
Dialogue: 0,0:08:26.28,0:08:30.20,english,,0,0,0,,STEPHANIE: I would rather take that.
Dialogue: 0,0:08:30.20,0:08:30.70,english,,0,0,0,,No.
Dialogue: 0,0:08:33.84,0:08:36.55,english,,0,0,0,,DAVID MALAN: OK, we're not telling the audience?
Dialogue: 0,0:08:33.84,0:08:36.55,chinese,,0,0,0,,好吧，我们给观众看看呢？
Dialogue: 0,0:08:36.55,0:08:38.26,english,,0,0,0,,STEPHANIE: It was a 10.
Dialogue: 0,0:08:36.55,0:08:38.26,chinese,,0,0,0,,里面是 10。
Dialogue: 0,0:08:38.26,0:08:39.78,english,,0,0,0,,DAVID MALAN: OK, so keep going.
Dialogue: 0,0:08:38.26,0:08:39.78,chinese,,0,0,0,,好的，继续。
Dialogue: 0,0:08:39.78,0:08:40.97,english,,0,0,0,,This is step three now.
Dialogue: 0,0:08:39.78,0:08:40.97,chinese,,0,0,0,,现在是第三步。
Dialogue: 0,0:08:45.47,0:08:46.31,english,,0,0,0,,STEPHANIE: Oh, man.
Dialogue: 0,0:08:49.85,0:08:51.26,english,,0,0,0,,DAVID MALAN: Five, OK.
Dialogue: 0,0:08:49.85,0:08:51.26,chinese,,0,0,0,,5，好吧。
Dialogue: 0,0:08:51.26,0:08:52.67,english,,0,0,0,,A few more lockers to check.
Dialogue: 0,0:08:51.26,0:08:52.67,chinese,,0,0,0,,还有几个柜子要检查。
Dialogue: 0,0:08:57.29,0:08:58.79,english,,0,0,0,,STEPHANIE: A little sad, guys.
Dialogue: 0,0:08:57.29,0:08:58.79,chinese,,0,0,0,,有点伤心，家人们。
Dialogue: 0,0:09:02.52,0:09:04.36,english,,0,0,0,,DAVID MALAN: All right, second-to-last step.
Dialogue: 0,0:09:02.52,0:09:04.36,chinese,,0,0,0,,好的，倒数第二步了。
Dialogue: 0,0:09:07.71,0:09:09.07,english,,0,0,0,,STEPHANIE: It's 1.
Dialogue: 0,0:09:07.71,0:09:09.07,chinese,,0,0,0,,里面是 1。
Dialogue: 0,0:09:09.07,0:09:10.02,english,,0,0,0,,Kind of close.
Dialogue: 0,0:09:09.07,0:09:10.02,chinese,,0,0,0,,很接近。
Dialogue: 0,0:09:10.02,0:09:10.98,english,,0,0,0,,DAVID MALAN: All right.
Dialogue: 0,0:09:10.02,0:09:10.98,chinese,,0,0,0,,好的。
Dialogue: 0,0:09:10.98,0:09:12.78,english,,0,0,0,,And finally, the last step.
Dialogue: 0,0:09:10.98,0:09:12.78,chinese,,0,0,0,,最后，最后一步。
Dialogue: 0,0:09:12.78,0:09:15.78,english,,0,0,0,,Clearly you've been, perhaps, set up here.
Dialogue: 0,0:09:12.78,0:09:15.78,chinese,,0,0,0,,很明显，你可能是遭人陷害了。
Dialogue: 0,0:09:15.78,0:09:17.34,english,,0,0,0,,STEPHANIE: Let's go!
Dialogue: 0,0:09:17.34,0:09:19.92,english,,0,0,0,,DAVID MALAN: All right, so the number 50.
Dialogue: 0,0:09:17.34,0:09:19.92,chinese,,0,0,0,,好吧，那就是数字 50。
Dialogue: 0,0:09:23.50,0:09:25.87,english,,0,0,0,,And Stephanie, if I may, let me ask you a question here.
Dialogue: 0,0:09:23.50,0:09:25.87,chinese,,0,0,0,,Stephanie，请允许我问你一个问题。
Dialogue: 0,0:09:25.87,0:09:28.89,english,,0,0,0,,So on the screen, this is the pseudocode you just executed.
Dialogue: 0,0:09:25.87,0:09:28.89,chinese,,0,0,0,,屏幕上展示的就是你刚刚执行的伪代码。
Dialogue: 0,0:09:28.89,0:09:34.77,english,,0,0,0,,Suppose, though, I had done what many of us have gotten to the habit of doing when you have an if condition.
Dialogue: 0,0:09:28.89,0:09:34.77,chinese,,0,0,0,,不过，假设我写成了大家习惯的条件语句的样子。
Dialogue: 0,0:09:34.77,0:09:36.73,english,,0,0,0,,You often have an else branch as well.
Dialogue: 0,0:09:34.77,0:09:36.73,chinese,,0,0,0,,我们通常还有一个 else 分支。
Dialogue: 0,0:09:36.73,0:09:38.76,english,,0,0,0,,Suppose that I had done this now.
Dialogue: 0,0:09:36.73,0:09:38.76,chinese,,0,0,0,,假如说现在改成这样。
Dialogue: 0,0:09:38.76,0:09:41.68,english,,0,0,0,,And I'm marking it in red to be clear this is wrong.
Dialogue: 0,0:09:38.76,0:09:41.68,chinese,,0,0,0,,把它标成红色，明确表示这是错误的。
Dialogue: 0,0:09:41.68,0:09:47.04,english,,0,0,0,,But what would have been bad about this code using an if and an else, might you say?
Dialogue: 0,0:09:41.68,0:09:47.04,chinese,,0,0,0,,那你觉得这段代码用 if else，会有什么问题呢？
Dialogue: 0,0:09:47.04,0:09:48.36,english,,0,0,0,,Any instincts?
Dialogue: 0,0:09:47.04,0:09:48.36,chinese,,0,0,0,,有什么想法吗？
Dialogue: 0,0:09:55.62,0:10:00.21,english,,0,0,0,,STEPHANIE: Then you would end up canceling the code before you found the 50.
Dialogue: 0,0:09:55.62,0:10:00.21,chinese,,0,0,0,,那你在找到那 50 块钱以前代码就被取消了。
Dialogue: 0,0:10:00.21,0:10:01.02,english,,0,0,0,,DAVID MALAN: Yeah, exactly.
Dialogue: 0,0:10:00.21,0:10:01.02,chinese,,0,0,0,,就是嘛。
Dialogue: 0,0:10:01.02,0:10:02.07,english,,0,0,0,,STEPHANIE: I mean, you'd just be eternally sad.
Dialogue: 0,0:10:01.02,0:10:02.07,chinese,,0,0,0,,我是说，你会永远伤心的。
Dialogue: 0,0:10:02.07,0:10:02.46,english,,0,0,0,,DAVID MALAN: Indeed.
Dialogue: 0,0:10:02.07,0:10:02.46,chinese,,0,0,0,,确实如此。
Dialogue: 0,0:10:02.46,0:10:05.12,english,,0,0,0,,When Stephanie had opened the first locker, she'd have found 20.
Dialogue: 0,0:10:02.46,0:10:05.12,chinese,,0,0,0,,Stephanie 打开第一个柜子，发现有个 20。
Dialogue: 0,0:10:05.12,0:10:06.63,english,,0,0,0,,20, of course, is not 50.
Dialogue: 0,0:10:05.12,0:10:06.63,chinese,,0,0,0,,20 当然不是 50。
Dialogue: 0,0:10:06.63,0:10:07.83,english,,0,0,0,,She would have decreed false.
Dialogue: 0,0:10:06.63,0:10:07.83,chinese,,0,0,0,,if 验顶针，鉴定为 false。
Dialogue: 0,0:10:07.83,0:10:10.54,english,,0,0,0,,But of course, she hadn't checked all of the rest of the lockers.
Dialogue: 0,0:10:07.83,0:10:10.54,chinese,,0,0,0,,当然，她还没有检查过其他所有的柜子。
Dialogue: 0,0:10:10.54,0:10:25.24,english,,0,0,0,,So that would seem to be a key detail that, with this implementation of the pseudocode, we actually do go through-- as we did-- and only return false not even with an else, but just at the end of the loop such that we only reach that line if we don't return true earlier than that.
Dialogue: 0,0:10:10.54,0:10:25.24,chinese,,0,0,0,,所以这是一个关键的细节，在这个伪代码的实现里，跟我们刚才做的一致，\N我们会返回 false，但只有在循环的末尾，没有一次返回 true 的时候才会到达该行。
Dialogue: 0,0:10:25.24,0:10:26.62,english,,0,0,0,,Well, let's go ahead and do this.
Dialogue: 0,0:10:25.24,0:10:26.62,chinese,,0,0,0,,好吧，我们开始吧。
Dialogue: 0,0:10:26.62,0:10:27.36,english,,0,0,0,,Let me take the mic from you.
Dialogue: 0,0:10:26.62,0:10:27.36,chinese,,0,0,0,,把麦克风可以给我了。
Dialogue: 0,0:10:27.36,0:10:28.93,english,,0,0,0,,If you'd like to take a seat next to Jackson?
Dialogue: 0,0:10:27.36,0:10:28.93,chinese,,0,0,0,,你想坐回 Jackson 旁边吗？
Dialogue: 0,0:10:28.93,0:10:31.18,english,,0,0,0,,And Jackson, in just a moment, we'll have you come up.
Dialogue: 0,0:10:28.93,0:10:31.18,chinese,,0,0,0,,Jackson，等一下我们会请你上来。
Dialogue: 0,0:10:31.18,0:10:34.17,english,,0,0,0,,Carter, if you don't mind reorganizing the lockers for us.
Dialogue: 0,0:10:31.18,0:10:34.17,chinese,,0,0,0,,Carter，如果你不介意的话，帮我们整理一下柜子。
Dialogue: 0,0:10:34.17,0:10:38.01,english,,0,0,0,,But in the meantime, let me point out how we might now translate that same idea to code.
Dialogue: 0,0:10:34.17,0:10:38.01,chinese,,0,0,0,,现在呢我要告诉大家，怎么把同样的想法转化成代码。
Dialogue: 0,0:10:38.01,0:10:51.25,english,,0,0,0,,Pretty high level, pretty English-oriented with that pseudocode-- but really now, as of last week, we have syntax via which Stephanie and, soon, Jackson could treat this locker, this set of lockers, as really indeed an array using bracket notation.
Dialogue: 0,0:10:38.01,0:10:51.25,chinese,,0,0,0,,这个伪代码相当高级，相当面向英语，其实上周课开始，我们已经学习过 C 语法了，\N两位志愿者现在就可以用方括号，把这组柜子看作一整个数组了。
Dialogue: 0,0:10:51.25,0:10:54.48,english,,0,0,0,,So we can now get a little closer in our pseudocode to actual code.
Dialogue: 0,0:10:51.25,0:10:54.48,chinese,,0,0,0,,现在我们让伪代码向实际代码迈进。
Dialogue: 0,0:10:54.48,0:11:06.60,english,,0,0,0,,And the way a computer scientist, for instance, would translate fairly high level English pseudocode like this to something that's a little closer to C or any language that supports arrays would be a little more cryptically like this.
Dialogue: 0,0:10:54.48,0:11:06.60,chinese,,0,0,0,,计算机科学家们，会把这种高级的英语伪代码，翻译成更接近 C 语言或其他语言里数组的模样，\N看起来没那么一目了然，大概这个样子。
Dialogue: 0,0:11:06.60,0:11:09.06,english,,0,0,0,,But you'll see more of this syntax in the coming days.
Dialogue: 0,0:11:06.60,0:11:09.06,chinese,,0,0,0,,在以后，你们会更加频繁看到这种模式的。
Dialogue: 0,0:11:09.06,0:11:13.26,english,,0,0,0,,For i from 0 to n minus 1-- this is still pseudocode.
Dialogue: 0,0:11:09.06,0:11:13.26,chinese,,0,0,0,,for i from 0 to n-1，这仍然是伪代码。
Dialogue: 0,0:11:13.26,0:11:17.73,english,,0,0,0,,But that's the English-like way of expressing what we've known come to know as a for loop.
Dialogue: 0,0:11:13.26,0:11:17.73,chinese,,0,0,0,,用英语把我们熟知的 for 循环表达了出来。
Dialogue: 0,0:11:17.73,0:11:26.50,english,,0,0,0,,If 50 is behind doors bracket i-- so I'm assuming for the sake of discussion that doors, now, is the name of my variable, this array of seven doors.
Dialogue: 0,0:11:17.73,0:11:26.50,chinese,,0,0,0,,if 50 is behind doors[i]，我这里假设 doors 是变量名，也就是这个由七扇门组成的数组。
Dialogue: 0,0:11:26.50,0:11:30.37,english,,0,0,0,,But then the rest of the logic, the rest of the pseudocode really is the same way.
Dialogue: 0,0:11:26.50,0:11:30.37,chinese,,0,0,0,,其余的逻辑，落实到伪代码都一样。
Dialogue: 0,0:11:30.37,0:11:40.17,english,,0,0,0,,And so you'll find in time that programmers, computer scientists more generally, when you start expressing ideas, algorithms to someone else, instead of maybe operating at this level here,
Dialogue: 0,0:11:30.37,0:11:40.17,chinese,,0,0,0,,所以说你发现了吧，程序员和计算机科学家向别人表达想法和算法的时候，\N一般都会从伪代码层面开始，而不是采用这种纯英文句法，
Dialogue: 0,0:11:40.17,0:11:47.38,english,,0,0,0,,you now have a new vocabulary, really a new syntax that you can be a little more specific, not getting so into the weeds of writing actual C code,
Dialogue: 0,0:11:40.17,0:11:47.38,chinese,,0,0,0,,你现在就学到了一个新的手段、一种新的语法，\N可以把思路表达得更加具体一些，却不至于把注意力分散在 C 语言语法的弯弯绕绕里，
Dialogue: 0,0:11:47.38,0:11:51.81,english,,0,0,0,,but at least now doing something that's a little closer to manipulating an array like this.
Dialogue: 0,0:11:47.38,0:11:51.81,chinese,,0,0,0,,现在的写法更接近于实际用代码操作一个数组。
Dialogue: 0,0:11:51.81,0:11:55.14,english,,0,0,0,,So Jackson, would you like to stand on up?
Dialogue: 0,0:11:51.81,0:11:55.14,chinese,,0,0,0,,Jackson，你能站起来吗？
Dialogue: 0,0:11:55.14,0:11:56.76,english,,0,0,0,,All right.
Dialogue: 0,0:11:56.76,0:11:57.36,english,,0,0,0,,Yes, yes.
Dialogue: 0,0:11:57.36,0:11:59.01,english,,0,0,0,,Support for Jackson here, too.
Dialogue: 0,0:11:57.36,0:11:59.01,chinese,,0,0,0,,给 Jackson 一些鼓励吧。
Dialogue: 0,0:11:59.01,0:12:00.78,english,,0,0,0,,Nice.
Dialogue: 0,0:12:00.78,0:12:04.47,english,,0,0,0,,And here now, I'm going to allow you an assumption that Stephanie did not have.
Dialogue: 0,0:12:00.78,0:12:04.47,chinese,,0,0,0,,现在，我允许你做一个 Stephanie 没有的假设。
Dialogue: 0,0:12:04.47,0:12:10.05,english,,0,0,0,,Stephanie clearly was really doing her best searching from left to right using linear search, as we'll now call it.
Dialogue: 0,0:12:04.47,0:12:10.05,chinese,,0,0,0,,很明显，Stephanie 使用了 linear search（线性查找），从左到右进行查找，确实做到了最好。
Dialogue: 0,0:12:10.05,0:12:12.18,english,,0,0,0,,But they were pretty much in a random order, right?
Dialogue: 0,0:12:10.05,0:12:12.18,chinese,,0,0,0,,但它们刚才是无序的对吧？
Dialogue: 0,0:12:12.18,0:12:15.03,english,,0,0,0,,There was a 20 over there, there was 1 over there, and then a 50.
Dialogue: 0,0:12:12.18,0:12:15.03,chinese,,0,0,0,,那边是 20，那边是 1，然后是 50。
Dialogue: 0,0:12:15.03,0:12:19.11,english,,0,0,0,,So we deliberately jumbled things up and did not sort the numbers for her.
Dialogue: 0,0:12:15.03,0:12:19.11,chinese,,0,0,0,,是故意的，我们把事情弄得一团糟，没有为她把数字排好序。
Dialogue: 0,0:12:19.11,0:12:24.51,english,,0,0,0,,But Carter kindly has just come up to give you a leg up, Jackson, by sorting the numbers in advance.
Dialogue: 0,0:12:19.11,0:12:24.51,chinese,,0,0,0,,刚才 Carter 好心上来帮了你一把，Jackson，这些数字现在是排列好的，越来越大。
Dialogue: 0,0:12:24.51,0:12:32.25,english,,0,0,0,,And we'd like you this time, much like in week 0, to do something again and again, but this time using what we'll now call binary search.
Dialogue: 0,0:12:24.51,0:12:32.25,chinese,,0,0,0,,这次，我们希望你可以像第 0 周一样一次次地操作，\N我们正式把这种算法叫做 binary search（二分查找）。
Dialogue: 0,0:12:32.25,0:12:35.58,english,,0,0,0,,It's exactly the same algorithm conceptually as we did in Week 0.
Dialogue: 0,0:12:32.25,0:12:35.58,chinese,,0,0,0,,在概念上，跟第 0 周的算法完全一致。
Dialogue: 0,0:12:35.58,0:12:40.45,english,,0,0,0,,But if we translate it to the context of this array, we now might say something like this.
Dialogue: 0,0:12:35.58,0:12:40.45,chinese,,0,0,0,,如果把二分查找放到这个数组的上下文里面考虑，我们现在就可以这样说了。
Dialogue: 0,0:12:40.45,0:12:50.61,english,,0,0,0,,The first step for Jackson might be to ask the question-- if 50 is behind the middle door, where presumably he's done some mental math to figure out what the middle is, then he's going to just return true.
Dialogue: 0,0:12:40.45,0:12:50.61,chinese,,0,0,0,,Jackson 的第一步可能是问这个问题—— if 50 在中间那扇门后面，\N他心算一下就可以找出中间那扇门的位置，满足就返回 true。
Dialogue: 0,0:12:50.61,0:12:53.07,english,,0,0,0,,And hopefully we'll get lucky and 50 will be right there.
Dialogue: 0,0:12:50.61,0:12:53.07,chinese,,0,0,0,,希望我们运气好点，50 块钱就在里面。
Dialogue: 0,0:12:53.07,0:12:58.29,english,,0,0,0,,Of course, there's two other possibilities at least, which would be what?
Dialogue: 0,0:12:53.07,0:12:58.29,chinese,,0,0,0,,当然，至少还有另外两种可能，是什么？
Dialogue: 0,0:12:58.29,0:13:01.29,english,,0,0,0,,50 is, with respect to these doors?
Dialogue: 0,0:12:58.29,0:13:01.29,chinese,,0,0,0,,50 怎么跟这些门有关联？
Dialogue: 0,0:13:01.29,0:13:03.93,english,,0,0,0,,Yeah, so to the left or to the right, alternatively.
Dialogue: 0,0:13:01.29,0:13:03.93,chinese,,0,0,0,,没错，要么向左或者向右。
Dialogue: 0,0:13:03.93,0:13:07.72,english,,0,0,0,,So if 50 is less than the middle door, then presumably,
Dialogue: 0,0:13:03.93,0:13:07.72,chinese,,0,0,0,,所以，如果 50 小于中间这个门，那就可以推测，
Dialogue: 0,0:13:07.72,0:13:09.18,english,,0,0,0,,Jackson's going to want to go left.
Dialogue: 0,0:13:07.72,0:13:09.18,chinese,,0,0,0,,Jackson 得往左走。
Dialogue: 0,0:13:09.18,0:13:17.91,english,,0,0,0,,Else, if 50 is greater than the middle door, he's going to want to go right, much like I did physically last week with the phone book, dividing and conquering left to right.
Dialogue: 0,0:13:09.18,0:13:17.91,chinese,,0,0,0,,否则，如果 50 大于中门，他就会往右走，就像我之前用电话簿演示的那样分而治之。
Dialogue: 0,0:13:17.91,0:13:20.02,english,,0,0,0,,But there's actually a fourth case.
Dialogue: 0,0:13:17.91,0:13:20.02,chinese,,0,0,0,,但实际上还有第四种情况。
Dialogue: 0,0:13:20.02,0:13:21.54,english,,0,0,0,,Let's put it on the board first.
Dialogue: 0,0:13:20.02,0:13:21.54,chinese,,0,0,0,,我们要先把所有情况展示在屏幕上。
Dialogue: 0,0:13:21.54,0:13:25.53,english,,0,0,0,,What else might happen here that Jackson should consider?
Dialogue: 0,0:13:21.54,0:13:25.53,chinese,,0,0,0,,Jackson 应该考虑的其他情况是什么？
Dialogue: 0,0:13:25.53,0:13:26.17,english,,0,0,0,,Yeah.
Dialogue: 0,0:13:26.17,0:13:28.59,english,,0,0,0,,Oh, it's not there.
Dialogue: 0,0:13:26.17,0:13:28.59,chinese,,0,0,0,,诶，这儿没有。
Dialogue: 0,0:13:28.59,0:13:39.08,english,,0,0,0,,So let me actually go back and amend my pseudocode here and just say Jackson, if we don't hand you any doors at all, or eventually, as he's dividing and conquering, if he's left with no more doors,
Dialogue: 0,0:13:28.59,0:13:39.08,chinese,,0,0,0,,让我回过头来修改一下伪代码，如果一扇门都没有，\N或者最终，Jackson 不断分而治之，到最后没有更多的门了，
Dialogue: 0,0:13:39.08,0:13:42.38,english,,0,0,0,,we have to handle that situation so that the behavior is defined.
Dialogue: 0,0:13:39.08,0:13:42.38,chinese,,0,0,0,,我们必须处理这种情况，把这些情况下的行为定义出来。
Dialogue: 0,0:13:42.38,0:13:48.65,english,,0,0,0,,All right, so with that said, Jackson, do you want to go ahead and find us the number 50 and walk us through verbally what you're doing and finding?
Dialogue: 0,0:13:42.38,0:13:48.65,chinese,,0,0,0,,好，话说到这，Jackson，你要不要继续找数字 50，\N然后口头跟我们解释解释你在做什么和找到了什么？
Dialogue: 0,0:13:48.65,0:13:52.86,english,,0,0,0,,JACKSON: All right, so it looks like this one is the middle door.
Dialogue: 0,0:13:48.65,0:13:52.86,chinese,,0,0,0,,好吧，看起来这个是中间的门。
Dialogue: 0,0:13:52.86,0:13:55.29,english,,0,0,0,,So I'm going to open it.
Dialogue: 0,0:13:52.86,0:13:55.29,chinese,,0,0,0,,所以我要打开它。
Dialogue: 0,0:13:55.29,0:13:57.03,english,,0,0,0,,But it's 20, not 50.
Dialogue: 0,0:13:55.29,0:13:57.03,chinese,,0,0,0,,但它是 20，不是 50。
Dialogue: 0,0:13:57.03,0:13:59.62,english,,0,0,0,,DAVID MALAN: Aw.
Dialogue: 0,0:13:59.62,0:14:01.08,english,,0,0,0,,What's going through your head now?
Dialogue: 0,0:13:59.62,0:14:01.08,chinese,,0,0,0,,你现在在想啥？
Dialogue: 0,0:14:01.08,0:14:06.49,english,,0,0,0,,JACKSON: So now I'm looking-- because 50 is higher than 20, I want to look to the right.
Dialogue: 0,0:14:01.08,0:14:06.49,chinese,,0,0,0,,因为 50 比 20 大，我想往右边看。
Dialogue: 0,0:14:06.49,0:14:07.44,english,,0,0,0,,DAVID MALAN: Good.
Dialogue: 0,0:14:06.49,0:14:07.44,chinese,,0,0,0,,很好。
Dialogue: 0,0:14:07.44,0:14:10.27,english,,0,0,0,,JACKSON: And look for the new middle door, which would be here.
Dialogue: 0,0:14:07.44,0:14:10.27,chinese,,0,0,0,,找到新的中间门，就是这个。
Dialogue: 0,0:14:10.27,0:14:11.70,english,,0,0,0,,DAVID MALAN: Nice.
Dialogue: 0,0:14:10.27,0:14:11.70,chinese,,0,0,0,,很好。
Dialogue: 0,0:14:11.70,0:14:13.74,english,,0,0,0,,JACKSON: And it's 100-- bad.
Dialogue: 0,0:14:11.70,0:14:13.74,chinese,,0,0,0,,是 100，坏。
Dialogue: 0,0:14:13.74,0:14:16.56,english,,0,0,0,,But 50 is less than 100.
Dialogue: 0,0:14:13.74,0:14:16.56,chinese,,0,0,0,,不过 50 比 100 少。
Dialogue: 0,0:14:16.56,0:14:20.52,english,,0,0,0,,So now we to look left, which would be here.
Dialogue: 0,0:14:16.56,0:14:20.52,chinese,,0,0,0,,现在我们要往左看，也就是这里。
Dialogue: 0,0:14:20.52,0:14:21.24,english,,0,0,0,,And ta-da.
Dialogue: 0,0:14:21.24,0:14:21.99,english,,0,0,0,,DAVID MALAN: Nice.
Dialogue: 0,0:14:21.24,0:14:21.99,chinese,,0,0,0,,棒。
Dialogue: 0,0:14:21.99,0:14:25.68,english,,0,0,0,,Very well done this time around, too.
Dialogue: 0,0:14:21.99,0:14:25.68,chinese,,0,0,0,,做得很不错。
Dialogue: 0,0:14:25.68,0:14:29.68,english,,0,0,0,,So thank you, first, to our volunteers here.
Dialogue: 0,0:14:25.68,0:14:29.68,chinese,,0,0,0,,首先，感谢我们的两位志愿者。
Dialogue: 0,0:14:29.68,0:14:36.74,english,,0,0,0,,And in fact, since you're a fan of Monopoly, as we're so informed, we have the Cambridge edition of Monopoly with all your Harvard favorites.
Dialogue: 0,0:14:29.68,0:14:36.74,chinese,,0,0,0,,其实，各位大富翁游戏爱好者可能知道，我们有剑桥版的大富翁，里面有大家最心水的哈佛。
Dialogue: 0,0:14:36.74,0:14:37.41,english,,0,0,0,,JACKSON: No way.
Dialogue: 0,0:14:37.41,0:14:38.46,english,,0,0,0,,DAVID MALAN: Here you go.
Dialogue: 0,0:14:37.41,0:14:38.46,chinese,,0,0,0,,给你。
Dialogue: 0,0:14:38.46,0:14:38.97,english,,0,0,0,,STEPHANIE: Thank you.
Dialogue: 0,0:14:38.97,0:14:40.09,english,,0,0,0,,JACKSON: Thank you so much.
Dialogue: 0,0:14:40.09,0:14:42.57,english,,0,0,0,,DAVID MALAN: Thank you to our volunteers for finding us 50.
Dialogue: 0,0:14:40.09,0:14:42.57,chinese,,0,0,0,,感谢志愿者帮我们找到了 50。
Dialogue: 0,0:14:42.57,0:14:46.94,english,,0,0,0,,So-- that was more popular than we expected.
Dialogue: 0,0:14:42.57,0:14:46.94,chinese,,0,0,0,,看来比我想的还要受欢迎啊（笑）。
Dialogue: 0,0:14:46.94,0:14:52.06,english,,0,0,0,,So here, we can translate this one more time into something a little closer to code.
Dialogue: 0,0:14:46.94,0:14:52.06,chinese,,0,0,0,,现在呢，我们可以再把它翻译得接近代码一点。
Dialogue: 0,0:14:52.06,0:14:59.38,english,,0,0,0,,And again, still pseudocode-- but here, now, might be another formulation of exactly what Jackson just did, just using the nomenclature now of arrays,
Dialogue: 0,0:14:52.06,0:14:59.38,chinese,,0,0,0,,Jackson 刚才做的事情，我用数组的术语表述并展示在这里，还是算伪代码，
Dialogue: 0,0:14:59.38,0:15:04.64,english,,0,0,0,,where you can be a little more precise with your instructions and still leave it to someone else to translate this, finally, to code.
Dialogue: 0,0:14:59.38,0:15:04.64,chinese,,0,0,0,,但是指令更加精确一些，不过仍然需要翻译一下才是真正的 C 代码。
Dialogue: 0,0:15:04.64,0:15:06.64,english,,0,0,0,,But here we have same question at the beginning.
Dialogue: 0,0:15:04.64,0:15:06.64,chinese,,0,0,0,,看这里，我们一开始就判断了一个问题。
Dialogue: 0,0:15:06.64,0:15:08.65,english,,0,0,0,,If no doors left, return false.
Dialogue: 0,0:15:06.64,0:15:08.65,chinese,,0,0,0,,如果一扇门都没有，直接返回 false。
Dialogue: 0,0:15:08.65,0:15:19.48,english,,0,0,0,,If 50 is behind doors bracket middle-- so I'm assuming here, because this is pseudocode-- that somewhere I've done the mental math or the actual math to figure out what the index of middle is.
Dialogue: 0,0:15:08.65,0:15:19.48,chinese,,0,0,0,,if 50 is behind doors[middle]，因为这是伪代码，\N所以假设我们经过心算或实际计算，已经找好了 middle 的数组下标。
Dialogue: 0,0:15:19.48,0:15:27.31,english,,0,0,0,,For instance, if these are seven doors in an array, this would be location 0, 1, 2, 3, 4, 5, 6.
Dialogue: 0,0:15:19.48,0:15:27.31,chinese,,0,0,0,,举个例子，如果数组里有 7 扇门，那序号就是 0、1、2、3、4、5、6。
Dialogue: 0,0:15:27.31,0:15:33.52,english,,0,0,0,,So somehow I've taken the total number of doors, 7, divided by 2 to find the middle.
Dialogue: 0,0:15:27.31,0:15:33.52,chinese,,0,0,0,,于是，我用门的总数 7 除以 2 来找出 middle。
Dialogue: 0,0:15:33.52,0:15:34.43,english,,0,0,0,,That's 3 and 1/2.
Dialogue: 0,0:15:33.52,0:15:34.43,chinese,,0,0,0,,答案是 3 又 1/2。
Dialogue: 0,0:15:34.43,0:15:35.68,english,,0,0,0,,We have to deal with rounding.
Dialogue: 0,0:15:34.43,0:15:35.68,chinese,,0,0,0,,我们得处理四舍五入的问题。
Dialogue: 0,0:15:35.68,0:15:39.91,english,,0,0,0,,But suffice it to say there's a well-defined formula for finding the middle index.
Dialogue: 0,0:15:35.68,0:15:39.91,chinese,,0,0,0,,但可以确定的是，找中间的序号，是有一个明确的公式的。
Dialogue: 0,0:15:39.91,0:15:43.28,english,,0,0,0,,Given the total number of lockers, divide by 2 and then round accordingly.
Dialogue: 0,0:15:39.91,0:15:43.28,chinese,,0,0,0,,把柜子总数除以 2，再做四舍五入。
Dialogue: 0,0:15:43.28,0:15:48.79,english,,0,0,0,,So that's presumably what Jackson did just by counting or in his head to find us door number 3.
Dialogue: 0,0:15:43.28,0:15:48.79,chinese,,0,0,0,,所以，Jackson 大概数了数或者经过心算，确认到了 3 号门。
Dialogue: 0,0:15:48.79,0:15:52.21,english,,0,0,0,,Not the third door, the 4th door, but door bracket 3.
Dialogue: 0,0:15:48.79,0:15:52.21,chinese,,0,0,0,,不是第 3 扇门哈，其实是第 4 扇门，就是 doors[3]。
Dialogue: 0,0:15:52.21,0:15:56.20,english,,0,0,0,,So this is just saying if 50 is behind doors bracket middle, return true.
Dialogue: 0,0:15:52.21,0:15:56.20,chinese,,0,0,0,,也就是说，如果 50 在 doors[3]，就返回 true。
Dialogue: 0,0:15:56.20,0:15:57.20,english,,0,0,0,,That was not the case.
Dialogue: 0,0:15:56.20,0:15:57.20,chinese,,0,0,0,,刚才不是这种情况。
Dialogue: 0,0:15:57.20,0:15:58.96,english,,0,0,0,,He found a $20 bill instead.
Dialogue: 0,0:15:57.20,0:15:58.96,chinese,,0,0,0,,他发现的是一张 20 块的。
Dialogue: 0,0:15:58.96,0:16:10.66,english,,0,0,0,,Else, if 50 is less than the doors bracket middle, go ahead-- and now it gets interesting-- search doors 0 through doors middle minus 1.
Dialogue: 0,0:15:58.96,0:16:10.66,chinese,,0,0,0,,else if 50 < doors[middle]，接着往下执行——\N现在有点意思，search doors[0] through doors[middle-1]。
Dialogue: 0,0:16:10.66,0:16:12.73,english,,0,0,0,,So it's getting a little more into the weeds now.
Dialogue: 0,0:16:10.66,0:16:12.73,chinese,,0,0,0,,所以，现在的情况要更加复杂了。
Dialogue: 0,0:16:12.73,0:16:24.34,english,,0,0,0,,But if middle is 3, this one here, what we want to now have Jackson search if 50 had been-- if the number had been less, we want to start at bracket 0 and go up through this one.
Dialogue: 0,0:16:12.73,0:16:24.34,chinese,,0,0,0,,现在的 middle 是 3，就是这里的这一个柜子，接着要让 Jackson 做的是，\N如果 50 比中间的要小，就从 [0] 开始，一直搜索到这里。
Dialogue: 0,0:16:24.34,0:16:28.29,english,,0,0,0,,And we deliberately subtract 1 because what's the point of looking in the same locker again?
Dialogue: 0,0:16:24.34,0:16:28.29,chinese,,0,0,0,,我们有意减去 1 了，因为再检查一遍 middle 柜子又有什么意义呢？
Dialogue: 0,0:16:24.34,0:16:28.29,annotation,,0,0,0,,*注：记住这句话。
Dialogue: 0,0:16:28.29,0:16:31.27,english,,0,0,0,,We might as well do 0 through middle minus 1.
Dialogue: 0,0:16:28.29,0:16:31.27,chinese,,0,0,0,,所以不妨从 0 搜索到 middle-1。
Dialogue: 0,0:16:31.27,0:16:37.12,english,,0,0,0,,Else if 50 is greater than doors bracket middle, which it was, what did we then do?
Dialogue: 0,0:16:31.27,0:16:37.12,chinese,,0,0,0,,再 else if，要是 50 大于 doors[middle]，又怎么办？
Dialogue: 0,0:16:37.12,0:16:43.29,english,,0,0,0,,So Jackson intuitively searched for doors middle plus 1 through doors n minus 1.
Dialogue: 0,0:16:37.12,0:16:43.29,chinese,,0,0,0,,于是，Jackson 凭着直觉，从 doors[middle+1] 开始，一直找到 doors[n-1] 结束。
Dialogue: 0,0:16:43.29,0:16:46.42,english,,0,0,0,,And honestly, it gets a little annoying having the pluses and minuses here.
Dialogue: 0,0:16:43.29,0:16:46.42,chinese,,0,0,0,,说实话，这里一会加一会减的，有点烦人。
Dialogue: 0,0:16:46.42,0:16:47.78,english,,0,0,0,,But just think of what it means.
Dialogue: 0,0:16:46.42,0:16:47.78,chinese,,0,0,0,,但是想想背后的含义吧。
Dialogue: 0,0:16:47.78,0:16:49.09,english,,0,0,0,,This is the middle door.
Dialogue: 0,0:16:47.78,0:16:49.09,chinese,,0,0,0,,这是中间的门。
Dialogue: 0,0:16:49.09,0:16:56.15,english,,0,0,0,,And Jackson then did proceed to search through doors middle plus 1 because there's no point in searching this one again.
Dialogue: 0,0:16:49.09,0:16:56.15,chinese,,0,0,0,,然后，Jackson 从 middle+1 号门开始找，因为再检查一次 middle 没有意义。
Dialogue: 0,0:16:56.15,0:17:05.35,english,,0,0,0,,And then the last element in any array of size n where n is just our go-to number for the size is always going to be n minus 1.
Dialogue: 0,0:16:56.15,0:17:05.35,chinese,,0,0,0,,在大小为 n 的数组中，最后一个元素下标总是 n-1。
Dialogue: 0,0:17:05.35,0:17:06.31,english,,0,0,0,,It's not going to be n.
Dialogue: 0,0:17:05.35,0:17:06.31,chinese,,0,0,0,,不会到 n 的。
Dialogue: 0,0:17:06.31,0:17:10.83,english,,0,0,0,,It's going to be n minus 1 because we always start counting arrays at 0.
Dialogue: 0,0:17:06.31,0:17:10.83,chinese,,0,0,0,,是 n-1，因为数组里我们总是从 0 开始数。
Dialogue: 0,0:17:10.83,0:17:16.43,english,,0,0,0,,So here then we have a translation into pseudocode that's a little closer to C of this exact same idea.
Dialogue: 0,0:17:10.83,0:17:16.43,chinese,,0,0,0,,我们把这个想法，翻译成了更接近 C 语言的伪代码，放在这儿。
Dialogue: 0,0:17:16.43,0:17:18.49,english,,0,0,0,,And here, we come full circle to Week 0.
Dialogue: 0,0:17:16.43,0:17:18.49,chinese,,0,0,0,,在这里，仿佛回到了第 0 周。
Dialogue: 0,0:17:18.49,0:17:23.42,english,,0,0,0,,In Week 0, it was pretty intuitive to imagine dividing and conquering a problem like this.
Dialogue: 0,0:17:18.49,0:17:23.42,chinese,,0,0,0,,第 0 周里，我们直观地推演了一下，怎么把这样一个问题分而治之。
Dialogue: 0,0:17:23.42,0:17:29.92,english,,0,0,0,,But if you now think back to actual your iPhone, your Android phone, or the like, when you're doing autocomplete and searching the list,
Dialogue: 0,0:17:23.42,0:17:29.92,chinese,,0,0,0,,你现在想想自己用的各种设备，在通讯录里进行搜索并自动补全的时候，
Dialogue: 0,0:17:29.92,0:17:34.84,english,,0,0,0,,it's possible, if you don't have many friends or family or colleagues in the phone, you know what?
Dialogue: 0,0:17:29.92,0:17:34.84,chinese,,0,0,0,,如果联系人没有很多，你知道吗？
Dialogue: 0,0:17:34.84,0:17:40.72,english,,0,0,0,,Linear search, just checking every name for the person you're searching for, might be perfectly fine.
Dialogue: 0,0:17:34.84,0:17:40.72,chinese,,0,0,0,,如果采用线性查找，把自己要找的人跟通讯录里的一个一个比对，可能完全没问题。
Dialogue: 0,0:17:40.72,0:17:47.77,english,,0,0,0,,But odds are your phone's being smarter than that, especially if you start to have dozens, hundreds, thousands of people in your contacts over the years.
Dialogue: 0,0:17:40.72,0:17:47.77,chinese,,0,0,0,,但是，你的手机会更加聪明一点，尤其是你的联系人涨到几十、几百、几千人的时候。
Dialogue: 0,0:17:47.77,0:17:49.54,english,,0,0,0,,What would be better than linear search?
Dialogue: 0,0:17:47.77,0:17:49.54,chinese,,0,0,0,,有什么比线性查找更加好？
Dialogue: 0,0:17:49.54,0:17:51.34,english,,0,0,0,,Well, perhaps binary search.
Dialogue: 0,0:17:49.54,0:17:51.34,chinese,,0,0,0,,也许是二分查找。
Dialogue: 0,0:17:51.34,0:17:55.18,english,,0,0,0,,But, but, but-- there's an assumption, a requirement, which is what?
Dialogue: 0,0:17:51.34,0:17:55.18,chinese,,0,0,0,,但是但是但是，有一个假设，一个必要条件，是啥？
Dialogue: 0,0:17:55.18,0:18:04.83,english,,0,0,0,,Why was Jackson ultimately able to find the 50 in just three steps instead of a full seven, like Stephanie?
Dialogue: 0,0:17:55.18,0:18:04.83,chinese,,0,0,0,,为什么 Jackson 只用了三步就找到 50，而 Stephanie 用了整整七步？
Dialogue: 0,0:18:04.83,0:18:06.57,english,,0,0,0,,Because the array was sorted.
Dialogue: 0,0:18:04.83,0:18:06.57,chinese,,0,0,0,,因为数组排好序了。
Dialogue: 0,0:18:06.57,0:18:09.99,english,,0,0,0,,And so this is sort of a teaser for what we'll have to come back to later today.
Dialogue: 0,0:18:06.57,0:18:09.99,chinese,,0,0,0,,现在先做个预告，今天晚些时候我们来抖包袱。
Dialogue: 0,0:18:09.99,0:18:12.78,english,,0,0,0,,Well, how much effort did it take someone like Carter?
Dialogue: 0,0:18:09.99,0:18:12.78,chinese,,0,0,0,,这样的话，像 Carter 这样的人做了多少工作呢？
Dialogue: 0,0:18:12.78,0:18:17.04,english,,0,0,0,,How much effort does it take your phone to sort all of those names and numbers in advance?
Dialogue: 0,0:18:12.78,0:18:17.04,chinese,,0,0,0,,你的手机提前把这些名字和号码排好序，代价有多少？
Dialogue: 0,0:18:17.04,0:18:19.65,english,,0,0,0,,Because maybe it's not actually worth the amount of time.
Dialogue: 0,0:18:17.04,0:18:19.65,chinese,,0,0,0,,因为可能在实际应用里不值得花那么多时间预先排序。
Dialogue: 0,0:18:19.65,0:18:24.21,english,,0,0,0,,Now someone like Google probably somehow keeps the database of web pages sorted.
Dialogue: 0,0:18:19.65,0:18:24.21,chinese,,0,0,0,,在如今，谷歌这样的大公司可能会用某种方式，让数据库里存储的网页保持有序状态。
Dialogue: 0,0:18:24.21,0:18:32.28,english,,0,0,0,,You can imagine it being super slow if, when you type in cats or something else into google.com, if they searched linearly over their entire data set.
Dialogue: 0,0:18:24.21,0:18:32.28,chinese,,0,0,0,,你可以想象一下，当你在 google.com 上输入猫或别的关键词，\N如果要对整个数据集进行线性查找，速度会有多慢。
Dialogue: 0,0:18:32.28,0:18:35.43,english,,0,0,0,,Ideally, they're doing something a little smarter than that.
Dialogue: 0,0:18:32.28,0:18:35.43,chinese,,0,0,0,,理想的情况下，他们有更聪明的策略。
Dialogue: 0,0:18:35.43,0:18:38.82,english,,0,0,0,,So we'll formalize, now, exactly this kind of analysis.
Dialogue: 0,0:18:35.43,0:18:38.82,chinese,,0,0,0,,所以，我们现在来正式分析一下。
Dialogue: 0,0:18:38.82,0:18:42.18,english,,0,0,0,,And it's not going to be so much mathy as it still will be intuitive.
Dialogue: 0,0:18:38.82,0:18:42.18,chinese,,0,0,0,,不会太涉及数学论证，而是保持直观。
Dialogue: 0,0:18:42.18,0:18:50.55,english,,0,0,0,,But we'll introduce you to some jargon, some terminology that most any programmer or computer scientists might use when analyzing their own algorithms.
Dialogue: 0,0:18:42.18,0:18:50.55,chinese,,0,0,0,,我们会向你介绍一些行话，\N也就是大多数程序员或计算机科学家分析自己算法的时候，可能会用到的术语。
Dialogue: 0,0:18:50.55,0:18:53.67,english,,0,0,0,,Let's formalize now what this kind of analysis is.
Dialogue: 0,0:18:50.55,0:18:53.67,chinese,,0,0,0,,现在，让我们把这种分析正式化。
Dialogue: 0,0:18:53.67,0:18:56.91,english,,0,0,0,,So right now, I claim binary search better than linear search.
Dialogue: 0,0:18:53.67,0:18:56.91,chinese,,0,0,0,,也就是说，现在我认为二分查找比线性查找更优秀。
Dialogue: 0,0:18:56.91,0:18:59.10,english,,0,0,0,,But how much better and why, exactly?
Dialogue: 0,0:18:56.91,0:18:59.10,chinese,,0,0,0,,但究竟好了多少，为什么？
Dialogue: 0,0:18:59.10,0:19:01.12,english,,0,0,0,,Well, it all comes back to this kind of graph.
Dialogue: 0,0:18:59.10,0:19:01.12,chinese,,0,0,0,,那么，归根结底又回到了这张图上。
Dialogue: 0,0:19:01.12,0:19:04.83,english,,0,0,0,,So this, recall, is how we analyzed the phone book back in Week 0.
Dialogue: 0,0:19:01.12,0:19:04.83,chinese,,0,0,0,,回想一下，在第 0 周里，我们是这样分析电话簿的。
Dialogue: 0,0:19:04.83,0:19:15.72,english,,0,0,0,,And recall that, indeed, we had these formulas, rough formulas that described the running time of those three algorithms-- one page at a time, two pages at a time, and then tearing the thing again and again in half.
Dialogue: 0,0:19:04.83,0:19:15.72,chinese,,0,0,0,,我们确实提到了描述这三种算法运行时间的粗略公式——\N一次一页，一次两页，然后是 一次又一次地把书撕成两半。
Dialogue: 0,0:19:15.72,0:19:26.70,english,,0,0,0,,And precisely, if you counted up the number of pages I was touching or the number of pages I was tearing, it's fair to say that the first algorithm, in the worst case, might have taken n total pages.
Dialogue: 0,0:19:15.72,0:19:26.70,chinese,,0,0,0,,说准确一点，如果你统计一下我翻过或者撕掉的页数，\N可以说第一种算法在最坏的情况下可能总共会用 n 页。
Dialogue: 0,0:19:26.70,0:19:31.26,english,,0,0,0,,It didn't because I was searching for John Harvard at the time, which is somewhat early in the alphabet.
Dialogue: 0,0:19:26.70,0:19:31.26,chinese,,0,0,0,,我当时搜索的是 John Harvard，它在字母表里还比较靠前。
Dialogue: 0,0:19:31.26,0:19:34.34,english,,0,0,0,,But if I were searching for someone with the last name of Z,
Dialogue: 0,0:19:31.26,0:19:34.34,chinese,,0,0,0,,但如果我搜索的是一个 Z 开头姓氏的人，
Dialogue: 0,0:19:34.34,0:19:38.43,english,,0,0,0,,I would have had to keep going and going, in the worst case, through all n pages.
Dialogue: 0,0:19:34.34,0:19:38.43,chinese,,0,0,0,,我不得不一直找下去，最糟糕的情况是翻完所有 n 页。
Dialogue: 0,0:19:38.43,0:19:41.94,english,,0,0,0,,Not as bad for the second algorithm, and that's why we do n divided by 2.
Dialogue: 0,0:19:38.43,0:19:41.94,chinese,,0,0,0,,第二种算法相对没那么糟糕，最坏情况下需要翻 n/2 次。
Dialogue: 0,0:19:41.94,0:19:43.92,english,,0,0,0,,And even that's a bit of a white lie.
Dialogue: 0,0:19:41.94,0:19:43.92,chinese,,0,0,0,,其实这里还藏了点小谎。
Dialogue: 0,0:19:43.92,0:19:48.27,english,,0,0,0,,It's probably n divided by 2 plus 1 in case I have to double back.
Dialogue: 0,0:19:43.92,0:19:48.27,chinese,,0,0,0,,可能是 n/2+1 次，因为可能刚好把那页跳过，需要回看一页。
Dialogue: 0,0:19:48.27,0:19:52.03,english,,0,0,0,,But again, I'm sort of doing this more generally to capture the essence of these things.
Dialogue: 0,0:19:48.27,0:19:52.03,chinese,,0,0,0,,我说是 n/2，是为了更概括性地抓住这些事情的本质。
Dialogue: 0,0:19:52.03,0:19:56.94,english,,0,0,0,,And then we really got into the weeds with like log base 2 event for that third and final algorithm.
Dialogue: 0,0:19:52.03,0:19:56.94,chinese,,0,0,0,,然后，我们到达了第三种也就是最后一个算法，\N没有那么直白了，它需要的次数是 2 为底的对数。
Dialogue: 0,0:19:56.94,0:20:04.20,english,,0,0,0,,And at the time, we claimed any time you're dividing something in half, in half, in half, odds are there's going to be some kind of logarithm involved.
Dialogue: 0,0:19:56.94,0:20:04.20,chinese,,0,0,0,,当时我们还聊到了，在任何时候，\N如果需要把某个东西一直对半分下去，就可能涉及到某种对数。
Dialogue: 0,0:20:04.20,0:20:05.34,english,,0,0,0,,And we'll see that today.
Dialogue: 0,0:20:04.20,0:20:05.34,chinese,,0,0,0,,我们今天也会看到。
Dialogue: 0,0:20:05.34,0:20:09.01,english,,0,0,0,,But today, we're going to actually start using computer science terminology.
Dialogue: 0,0:20:05.34,0:20:09.01,chinese,,0,0,0,,从今天起，我们要真正开始使用计算机科学里的术语。
Dialogue: 0,0:20:09.01,0:20:13.59,english,,0,0,0,,And we're going to formalize this imprecision, if you will.
Dialogue: 0,0:20:09.01,0:20:13.59,chinese,,0,0,0,,我们会把各种不精确的描述正式化。
Dialogue: 0,0:20:13.59,0:20:24.63,english,,0,0,0,,We are not going to care, generally, about exactly how many steps some algorithm takes because that's not going to be that enlightening, especially if maybe you have a faster computer tomorrow than you did today.
Dialogue: 0,0:20:13.59,0:20:24.63,chinese,,0,0,0,,通常情况下，我们不会过于关注某个算法究竟需要多少步，\N因为这不会带来很多启发，特别是计算机的性能在逐步提高。
Dialogue: 0,0:20:13.59,0:20:24.63,annotation,,0,0,0,,*注：就是说，这不是一个通用的标准来衡量程序的运行效率。\N举个例子，从我家走到学校要一千步，在不知道每步迈多大，每步花多长时间的情况下，这个信息就很鸡肋。
Dialogue: 0,0:20:24.63,0:20:27.51,english,,0,0,0,,It wouldn't really be fair to compare numbers too precisely.
Dialogue: 0,0:20:24.63,0:20:27.51,chinese,,0,0,0,,过于精确地比较数字反而不公平。
Dialogue: 0,0:20:27.51,0:20:33.93,english,,0,0,0,,We really want to, with the wave of a hand, just get a sense of roughly how slow or how fast an algorithm is.
Dialogue: 0,0:20:27.51,0:20:33.93,chinese,,0,0,0,,我们真正想要的是，只要掐指一算，就能大致了解一个算法是多么慢或多么快。
Dialogue: 0,0:20:33.93,0:20:36.00,english,,0,0,0,,So the notation here is deliberate.
Dialogue: 0,0:20:33.93,0:20:36.00,chinese,,0,0,0,,因此，这里的符号是有深意的。
Dialogue: 0,0:20:36.00,0:20:40.62,english,,0,0,0,,That is literally a capital O, often italicized, refer to as big O.
Dialogue: 0,0:20:36.00,0:20:40.62,chinese,,0,0,0,,字面上看是一个大写的 O，通常是斜体，被称为大 O 符号。
Dialogue: 0,0:20:40.62,0:20:43.92,english,,0,0,0,,And so the first algorithm is in big O of n.
Dialogue: 0,0:20:40.62,0:20:43.92,chinese,,0,0,0,,所以第一个算法的复杂度是 O(n)，
Dialogue: 0,0:20:43.92,0:20:47.76,english,,0,0,0,,The second algorithm is in big O of n divided by 2.
Dialogue: 0,0:20:43.92,0:20:47.76,chinese,,0,0,0,,第二个算法的复杂度是 O(n/2)，
Dialogue: 0,0:20:47.76,0:20:51.48,english,,0,0,0,,The third algorithm is in big O of log base 2 of n.
Dialogue: 0,0:20:47.76,0:20:51.48,chinese,,0,0,0,,第三个算法的复杂度是 O(log₂(n))。
Dialogue: 0,0:20:51.48,0:20:54.69,english,,0,0,0,,But even that is kind of unnecessary detail.
Dialogue: 0,0:20:51.48,0:20:54.69,chinese,,0,0,0,,但即使是这么写，还是有不太必要的细节。
Dialogue: 0,0:20:54.69,0:21:01.23,english,,0,0,0,,When using big O notation, you really don't care about, we'll see, the smaller order terms.
Dialogue: 0,0:20:54.69,0:21:01.23,chinese,,0,0,0,,在使用大 O 符号时，我们实际上不关心小阶项。
Dialogue: 0,0:21:01.23,0:21:04.50,english,,0,0,0,,We're not going to care about the divided by 2 because you know what?
Dialogue: 0,0:21:01.23,0:21:04.50,chinese,,0,0,0,,我们不会关心除以 2 什么的，因为你知道吗？
Dialogue: 0,0:21:04.50,0:21:07.72,english,,0,0,0,,The shape of these algorithms are is almost the same.
Dialogue: 0,0:21:04.50,0:21:07.72,chinese,,0,0,0,,这些算法的形状几乎是相同的。
Dialogue: 0,0:21:07.72,0:21:11.34,english,,0,0,0,,And really, the idea-- the algorithm itself is sort of fundamentally the same.
Dialogue: 0,0:21:07.72,0:21:11.34,chinese,,0,0,0,,而且实际上，这些算法的核心思想基本上是相同的。
Dialogue: 0,0:21:11.34,0:21:13.62,english,,0,0,0,,Instead of one page at a time, I'm doing two.
Dialogue: 0,0:21:11.34,0:21:13.62,chinese,,0,0,0,,不是一页一页地处理，而是一次处理两页。
Dialogue: 0,0:21:13.62,0:21:22.08,english,,0,0,0,,But if you throw millions of pages, billions of pages at me, those algorithms are really going to kind of perform the same as n gets really large, goes off toward infinity.
Dialogue: 0,0:21:13.62,0:21:22.08,chinese,,0,0,0,,但如果你向我丢过来几百万、几十亿页，\N随着 n 变得非常大，趋近无穷大，这些算法的表现将会非常相似，没有量级上的效率区别。
Dialogue: 0,0:21:22.08,0:21:23.58,english,,0,0,0,,And the same is true for logarithms.
Dialogue: 0,0:21:22.08,0:21:23.58,chinese,,0,0,0,,对数（log）也是一个道理。
Dialogue: 0,0:21:23.58,0:21:33.04,english,,0,0,0,,Even if you're a little rusty, it turns out that whether you do the math with log base 2, log base 3, log base 10, you can just multiply one by the other to really get the same formula.
Dialogue: 0,0:21:23.58,0:21:33.04,chinese,,0,0,0,,可能对数运算你们有点生疏了，其实，无论是用底数 2、底数 3 还是底数 10 进行计算，\N通过把它们相乘，最终得到的大 O 表示法都是一样的。
Dialogue: 0,0:21:23.58,0:21:33.04,annotation,,0,0,0,,*注：就是说，不管底数是多少，通过换底公式，都可以让底统一起来，无非就是前面带一个系数。\N而系数在前面讲 O(n) 的时候就提到了，不管 n 前面带 1/2 还是 2 什么的，都可以忽略掉。\N
Dialogue: 0,0:21:33.04,0:21:39.27,english,,0,0,0,,So this is only to say a computer scientist would generally say that the first two algorithms are on the order of n steps.
Dialogue: 0,0:21:33.04,0:21:39.27,chinese,,0,0,0,,因此，计算机科学家通常会说，前两个算法的时间复杂度是 O(n)，
Dialogue: 0,0:21:39.27,0:21:42.69,english,,0,0,0,,The third algorithm is on the order of log n steps.
Dialogue: 0,0:21:39.27,0:21:42.69,chinese,,0,0,0,,第三个算法的时间复杂度是 O(log n)。
Dialogue: 0,0:21:42.69,0:21:46.35,english,,0,0,0,,And we don't really care precisely what we mean beyond that.
Dialogue: 0,0:21:42.69,0:21:46.35,chinese,,0,0,0,,除此之外，我们并不关心确切有多少次运算（，只要知道跟数据规模 n 的关系就够了）。
Dialogue: 0,0:21:46.35,0:21:49.77,english,,0,0,0,,And this big O notation, as we'll see-- and actually, let me zoom out.
Dialogue: 0,0:21:46.35,0:21:49.77,chinese,,0,0,0,,而这个大 O 符号，我们会看到... 让我放大一下。
Dialogue: 0,0:21:49.77,0:21:58.32,english,,0,0,0,,If you can imagine suddenly making the x-axis much longer-- so more pages on the screen at once-- it is indeed going to be the shapes of these curves
Dialogue: 0,0:21:49.77,0:21:58.32,chinese,,0,0,0,,来想象一下，把 x 轴拉得很长很长，\N让屏幕上显示的跨度更大，实际上最终只有这些曲线的形状能够辨认，（注意理解图的变化）
Dialogue: 0,0:21:58.32,0:22:07.47,english,,0,0,0,,that matter, because imagine in your mind's eye as you zoom out, zoom out, zoom out, zoom out, and as n gets much, much, much bigger on the x-axis, the red and the yellow line
Dialogue: 0,0:21:58.32,0:22:07.47,chinese,,0,0,0,,在你的脑海里想象，整张图不断缩小再缩小，\Nn 越来越大，现在 x 轴上的 n 已经大到接近无穷了，
Dialogue: 0,0:22:07.47,0:22:11.40,english,,0,0,0,,are essentially going to look the same once n is sufficiently large.
Dialogue: 0,0:22:07.47,0:22:11.40,chinese,,0,0,0,,红线和黄线基本上会重叠到看起来一样。
Dialogue: 0,0:22:11.40,0:22:14.37,english,,0,0,0,,But the green line is never going to look the same.
Dialogue: 0,0:22:11.40,0:22:14.37,chinese,,0,0,0,,但是绿线永远也不会跟那俩看起来一样。
Dialogue: 0,0:22:14.37,0:22:16.42,english,,0,0,0,,It's going to be a fundamentally different shape.
Dialogue: 0,0:22:14.37,0:22:16.42,chinese,,0,0,0,,它的形状是完全不同的。
Dialogue: 0,0:22:16.42,0:22:23.20,english,,0,0,0,,And so that's the intuition of big O, to get a sense of these rates of performance like this.
Dialogue: 0,0:22:16.42,0:22:23.20,chinese,,0,0,0,,所以这就是大 O 符号的直观性，这些算法的性能一看便知。
Dialogue: 0,0:22:23.20,0:22:32.49,english,,0,0,0,,So here, then, is big O. Here is, perhaps, a cheat sheet of the common formulas that a computer scientist, certainly in an introductory context, might use when analyzing algorithms.
Dialogue: 0,0:22:23.20,0:22:32.49,chinese,,0,0,0,,这里是计算机科学家们，可能初学者用得多一点，\N在分析算法效率时可能会用到的常用公式的速查表。
Dialogue: 0,0:22:32.49,0:22:39.04,english,,0,0,0,,And let's consider for a moment which of our first two algorithms-- linear search and binary search-- fall into these categories.
Dialogue: 0,0:22:32.49,0:22:39.04,chinese,,0,0,0,,让我们考虑一下刚才两种算法，线性查找和二分查找，分别属于哪一种。
Dialogue: 0,0:22:39.04,0:22:44.31,english,,0,0,0,,So I've ordered them from slowest to fastest, so order of n squared.
Dialogue: 0,0:22:39.04,0:22:44.31,chinese,,0,0,0,,这里已经按照最慢到最快排好序了，所以排第一个最慢的是 n 平方。
Dialogue: 0,0:22:44.31,0:22:48.39,english,,0,0,0,,It's not something we've actually seen yet, but it tends to be slow because it's quadratic.
Dialogue: 0,0:22:44.31,0:22:48.39,chinese,,0,0,0,,我们还没有真正见过这种情况，但它往往很慢，因为带了平方。
Dialogue: 0,0:22:48.39,0:22:51.09,english,,0,0,0,,You're doing n times n. That's got to add up to a lot of steps.
Dialogue: 0,0:22:48.39,0:22:51.09,chinese,,0,0,0,,也就是有 n 次 n，步骤叠加起来可就很多了。
Dialogue: 0,0:22:48.39,0:22:51.09,annotation,,0,0,0,,*注：还记得上节课，for 循环里面调用 strlen 吗，就是 O(n^2) 的时间复杂度。
Dialogue: 0,0:22:51.09,0:22:53.19,english,,0,0,0,,Better today is going to be n log n.
Dialogue: 0,0:22:51.09,0:22:53.19,chinese,,0,0,0,,比这更好的是 n log n。
Dialogue: 0,0:22:53.19,0:22:54.63,english,,0,0,0,,Even better is going to be n.
Dialogue: 0,0:22:53.19,0:22:54.63,chinese,,0,0,0,,更好的是 n。
Dialogue: 0,0:22:54.63,0:22:56.19,english,,0,0,0,,Even better than that is log n.
Dialogue: 0,0:22:54.63,0:22:56.19,chinese,,0,0,0,,还要好的是 log n。
Dialogue: 0,0:22:56.19,0:23:08.20,english,,0,0,0,,And best is so-called order of 1, like one step or maybe two steps, maybe even 1,000 steps, but a fixed, finite number of steps that never changes no matter how big n is.
Dialogue: 0,0:22:56.19,0:23:08.20,chinese,,0,0,0,,最好的是所谓的 O(1)，可能 1 步，2 步也可以，甚至 1000 步都没问题，\N只要是一个固定的、有限的步骤，无论 n 有多大，这个数字都不会随之改变。
Dialogue: 0,0:22:56.19,0:23:08.20,annotation,,0,0,0,,*注：可能还有同学不太理解为什么这里都能看作 O(1)，不太理解为什么可以忽略 n （最高项）前面的系数。\N时间复杂度从概念上来说，它表示的是算法执行效率 "随着数据规模 n 增长" 的 "变化趋势"（划两个重点），\N不管这些常量的执行会花费多少工夫，我们都可以忽略掉，因为它跟 n 无关，不会影响到 "增长趋势"。\N形象一点理解，就是教授刚才说的 "函数形状"，当 n 被拉到无穷大的时候，这些都是无足轻重的，理解到这里就够了。
Dialogue: 0,0:23:08.20,0:23:13.57,english,,0,0,0,,So given this chart, just to be clear, linear search-- let's consider the worst case.
Dialogue: 0,0:23:08.20,0:23:13.57,chinese,,0,0,0,,所以来根据这个图表想想线性查找，考虑最坏的情况。
Dialogue: 0,0:23:13.57,0:23:23.50,english,,0,0,0,,In the worst case, how many steps did it take someone like Stephanie to find the solution to the problem, assuming not seven doors but n doors?
Dialogue: 0,0:23:13.57,0:23:23.50,chinese,,0,0,0,,假设不是 7 扇门，而是 n 扇门，\N最坏的情况下，Stephanie 需要走多少步才能找到答案？
Dialogue: 0,0:23:23.50,0:23:25.16,english,,0,0,0,,Yeah?
Dialogue: 0,0:23:25.16,0:23:26.54,english,,0,0,0,,So on the order of n.
Dialogue: 0,0:23:25.16,0:23:26.54,chinese,,0,0,0,,答案是 "n 阶"。
Dialogue: 0,0:23:26.54,0:23:28.28,english,,0,0,0,,And in this case, it's exactly n.
Dialogue: 0,0:23:26.54,0:23:28.28,chinese,,0,0,0,,这种情况，你可以说正好是 n。
Dialogue: 0,0:23:28.28,0:23:33.53,english,,0,0,0,,But you know what, maybe it's arguably 2n because it took Stephanie a couple of steps.
Dialogue: 0,0:23:28.28,0:23:33.53,chinese,,0,0,0,,但你知道吗，说是 2n 也没错，Stephanie 还做了额外一些操作。
Dialogue: 0,0:23:33.53,0:23:34.46,english,,0,0,0,,She had to lift the latch.
Dialogue: 0,0:23:33.53,0:23:34.46,chinese,,0,0,0,,她必须要解开门锁。
Dialogue: 0,0:23:34.46,0:23:35.36,english,,0,0,0,,She had to open the door.
Dialogue: 0,0:23:34.46,0:23:35.36,chinese,,0,0,0,,她必须要把门打开。
Dialogue: 0,0:23:35.36,0:23:36.31,english,,0,0,0,,Maybe it's three steps.
Dialogue: 0,0:23:35.36,0:23:36.31,chinese,,0,0,0,,可能说是有三步呢。
Dialogue: 0,0:23:36.31,0:23:37.53,english,,0,0,0,,She had to show the money.
Dialogue: 0,0:23:36.31,0:23:37.53,chinese,,0,0,0,,她还必须把钱拿出来。
Dialogue: 0,0:23:37.53,0:23:39.17,english,,0,0,0,,So now it's 3n, 2n.
Dialogue: 0,0:23:37.53,0:23:39.17,chinese,,0,0,0,,所以现在可以说是 3n，2n...
Dialogue: 0,0:23:39.17,0:23:41.99,english,,0,0,0,,But we don't really care about that level of precision.
Dialogue: 0,0:23:39.17,0:23:41.99,chinese,,0,0,0,,这种精确度我们并不关心。
Dialogue: 0,0:23:41.99,0:23:45.66,english,,0,0,0,,We really just care about the fundamental number of operations.
Dialogue: 0,0:23:41.99,0:23:45.66,chinese,,0,0,0,,我们其实只关心操作的基本次数。
Dialogue: 0,0:23:45.66,0:23:47.54,english,,0,0,0,,So we'll say yes, on the order of n.
Dialogue: 0,0:23:45.66,0:23:47.54,chinese,,0,0,0,,所以说，没错，是 n 阶的。
Dialogue: 0,0:23:47.54,0:23:51.32,english,,0,0,0,,So that might be an upper bound, we'll call this, for linear search.
Dialogue: 0,0:23:47.54,0:23:51.32,chinese,,0,0,0,,所以，这就是线性查找的上界，我们称之为 upper bound。
Dialogue: 0,0:23:51.32,0:23:53.03,english,,0,0,0,,And how about binary search?
Dialogue: 0,0:23:51.32,0:23:53.03,chinese,,0,0,0,,那么二分查找呢？
Dialogue: 0,0:23:53.03,0:24:02.91,english,,0,0,0,,In Jackson's case, or in general, me in Week 0, if there's n doors, how many steps did it take Jackson or me using binary search?
Dialogue: 0,0:23:53.03,0:24:02.91,chinese,,0,0,0,,Jackson 或者我来用二分查找，n 扇门的时候需要多少步？
Dialogue: 0,0:24:02.91,0:24:04.86,english,,0,0,0,,In this case, it was literally three.
Dialogue: 0,0:24:02.91,0:24:04.86,chinese,,0,0,0,,在这个例子里，答案是字面上的 3。
Dialogue: 0,0:24:04.86,0:24:07.20,english,,0,0,0,,But that's not a formula.
Dialogue: 0,0:24:04.86,0:24:07.20,chinese,,0,0,0,,但这不是一个公式。
Dialogue: 0,0:24:07.20,0:24:09.69,english,,0,0,0,,Yeah so it's on the order of log n.
Dialogue: 0,0:24:07.20,0:24:09.69,chinese,,0,0,0,,是的，所以应该叫做对数阶（log n）。
Dialogue: 0,0:24:09.69,0:24:14.25,english,,0,0,0,,And indeed, if there are seven doors, well, that's almost eight, if you just do a little bit of rounding.
Dialogue: 0,0:24:09.69,0:24:14.25,chinese,,0,0,0,,7 扇门的话，稍微舍入一下，就是 8。
Dialogue: 0,0:24:14.25,0:24:18.48,english,,0,0,0,,And indeed, if you take log base 2 of 8, that does actually give us 3.
Dialogue: 0,0:24:14.25,0:24:18.48,chinese,,0,0,0,,而以 2 为底 8 的对数，实际上答案就是 3。
Dialogue: 0,0:24:18.48,0:24:19.81,english,,0,0,0,,So the math actually checks out.
Dialogue: 0,0:24:18.48,0:24:19.81,chinese,,0,0,0,,计算结果准确无误。
Dialogue: 0,0:24:19.81,0:24:22.27,english,,0,0,0,,And if you're not comfortable with logarithms, no big deal.
Dialogue: 0,0:24:19.81,0:24:22.27,chinese,,0,0,0,,如果你不太适应对数运算，也没什么大不了的。
Dialogue: 0,0:24:22.27,0:24:23.67,english,,0,0,0,,Just think about it intuitively.
Dialogue: 0,0:24:22.27,0:24:23.67,chinese,,0,0,0,,凭直觉想一想就知道了。
Dialogue: 0,0:24:23.67,0:24:27.01,english,,0,0,0,,Logarithm of base 2 is just dividing something again and again.
Dialogue: 0,0:24:23.67,0:24:27.01,chinese,,0,0,0,,以 2 为底的对数就是把某个东西不断分成两半。
Dialogue: 0,0:24:27.01,0:24:40.09,english,,0,0,0,,So on this chart, when we consider big O, which to be clear, allows you to describe the order of an algorithm's running time-- like the magnitude of it-- but it also describes, more specifically, an upper bound.
Dialogue: 0,0:24:27.01,0:24:40.09,chinese,,0,0,0,,考虑这张图上大 O 的时候，要明确一点，\N它是用来描述算法运行时间的阶数的，也就是数量级，它具体地描述了一个上界。
Dialogue: 0,0:24:40.09,0:24:49.27,english,,0,0,0,,So in the worst case, for instance, these are pretty good measures of how good-- or rather, of how bad-- linear search and binary search might be.
Dialogue: 0,0:24:40.09,0:24:49.27,chinese,,0,0,0,,不管是线性查找还是二分查找，\N通过大 O 表示法都能衡量出最坏情况下算法的效率（也就是算法复杂度的上界）。
Dialogue: 0,0:24:49.27,0:24:49.77,english,,0,0,0,,Why?
Dialogue: 0,0:24:49.77,0:24:56.32,english,,0,0,0,,Well, suppose you're searching a 1,000-page phonebook and the person's name starts with Z. The algorithm is still going to be on the order of n steps.
Dialogue: 0,0:24:49.77,0:24:56.32,chinese,,0,0,0,,好吧，假设你正在翻阅一本电话簿，整整 1000 页，\N而要找的人名字是 Z 开头的，算法的时间复杂度就是 O(n)。
Dialogue: 0,0:24:56.32,0:24:56.82,english,,0,0,0,,Why?
Dialogue: 0,0:24:56.82,0:25:01.08,english,,0,0,0,,Because it might take you as many as all n steps to find it.
Dialogue: 0,0:24:56.82,0:25:01.08,chinese,,0,0,0,,因为最坏情况要 n 个步骤才能找到它。
Dialogue: 0,0:25:01.08,0:25:05.25,english,,0,0,0,,Now that's not necessarily going to be the case in practice.
Dialogue: 0,0:25:01.08,0:25:05.25,chinese,,0,0,0,,但实际情况未必如此。
Dialogue: 0,0:25:05.25,0:25:16.18,english,,0,0,0,,If I use big O as an upper bound, well, it would be nice if there's a corresponding lower bound, especially if you want to consider not just worst cases, but maybe best cases.
Dialogue: 0,0:25:05.25,0:25:16.18,chinese,,0,0,0,,如果大 O 作为上限的话，如果有相应的下限就更好了，\N不仅要考虑最坏的情况，还要考虑最好的情况。
Dialogue: 0,0:25:16.18,0:25:18.04,english,,0,0,0,,So what might we use here?
Dialogue: 0,0:25:16.18,0:25:18.04,chinese,,0,0,0,,那可以怎么来表示呢？
Dialogue: 0,0:25:18.04,0:25:20.20,english,,0,0,0,,Well, this is a capital Greek omega symbol.
Dialogue: 0,0:25:18.04,0:25:20.20,chinese,,0,0,0,,这是一个大写的希腊文 omega 符号。
Dialogue: 0,0:25:20.20,0:25:28.71,english,,0,0,0,,So omega is the symbol that a computer scientist uses generally to describe a lower bound on an algorithm, often in the context of best case, though not necessarily.
Dialogue: 0,0:25:20.20,0:25:28.71,chinese,,0,0,0,,Ω 通常是计算机科学家用来描述算法下界的符号，也就是算法的最好情况。
Dialogue: 0,0:25:28.71,0:25:32.49,english,,0,0,0,,So a lower bound means how few steps might an algorithm take?
Dialogue: 0,0:25:28.71,0:25:32.49,chinese,,0,0,0,,下界是指，算法最少可能需要多少步？
Dialogue: 0,0:25:32.49,0:25:33.99,english,,0,0,0,,And here, too, same formulas.
Dialogue: 0,0:25:32.49,0:25:33.99,chinese,,0,0,0,,还是有这些公式。
Dialogue: 0,0:25:33.99,0:25:36.27,english,,0,0,0,,And we'll fill in these blanks over time.
Dialogue: 0,0:25:33.99,0:25:36.27,chinese,,0,0,0,,随着时间的推移，我们会把这块的理解补上。
Dialogue: 0,0:25:36.27,0:25:41.37,english,,0,0,0,,Some algorithms might always take a minimum of n squared steps, or on the order of n steps.
Dialogue: 0,0:25:36.27,0:25:41.37,chinese,,0,0,0,,有些算法可能最少都需要 n 方步，或者跟 n 数量级相当。
Dialogue: 0,0:25:41.37,0:25:45.66,english,,0,0,0,,Some might only take n log n, or n, or log n, or 1.
Dialogue: 0,0:25:41.37,0:25:45.66,chinese,,0,0,0,,有些则可能只需要 n log n、n、log n，或 1。
Dialogue: 0,0:25:45.66,0:25:52.98,english,,0,0,0,,So something like a linear search-- when Stephanie started with linear search, she didn't get lucky this time on stage.
Dialogue: 0,0:25:45.66,0:25:52.98,chinese,,0,0,0,,所以考虑下线性查找呢，当时 Stephanie 使用线性查找时并没有很走运。
Dialogue: 0,0:25:52.98,0:25:57.72,english,,0,0,0,,But what if she had, and the first door she opened were 50?
Dialogue: 0,0:25:52.98,0:25:57.72,chinese,,0,0,0,,要是她运气到位了，打开的第一扇门就是 50 呢？
Dialogue: 0,0:25:57.72,0:26:08.29,english,,0,0,0,,How might you then describe the lower bound on linear search in this so-called best case, using this list of possible answers?
Dialogue: 0,0:25:57.72,0:26:08.29,chinese,,0,0,0,,你怎么描述线性搜索在这种最好情况里的下界呢？答案就在这个表里面。
Dialogue: 0,0:26:08.29,0:26:09.53,english,,0,0,0,,Yeah?
Dialogue: 0,0:26:09.53,0:26:11.06,english,,0,0,0,,Yeah, so omega of 1.
Dialogue: 0,0:26:09.53,0:26:11.06,chinese,,0,0,0,,对的，答案是 Ω(1)。
Dialogue: 0,0:26:11.06,0:26:18.99,english,,0,0,0,,So in the best case, the lower bound on how many steps it might take linear search to find something might just be one step.
Dialogue: 0,0:26:11.06,0:26:18.99,chinese,,0,0,0,,在最理想的情况里，线性查找需要多少步才能找到某样东西？这个问题的答案是 1。
Dialogue: 0,0:26:18.99,0:26:19.49,english,,0,0,0,,Why?
Dialogue: 0,0:26:19.49,0:26:34.61,english,,0,0,0,,Because maybe if Stephanie had gotten lucky and we had prefilled these lockers with the numbers in some other order such that she might have opened the first locker, and voila, the number 50 could have been there, so a lower bound arguably could indeed be omega of 1 for linear search.
Dialogue: 0,0:26:19.49,0:26:34.61,chinese,,0,0,0,,如果里面的钱换了个方式摆放，让 Stephanie 运气超级好，她一打开第一个柜子，\N数字 50 就赫然眼前，所以我们可以确认，线性查找的下界确实是 Ω(1)。
Dialogue: 0,0:26:34.61,0:26:35.99,english,,0,0,0,,And how about now for Jackson?
Dialogue: 0,0:26:34.61,0:26:35.99,chinese,,0,0,0,,Jackson 的情况又怎么样？
Dialogue: 0,0:26:35.99,0:26:37.44,english,,0,0,0,,He used binary search.
Dialogue: 0,0:26:35.99,0:26:37.44,chinese,,0,0,0,,他使用的是二分查找。
Dialogue: 0,0:26:37.44,0:26:40.94,english,,0,0,0,,So he dived right into the middle of the problem.
Dialogue: 0,0:26:37.44,0:26:40.94,chinese,,0,0,0,,于是，他一头扎进了问题中心。
Dialogue: 0,0:26:40.94,0:26:45.02,english,,0,0,0,,But what would be a lower bound on binary search using this logic?
Dialogue: 0,0:26:40.94,0:26:45.02,chinese,,0,0,0,,使用二分查找的逻辑，下限又是多少呢？
Dialogue: 0,0:26:45.02,0:26:45.98,english,,0,0,0,,Yeah?
Dialogue: 0,0:26:45.98,0:26:47.46,english,,0,0,0,,Yeah, so again, omega of 1.
Dialogue: 0,0:26:45.98,0:26:47.46,chinese,,0,0,0,,没错，一样的，还是 Ω(1)。
Dialogue: 0,0:26:47.46,0:26:47.96,english,,0,0,0,,Why?
Dialogue: 0,0:26:47.96,0:26:49.58,english,,0,0,0,,Because maybe he just gets lucky.
Dialogue: 0,0:26:47.96,0:26:49.58,chinese,,0,0,0,,可能就是运气好吧。
Dialogue: 0,0:26:49.58,0:26:53.30,english,,0,0,0,,And indeed, right in the middle of the lockers could have been the number 50.
Dialogue: 0,0:26:49.58,0:26:53.30,chinese,,0,0,0,,柜子的正中间是 50 号，这种可能性是有的。
Dialogue: 0,0:26:53.30,0:26:54.06,english,,0,0,0,,It wasn't.
Dialogue: 0,0:26:54.06,0:27:00.05,english,,0,0,0,,And so more germane in Jackson's actual practice would have been the big O discussion.
Dialogue: 0,0:26:54.06,0:27:00.05,chinese,,0,0,0,,在 Jackson 的实际操作里面，大 O 表示法更加贴切。
Dialogue: 0,0:27:00.05,0:27:12.26,english,,0,0,0,,But big O and omega, upper bound and lower bound, just allow a computer scientist to kind of wrestle with what could happen maybe in the worst case, what can happen in the best case? And you can even get even more precise like the average case or the like.
Dialogue: 0,0:27:00.05,0:27:12.26,chinese,,0,0,0,,大 O 代表上界，也就是最坏情况下发生的事情；Ω 代表下界，就是最好情况下发生的事情。\N这两种都是计算机科学家对程序执行效率的分析，\N甚至追求更加精确的话，还可以分析平均情况也就是平均时间复杂度之类的。
Dialogue: 0,0:27:12.26,0:27:24.08,english,,0,0,0,,And this is, indeed, what engineers might do at a whiteboard in a company, in a university when designing an algorithm and trying to make arguments as to why their algorithm is better than someone else's, by way of these kinds of analyses.
Dialogue: 0,0:27:12.26,0:27:24.08,chinese,,0,0,0,,其实，这就是工程师们在设计算法时，写在公司或大学的白板上的东西，\N他们试图用这些分析来证明，自己的算法比别人的算法更好。
Dialogue: 0,0:27:24.08,0:27:35.88,english,,0,0,0,,And just so you've seen it, it turns out that if some algorithm happens to have an identical upper bound and lower bound, you can actually use a capital Greek theta as well.
Dialogue: 0,0:27:24.08,0:27:35.88,chinese,,0,0,0,,你还会看到，如果某些算法的上界和下界相同，还可以使用希腊字母 Θ。
Dialogue: 0,0:27:35.88,0:27:38.21,english,,0,0,0,,And this is the last of the Greek symbols today.
Dialogue: 0,0:27:35.88,0:27:38.21,chinese,,0,0,0,,这是今天最后一个希腊符号。
Dialogue: 0,0:27:38.21,0:27:43.13,english,,0,0,0,,But a Greek theta indicates a coincidence of both upper bound and lower bound.
Dialogue: 0,0:27:38.21,0:27:43.13,chinese,,0,0,0,,希腊字母 Θ 表示上界和下界的重合。
Dialogue: 0,0:27:43.13,0:27:44.70,english,,0,0,0,,That is, they are one and the same.
Dialogue: 0,0:27:43.13,0:27:44.70,chinese,,0,0,0,,也就是说，它们一模一样。
Dialogue: 0,0:27:44.70,0:27:49.22,english,,0,0,0,,That was not the case for our discussion a second ago of linear search, not the case for binary search.
Dialogue: 0,0:27:44.70,0:27:49.22,chinese,,0,0,0,,刚才我们讨论了线性查找、二分查找，两种算法都并非如此。
Dialogue: 0,0:27:49.22,0:27:56.97,english,,0,0,0,,But you could use the same kinds of formulas if it turns out that your upper bound and lower bound are the same.
Dialogue: 0,0:27:49.22,0:27:56.97,chinese,,0,0,0,,要是上界和下界是一样的，你可以写成这里展示的公式。
Dialogue: 0,0:27:56.97,0:28:09.08,english,,0,0,0,,So for instance, if I were to count everyone literally in this room-- one, two, three, four, five, six and so forth-- you could actually say that counting in that way is in theta of n
Dialogue: 0,0:27:56.97,0:28:09.08,chinese,,0,0,0,,比如说，如果我要统计房间里的人数—— 1、2、3...\N 你实际上可以说，这种方式数数的时间复杂度是 Θ(n)，
Dialogue: 0,0:28:09.08,0:28:13.46,english,,0,0,0,,because in the best case, it's going to take me n points, people in the audience.
Dialogue: 0,0:28:09.08,0:28:13.46,chinese,,0,0,0,,因为最好的情况，我得数 n 个观众。
Dialogue: 0,0:28:13.46,0:28:15.26,english,,0,0,0,,In the worst case, it's going to take me n.
Dialogue: 0,0:28:13.46,0:28:15.26,chinese,,0,0,0,,在最坏情况下，我还是需要数 n 个。
Dialogue: 0,0:28:15.26,0:28:18.38,english,,0,0,0,,It's always going to take me n steps if I want to count everyone in the room.
Dialogue: 0,0:28:15.26,0:28:18.38,chinese,,0,0,0,,如果我想数出房间里的每个人，总是需要 n 步。
Dialogue: 0,0:28:18.38,0:28:20.93,english,,0,0,0,,You can't really do better than that unless you skip people.
Dialogue: 0,0:28:18.38,0:28:20.93,chinese,,0,0,0,,除非你跳过一些人，不然没可能做得更好。
Dialogue: 0,0:28:20.93,0:28:26.15,english,,0,0,0,,So that would be an example of the cuff of something where theta is instead germane.
Dialogue: 0,0:28:20.93,0:28:26.15,chinese,,0,0,0,,这就是一个日常生活里跟 Θ 特别有关联的算法例子。
Dialogue: 0,0:28:26.15,0:28:38.73,english,,0,0,0,,Are any questions now on big O, on omega, or theta, which are now just more formal tools in the toolkit for talking about the design of our algorithms?
Dialogue: 0,0:28:26.15,0:28:38.73,chinese,,0,0,0,,关于大 O、Ω 还有 Θ 这几种时间复杂度还有问题吗？\N关于分析和设计算法，我们现在又多了几样工具了。
Dialogue: 0,0:28:26.15,0:28:38.73,annotation,,0,0,0,,*注：这里来总结一下：\N O（大 O）表示上界（upper bound），时间复杂度 O(f(n)) 表示该算法的运行时间在最坏情况下以 f(n) 的量级增长；\N Ω（Omega）表示下界（lower bound），时间复杂度 Ω(f(n)) 表示该算法的运行时间在最好情况下以 f(n) 的量级增长；\NΘ（Theta）表示紧确界（tight bound），适用于上界和下界一致的情况。\N大 O 表示法使用得最为广泛，因为大部分情况下最能说明算法的效率，不能每次都寄希望于最好情况是吧。\N现在了解到这里就足够了，后面很多进阶课程会更加深入地讨论时间/空间复杂度。
Dialogue: 0,0:28:38.73,0:28:42.05,english,,0,0,0,,Any questions?
Dialogue: 0,0:28:38.73,0:28:42.05,chinese,,0,0,0,,有问题吗？
Dialogue: 0,0:28:42.05,0:28:42.86,english,,0,0,0,,No?
Dialogue: 0,0:28:42.86,0:28:44.72,english,,0,0,0,,Seeing none.
Dialogue: 0,0:28:44.72,0:28:45.56,english,,0,0,0,,Oh, is this-- yes?
Dialogue: 0,0:28:45.56,0:28:46.84,english,,0,0,0,,No?
Dialogue: 0,0:28:46.84,0:28:48.25,english,,0,0,0,,OK, so we're good.
Dialogue: 0,0:28:46.84,0:28:48.25,chinese,,0,0,0,,好吧，大家都真棒。
Dialogue: 0,0:28:48.25,0:28:52.00,english,,0,0,0,,So let's go ahead and translate this, perhaps, to some actual code.
Dialogue: 0,0:28:48.25,0:28:52.00,chinese,,0,0,0,,现在我们来把思想翻译成实际的代码吧。
Dialogue: 0,0:28:52.00,0:28:53.90,english,,0,0,0,,Let me go over to VS Code here.
Dialogue: 0,0:28:52.00,0:28:53.90,chinese,,0,0,0,,转到 VS Code。
Dialogue: 0,0:28:53.90,0:29:00.28,english,,0,0,0,,And let's see if we can't now translate some of these ideas to some actual code, not so much using new syntax yet.
Dialogue: 0,0:28:53.90,0:29:00.28,chinese,,0,0,0,,现在，我们来看看怎么把这些想法转化成实际代码，不会用到太多新语法。
Dialogue: 0,0:29:00.28,0:29:03.32,english,,0,0,0,,We're going to still operate in this world of arrays like last week.
Dialogue: 0,0:29:00.28,0:29:03.32,chinese,,0,0,0,,跟上周一样，我们需要操作数组。
Dialogue: 0,0:29:03.32,0:29:09.28,english,,0,0,0,,So let me go ahead and create a program called search.c by executing code space search.c in my terminal.
Dialogue: 0,0:29:03.32,0:29:09.28,chinese,,0,0,0,,终端里执行 code search.c，创建程序 search.c。
Dialogue: 0,0:29:09.28,0:29:23.14,english,,0,0,0,,And then up here, let's go ahead and include our usual, so include cs50.h so I can get some input. Include standard io.h so I can print some output. We'll do int main void, the meaning of which we did start to tease apart last week.
Dialogue: 0,0:29:09.28,0:29:23.14,chinese,,0,0,0,,【口述代码】
Dialogue: 0,0:29:23.14,0:29:26.65,english,,0,0,0,,The fact that it's void again today just means no command line arguments.
Dialogue: 0,0:29:23.14,0:29:26.65,chinese,,0,0,0,,上周我们已经揭开他们的面纱，不需要命令行参数，所以写 void。
Dialogue: 0,0:29:26.65,0:29:28.58,english,,0,0,0,,And let me go ahead and do this.
Dialogue: 0,0:29:26.65,0:29:28.58,chinese,,0,0,0,,我要这么做。
Dialogue: 0,0:29:28.58,0:29:34.84,english,,0,0,0,,Let me go ahead and declare, just for discussion's sake, a static array, like an array that never changes.
Dialogue: 0,0:29:28.58,0:29:34.84,chinese,,0,0,0,,我们接着讨论讨论，声明一个静态数组，它的大小永远不会改变。
Dialogue: 0,0:29:34.84,0:29:41.29,english,,0,0,0,,And the syntax for this is going to be give me an array called numbers using the square bracket notation.
Dialogue: 0,0:29:34.84,0:29:41.29,chinese,,0,0,0,,语法是数组类型，数组名，后面接一个空的方括号。
Dialogue: 0,0:29:41.29,0:29:50.06,english,,0,0,0,,And I'm going to immediately initialize it to 20, 500, 10, 5, 100, 1, and 50, reminiscent of those same denominations as before.
Dialogue: 0,0:29:41.29,0:29:50.06,chinese,,0,0,0,,然后马上初始化为 20、500、10、5、100、1 和 50，跟之前的那些面额相呼应。
Dialogue: 0,0:29:50.06,0:29:54.08,english,,0,0,0,,So this is a slightly new syntax that we've perhaps not seen.
Dialogue: 0,0:29:50.06,0:29:54.08,chinese,,0,0,0,,这种语法略微有点新颖，之前还没有见过。
Dialogue: 0,0:29:54.08,0:30:05.38,english,,0,0,0,,And the curly braces here, which are different from for loops and while loops and functions, just tell the compiler please give me an array of whatever size this is containing those numbers left to right.
Dialogue: 0,0:29:54.08,0:30:05.38,chinese,,0,0,0,,这里的花括号跟 for 循环、while 循环和函数都不一样，只是告诉编译器，\N请给我一个数组，大小你自己算，反正从左到右刚好包含这些数字。
Dialogue: 0,0:30:05.38,0:30:10.22,english,,0,0,0,,I could alternatively use last week's syntax of saying something like this.
Dialogue: 0,0:30:05.38,0:30:10.22,chinese,,0,0,0,,用上周学的语法也可以，这样写。
Dialogue: 0,0:30:10.22,0:30:13.09,english,,0,0,0,,Let's see, 1, 2, 3, 4, 5, 6, 7 denominations.
Dialogue: 0,0:30:10.22,0:30:13.09,chinese,,0,0,0,,一共有 7 项。
Dialogue: 0,0:30:13.09,0:30:15.25,english,,0,0,0,,I could alternatively do this.
Dialogue: 0,0:30:13.09,0:30:15.25,chinese,,0,0,0,,可以改成这种。
Dialogue: 0,0:30:15.25,0:30:25.57,english,,0,0,0,,And then I could say numbers bracket 0 equals 20, numbers bracket 1 equals 500.
Dialogue: 0,0:30:15.25,0:30:25.57,chinese,,0,0,0,,【口述代码】
Dialogue: 0,0:30:25.57,0:30:27.57,english,,0,0,0,,And I could do this five more times.
Dialogue: 0,0:30:25.57,0:30:27.57,chinese,,0,0,0,,还要这么写五行。
Dialogue: 0,0:30:27.57,0:30:28.78,english,,0,0,0,,That's just a little tedious.
Dialogue: 0,0:30:27.57,0:30:28.78,chinese,,0,0,0,,有点没意思。
Dialogue: 0,0:30:28.78,0:30:32.53,english,,0,0,0,,If you know the numbers in advance, you don't have to tell the compiler how many there are.
Dialogue: 0,0:30:28.78,0:30:32.53,chinese,,0,0,0,,如果事先知道是哪些数字，就不必告诉编译器有多少个，让它自己推断。
Dialogue: 0,0:30:32.53,0:30:39.43,english,,0,0,0,,You can just let it figure it out that your numbers will be 10, 500, 10, 5, 100, 1, and 50.
Dialogue: 0,0:30:32.53,0:30:39.43,chinese,,0,0,0,,【口述代码】
Dialogue: 0,0:30:39.43,0:30:42.55,english,,0,0,0,,So this is how you statically define an array.
Dialogue: 0,0:30:39.43,0:30:42.55,chinese,,0,0,0,,这样就能够定义静态数组。
Dialogue: 0,0:30:42.55,0:30:45.38,english,,0,0,0,,All right, let me just go ahead and ask the user now for a number.
Dialogue: 0,0:30:42.55,0:30:45.38,chinese,,0,0,0,,现在要让用户给到一个数字。
Dialogue: 0,0:30:45.38,0:30:50.02,english,,0,0,0,,We'll call it n by using get_int and prompting them for a number-- so nothing new there.
Dialogue: 0,0:30:45.38,0:30:50.02,chinese,,0,0,0,,【口述代码】
Dialogue: 0,0:30:50.02,0:30:53.68,english,,0,0,0,,And now let me go ahead and implement linear search.
Dialogue: 0,0:30:50.02,0:30:53.68,chinese,,0,0,0,,现在我要实现线性查找了。
Dialogue: 0,0:30:53.68,0:30:57.52,english,,0,0,0,,And the pseudocode we had for this before used some array-like notation.
Dialogue: 0,0:30:53.68,0:30:57.52,chinese,,0,0,0,,之前的伪代码里面用到了一些类数组语法。
Dialogue: 0,0:30:57.52,0:30:59.62,english,,0,0,0,,Let me go ahead, then, and start similarly.
Dialogue: 0,0:30:57.52,0:30:59.62,chinese,,0,0,0,,那就从相似的这部分开始吧。
Dialogue: 0,0:30:59.62,0:31:04.27,english,,0,0,0,,For int i-- and you almost always start counting at i by convention.
Dialogue: 0,0:30:59.62,0:31:04.27,chinese,,0,0,0,,一般在循环里都是用 i 作为 counter 的。
Dialogue: 0,0:31:04.27,0:31:06.49,english,,0,0,0,,So that's perhaps a good starting point.
Dialogue: 0,0:31:04.27,0:31:06.49,chinese,,0,0,0,,从 0 开始好一点。
Dialogue: 0,0:31:06.49,0:31:09.79,english,,0,0,0,,I'm going to do this so long as i is less than 7.
Dialogue: 0,0:31:06.49,0:31:09.79,chinese,,0,0,0,,循环的条件是 i < 7。
Dialogue: 0,0:31:09.79,0:31:15.56,english,,0,0,0,,Not the best design to hard code the 7, but this is just for demonstration's sake for now, because I know how many numbers I put in there.
Dialogue: 0,0:31:09.79,0:31:15.56,chinese,,0,0,0,,硬编码 7 并不是好设计，只是为了演示而已，因为我知道里面有多少个数字。
Dialogue: 0,0:31:15.56,0:31:16.99,english,,0,0,0,,And then I'm going to i++.
Dialogue: 0,0:31:15.56,0:31:16.99,chinese,,0,0,0,,然后 i++。
Dialogue: 0,0:31:16.99,0:31:21.55,english,,0,0,0,,So now I have the beginnings of a loop that will just allow me to iterate over the entire array.
Dialogue: 0,0:31:16.99,0:31:21.55,chinese,,0,0,0,,现在我有了一个循环的雏形，能够遍历整个数组。
Dialogue: 0,0:31:21.55,0:31:22.76,english,,0,0,0,,And let me ask this.
Dialogue: 0,0:31:21.55,0:31:22.76,chinese,,0,0,0,,然后做一个条件判断。
Dialogue: 0,0:31:22.76,0:31:36.19,english,,0,0,0,,If the current number at location i equals equals n, which is the number the human typed in, then let's go ahead and do something simple like printf, quote unquote, found, backslash n.
Dialogue: 0,0:31:22.76,0:31:36.19,chinese,,0,0,0,,【口述代码】
Dialogue: 0,0:31:36.19,0:31:40.24,english,,0,0,0,,And then per our discussion last week, to indicate that this is successful,
Dialogue: 0,0:31:36.19,0:31:40.24,chinese,,0,0,0,,我们上周讨论过了，说明成功找到了，
Dialogue: 0,0:31:40.24,0:31:42.61,english,,0,0,0,,I'm going to return 0 if I found it.
Dialogue: 0,0:31:40.24,0:31:42.61,chinese,,0,0,0,,找到的话，就 return 一个 0。
Dialogue: 0,0:31:42.61,0:31:48.64,english,,0,0,0,,And if I don't find it, I'm just going to go down here and, by default, say not found, backslash n.
Dialogue: 0,0:31:42.61,0:31:48.64,chinese,,0,0,0,,要是没找到，就要跳到最下面写【口述代码】。
Dialogue: 0,0:31:48.64,0:31:52.61,english,,0,0,0,,And just for convention-- whoops, just for good measure, per convention,
Dialogue: 0,0:31:48.64,0:31:52.61,chinese,,0,0,0,,按照惯例来说，就是一种好的实践，
Dialogue: 0,0:31:52.61,0:31:55.63,english,,0,0,0,,I'll return 1 or, really, any value other than 0.
Dialogue: 0,0:31:52.61,0:31:55.63,chinese,,0,0,0,,我会返回一个非 0 值。
Dialogue: 0,0:31:55.63,0:31:57.13,english,,0,0,0,,0, recall, means success.
Dialogue: 0,0:31:55.63,0:31:57.13,chinese,,0,0,0,,0 表示成功。
Dialogue: 0,0:31:57.13,0:32:02.69,english,,0,0,0,,And any other integer tends to mean error of some sort, irrespective of the number I'm looking for.
Dialogue: 0,0:31:57.13,0:32:02.69,chinese,,0,0,0,,如果非 0 就代表哪里出错了，没找到我想要的数字。
Dialogue: 0,0:32:02.69,0:32:06.67,english,,0,0,0,,So just to revisit, the only thing that's new here is the syntax.
Dialogue: 0,0:32:02.69,0:32:06.67,chinese,,0,0,0,,再来回顾一下，这里唯一的新内容就是语法。
Dialogue: 0,0:32:06.67,0:32:09.98,english,,0,0,0,,We're creating an array of seven numbers, these numbers.
Dialogue: 0,0:32:06.67,0:32:09.98,chinese,,0,0,0,,我们创建了一个数组，包含这些数字，有 7 个。
Dialogue: 0,0:32:09.98,0:32:16.09,english,,0,0,0,,And then after that we have really highlighted here an implementation of linear search.
Dialogue: 0,0:32:09.98,0:32:16.09,chinese,,0,0,0,,然后框起来的这部分是线性查找的实现。
Dialogue: 0,0:32:16.09,0:32:22.54,english,,0,0,0,,I mean this is the C version, I daresay, of what Stephanie did on the board, whereas now the array is called numbers instead of doors.
Dialogue: 0,0:32:16.09,0:32:22.54,chinese,,0,0,0,,当时的伪代码就是这样的，只是转成了 C 语言版本，数组名从 doors 改成了 numbers。
Dialogue: 0,0:32:22.54,0:32:25.46,english,,0,0,0,,But I think it's pretty much the same.
Dialogue: 0,0:32:22.54,0:32:25.46,chinese,,0,0,0,,我觉得基本没啥变化的。
Dialogue: 0,0:32:25.46,0:32:30.38,english,,0,0,0,,Let me go ahead and open my terminal window and run make search.
Dialogue: 0,0:32:25.46,0:32:30.38,chinese,,0,0,0,,打开终端窗口，运行 make search。
Dialogue: 0,0:32:30.38,0:32:32.51,english,,0,0,0,,Seems to compile, ./search.
Dialogue: 0,0:32:30.38,0:32:32.51,chinese,,0,0,0,,似乎编译好了，./search。
Dialogue: 0,0:32:32.51,0:32:34.31,english,,0,0,0,,And let's go ahead and search for a number.
Dialogue: 0,0:32:32.51,0:32:34.31,chinese,,0,0,0,,让我们来查找一个数字。
Dialogue: 0,0:32:34.31,0:32:36.23,english,,0,0,0,,We'll start with what we did before, 50.
Dialogue: 0,0:32:34.31,0:32:36.23,chinese,,0,0,0,,就之前的 50 吧。
Dialogue: 0,0:32:36.23,0:32:37.34,english,,0,0,0,,And it's found.
Dialogue: 0,0:32:36.23,0:32:37.34,chinese,,0,0,0,,找到了。
Dialogue: 0,0:32:37.34,0:32:39.77,english,,0,0,0,,Let's go ahead and run it again, ./search.
Dialogue: 0,0:32:37.34,0:32:39.77,chinese,,0,0,0,,再运行一次。
Dialogue: 0,0:32:39.77,0:32:42.50,english,,0,0,0,,Let's search for maybe 20 at the beginning.
Dialogue: 0,0:32:39.77,0:32:42.50,chinese,,0,0,0,,查找一下 20 吧。
Dialogue: 0,0:32:42.50,0:32:43.67,english,,0,0,0,,That one, too, is found.
Dialogue: 0,0:32:42.50,0:32:43.67,chinese,,0,0,0,,这个也找到了。
Dialogue: 0,0:32:43.67,0:32:50.72,english,,0,0,0,,Let's run it one more time searching for like 1,000, which is not among the denominations.
Dialogue: 0,0:32:43.67,0:32:50.72,chinese,,0,0,0,,再找一次，比如 1000，这个没有在里面。
Dialogue: 0,0:32:50.72,0:32:52.98,english,,0,0,0,,And that one, indeed, is not found.
Dialogue: 0,0:32:50.72,0:32:52.98,chinese,,0,0,0,,确实没有找到。
Dialogue: 0,0:32:52.98,0:32:59.30,english,,0,0,0,,So we've taken an idea from Week 0, now formalized in Week 3, and just translated it now to code.
Dialogue: 0,0:32:52.98,0:32:59.30,chinese,,0,0,0,,所以呢，第 0 周的想法在第 3 周的今天规范化了，转化成 C 语言代码。
Dialogue: 0,0:32:59.30,0:33:05.50,english,,0,0,0,,Questions on this implementation of linear search?
Dialogue: 0,0:32:59.30,0:33:05.50,chinese,,0,0,0,,对于线性查找的实现，大家有问题吗？
Dialogue: 0,0:33:05.50,0:33:07.57,english,,0,0,0,,Linear search.
Dialogue: 0,0:33:05.50,0:33:07.57,chinese,,0,0,0,,线性查找。
Dialogue: 0,0:33:07.57,0:33:08.68,english,,0,0,0,,Nothing.
Dialogue: 0,0:33:08.68,0:33:11.81,english,,0,0,0,,Oh, so successful so far today.
Dialogue: 0,0:33:08.68,0:33:11.81,chinese,,0,0,0,,今天的课直到现在一直很成功啊。
Dialogue: 0,0:33:11.81,0:33:19.27,english,,0,0,0,,So let's see if we can't maybe make this a little more interesting and see if we can't trip over a detail that's going to be important in C.
Dialogue: 0,0:33:11.81,0:33:19.27,chinese,,0,0,0,,我们再来点有意思的，以此引出 C 语言里一个很重要的细节。
Dialogue: 0,0:33:19.27,0:33:23.33,english,,0,0,0,,And instead of doing numbers, let me go ahead and do this.
Dialogue: 0,0:33:19.27,0:33:23.33,chinese,,0,0,0,,现在不要 numbers 了，改成这样。
Dialogue: 0,0:33:23.33,0:33:25.03,english,,0,0,0,,We'll stay on theme with Monopoly.
Dialogue: 0,0:33:23.33,0:33:25.03,chinese,,0,0,0,,我们还是以大富翁为主题吧。
Dialogue: 0,0:33:25.03,0:33:27.73,english,,0,0,0,,And I went down the rabbit hole of reading the Wikipedia article on Monopoly.
Dialogue: 0,0:33:25.03,0:33:27.73,chinese,,0,0,0,,我深入阅读了大富翁的维基百科文章。
Dialogue: 0,0:33:27.73,0:33:33.74,english,,0,0,0,,And the original pieces or tokens that came with Monopoly-- and it turns out we can represent those with strings.
Dialogue: 0,0:33:27.73,0:33:33.74,chinese,,0,0,0,,大富翁游戏里面，有棋子和代币，我们可以用字符串来表示。
Dialogue: 0,0:33:33.74,0:33:39.17,english,,0,0,0,,So I'm going to create an array called strings, plural, of whatever size I defined here.
Dialogue: 0,0:33:33.74,0:33:39.17,chinese,,0,0,0,,所以我要创建一个数组 strings，大小定义在这里。
Dialogue: 0,0:33:39.17,0:33:54.70,english,,0,0,0,,And the very first monopoly pieces back in the day were a battleship that you could play with, a boot, a cannon, an iron, a thimble, and a top hat, some of which you might from the game nowadays.
Dialogue: 0,0:33:39.17,0:33:54.70,chinese,,0,0,0,,而最早的大富翁棋子包括了一艘战舰、一只靴子、一门大炮、一把熨斗、一只顶针和一顶高帽，\N有一些传袭到了现在的游戏里面。
Dialogue: 0,0:33:54.70,0:33:57.89,english,,0,0,0,,Turns out they've been changing these-- had no idea-- over the years.
Dialogue: 0,0:33:54.70,0:33:57.89,chinese,,0,0,0,,其实这些棋子多年来一直在变化，我之前不知道。
Dialogue: 0,0:33:57.89,0:34:00.17,english,,0,0,0,,So here is, now, an array of strings.
Dialogue: 0,0:33:57.89,0:34:00.17,chinese,,0,0,0,,所以这是一个字符串数组。
Dialogue: 0,0:34:00.17,0:34:03.94,english,,0,0,0,,Let me go ahead and prompt the user now not for an integer anymore.
Dialogue: 0,0:34:00.17,0:34:03.94,chinese,,0,0,0,,现在要提示用户，现在不是输入一个整数了。
Dialogue: 0,0:34:03.94,0:34:07.97,english,,0,0,0,,I want to now search for one of these strings still using linear search.
Dialogue: 0,0:34:03.94,0:34:07.97,chinese,,0,0,0,,我现在想搜索里面的一个字符串，仍然采用线性查找。
Dialogue: 0,0:34:07.97,0:34:13.84,english,,0,0,0,,So let me create a string s, set it equal to get_string, prompt the user for a string to search for.
Dialogue: 0,0:34:07.97,0:34:13.84,chinese,,0,0,0,,【口述代码】
Dialogue: 0,0:34:13.84,0:34:19.54,english,,0,0,0,,And then I think my code here is almost the same, except for one detail.
Dialogue: 0,0:34:13.84,0:34:19.54,chinese,,0,0,0,,我想这里的代码几乎不用变，除了一个细节。
Dialogue: 0,0:34:19.54,0:34:21.85,english,,0,0,0,,I now have an array called strings.
Dialogue: 0,0:34:19.54,0:34:21.85,chinese,,0,0,0,,现在我有一个字符串数组 strings。
Dialogue: 0,0:34:21.85,0:34:24.04,english,,0,0,0,,I now have a variable called s.
Dialogue: 0,0:34:21.85,0:34:24.04,chinese,,0,0,0,,有一个变量 s。
Dialogue: 0,0:34:24.04,0:34:31.03,english,,0,0,0,,But it turns out, for reasons we'll explore in more detail next week, this line of code is not going to work.
Dialogue: 0,0:34:24.04,0:34:31.03,chinese,,0,0,0,,但事实证明，这行代码是有问题的，详细的原因我们下周再探讨。
Dialogue: 0,0:34:31.03,0:34:36.88,english,,0,0,0,,And it turns out the reason has to do with what we discussed last week of what a string really is.
Dialogue: 0,0:34:31.03,0:34:36.88,chinese,,0,0,0,,原因跟我们上周讨论的 "字符串到底是什么" 有关。
Dialogue: 0,0:34:36.88,0:34:39.35,english,,0,0,0,,And what is a string, again?
Dialogue: 0,0:34:36.88,0:34:39.35,chinese,,0,0,0,,什么是字符串？
Dialogue: 0,0:34:39.35,0:34:41.00,english,,0,0,0,,A string is an array.
Dialogue: 0,0:34:39.35,0:34:41.00,chinese,,0,0,0,,字符串是一个数组。
Dialogue: 0,0:34:41.00,0:34:51.94,english,,0,0,0,,And it turns out, though, that equals equals is not going to generously compare all of the characters in an array for you just because you use equal equals.
Dialogue: 0,0:34:41.00,0:34:51.94,chinese,,0,0,0,,但事实证明，并不是你使用了 ==，C 语言就会慷慨地帮你比较数组里的所有字符。
Dialogue: 0,0:34:51.94,0:34:54.65,english,,0,0,0,,It turns out it's not going to compare every letter.
Dialogue: 0,0:34:51.94,0:34:54.65,chinese,,0,0,0,,真实情况，它不会逐个字符地进行比较。
Dialogue: 0,0:34:54.65,0:35:03.05,english,,0,0,0,,And so thankfully, there is, in the string library that we introduced last week, a solution to this problem.
Dialogue: 0,0:34:54.65,0:35:03.05,chinese,,0,0,0,,还好我们上周介绍了字符串库 string.h，里面有一个解决方案。
Dialogue: 0,0:35:03.05,0:35:05.85,english,,0,0,0,,The reason for the problem, we'll explore in more detail next week.
Dialogue: 0,0:35:03.05,0:35:05.85,chinese,,0,0,0,,问题的原因，我们留待下周更详细地探讨。
Dialogue: 0,0:35:05.85,0:35:15.68,english,,0,0,0,,But for now, just know that when you want to compare strings in C-- especially if you've come into the class knowing a bit of Java or Python or some other language-- you cannot use equals equals.
Dialogue: 0,0:35:05.85,0:35:15.68,chinese,,0,0,0,,现在大家只需知道，在 C 语言里当你想要比较两个字符串的时候，不能使用 ==。\N 要是你之前了解了一些 Java、Python 或其他语言，可能就心领神会了。
Dialogue: 0,0:35:15.68,0:35:18.50,english,,0,0,0,,Even though you could in Scratch, you cannot in C.
Dialogue: 0,0:35:15.68,0:35:18.50,chinese,,0,0,0,,在 Scratch 可以，C 语言里却不行。
Dialogue: 0,0:35:18.50,0:35:21.62,english,,0,0,0,,So what I have to actually do here is this.
Dialogue: 0,0:35:18.50,0:35:21.62,chinese,,0,0,0,,所以我必须得写成这样。
Dialogue: 0,0:35:21.62,0:35:36.05,english,,0,0,0,,I have to ask the question, does the return value of a function called str compare, or strcomp, equal 0 when passed in the current string and that's user input?
Dialogue: 0,0:35:21.62,0:35:36.05,chinese,,0,0,0,,【口述代码】
Dialogue: 0,0:35:36.05,0:35:44.50,english,,0,0,0,,So if you read the documentation for this function called str compare, you'll see that it takes two strings as input, first one and second one.
Dialogue: 0,0:35:36.05,0:35:44.50,chinese,,0,0,0,,\N如果你读了 strcmp 这个函数的文档，就知道它的输入是两个字符串，第一个和第二个。
Dialogue: 0,0:35:44.50,0:35:51.91,english,,0,0,0,,It then-- someone decades ago wrote the code that probably uses a for loop or a while loop to compare every character in each of those strings.
Dialogue: 0,0:35:44.50,0:35:51.91,chinese,,0,0,0,,在几十年前，有位程序员可能用了 for 循环或 while 循环，\N来逐位比较这两个字符串里的每一个字符，实现了这个函数。
Dialogue: 0,0:35:51.91,0:35:56.29,english,,0,0,0,,And it turns out it returns 0 if they are, in fact, equal.
Dialogue: 0,0:35:51.91,0:35:56.29,chinese,,0,0,0,,结果要是它们实际上相等，就返回 0。
Dialogue: 0,0:35:56.29,0:36:02.44,english,,0,0,0,,Turns out, too, it will return a positive number or a negative number in other situations.
Dialogue: 0,0:35:56.29,0:36:02.44,chinese,,0,0,0,,而在其他情况下，这个函数会返回一个正数或一个负数。
Dialogue: 0,0:36:02.44,0:36:10.81,english,,0,0,0,,Any intuition for why it might actually be useful to have a function that allows you to check if two strings are equal?
Dialogue: 0,0:36:02.44,0:36:10.81,chinese,,0,0,0,,有没有直觉告诉我们，为什么这个检查两个字符串是否相等的函数，会很有用？
Dialogue: 0,0:36:10.81,0:36:14.83,english,,0,0,0,,If they're not equal, what else might be interesting to know when comparing two strings?
Dialogue: 0,0:36:10.81,0:36:14.83,chinese,,0,0,0,,如果它们不相等，那么通过比较两个字符串，还能获取什么有用的信息？
Dialogue: 0,0:36:18.47,0:36:19.39,english,,0,0,0,,If certain values are?
Dialogue: 0,0:36:18.47,0:36:19.39,chinese,,0,0,0,,如果某些值是...
Dialogue: 0,0:36:19.39,0:36:23.34,english,,0,0,0,,STUDENT: [INAUDIBLE]
Dialogue: 0,0:36:23.34,0:36:24.43,english,,0,0,0,,DAVID MALAN: OK, possibly.
Dialogue: 0,0:36:23.34,0:36:24.43,chinese,,0,0,0,,好吧，有可能。
Dialogue: 0,0:36:24.43,0:36:26.95,english,,0,0,0,,Maybe you want to just how similar they are.
Dialogue: 0,0:36:24.43,0:36:26.95,chinese,,0,0,0,,也许你想知道它们有多相似。
Dialogue: 0,0:36:26.95,0:36:28.81,english,,0,0,0,,And that's indeed an algorithm unto itself.
Dialogue: 0,0:36:26.95,0:36:28.81,chinese,,0,0,0,,这本身就是一种算法。
Dialogue: 0,0:36:28.81,0:36:31.41,english,,0,0,0,,But str compare is a little simpler than that.
Dialogue: 0,0:36:28.81,0:36:31.41,chinese,,0,0,0,,但是，strcmp 要简单一些。
Dialogue: 0,0:36:31.41,0:36:33.04,english,,0,0,0,,STUDENT: [INAUDIBLE]
Dialogue: 0,0:36:31.41,0:36:33.04,chinese,,0,0,0,,学生：[听不清]
Dialogue: 0,0:36:35.85,0:36:41.95,english,,0,0,0,,DAVID MALAN: Exactly, if you're trying to alphabetize a whole list of strings, just like your phone probably is for your contacts or address book.
Dialogue: 0,0:36:35.85,0:36:41.95,chinese,,0,0,0,,没错，如果你试着对一整列字符串进行字典序排序，\N你手机里面通讯录什么的就是这么排的。
Dialogue: 0,0:36:41.95,0:36:53.80,english,,0,0,0,,It turns out that str compare will actually return a positive number or a negative number or a 0 based on whether, maybe it comes alphabetically first or later, or in fact, equal.
Dialogue: 0,0:36:41.95,0:36:53.80,chinese,,0,0,0,,其实，strcmp 会根据两个字符串的字典序先后，返回一个正数、负数或 0。
Dialogue: 0,0:36:53.80,0:36:55.13,english,,0,0,0,,So that can be a useful thing.
Dialogue: 0,0:36:53.80,0:36:55.13,chinese,,0,0,0,,所以这个可能会有用。
Dialogue: 0,0:36:55.13,0:36:58.88,english,,0,0,0,,And that's just a teaser for a lower level explanation that we'll see next week.
Dialogue: 0,0:36:55.13,0:36:58.88,chinese,,0,0,0,,这只是一个引子，下周我们会看到更低层次的解释。
Dialogue: 0,0:36:58.88,0:37:01.75,english,,0,0,0,,So now, let me cross my fingers and see if I got this right.
Dialogue: 0,0:36:58.88,0:37:01.75,chinese,,0,0,0,,现在我要祈祷祈祷，希望没搞错什么。
Dialogue: 0,0:37:01.75,0:37:05.41,english,,0,0,0,,Let me go ahead and do make search.
Dialogue: 0,0:37:01.75,0:37:05.41,chinese,,0,0,0,,make search.
Dialogue: 0,0:37:05.41,0:37:08.59,english,,0,0,0,,Did compile, albeit slowly.
Dialogue: 0,0:37:05.41,0:37:08.59,chinese,,0,0,0,,编译成功了，尽管速度慢了点。
Dialogue: 0,0:37:08.59,0:37:11.92,english,,0,0,0,,Dot slash search, and let's search for something like the thimble.
Dialogue: 0,0:37:08.59,0:37:11.92,chinese,,0,0,0,,./search，来搜索点东西。
Dialogue: 0,0:37:11.92,0:37:14.04,english,,0,0,0,,And we see that that's, indeed, found.
Dialogue: 0,0:37:11.92,0:37:14.04,chinese,,0,0,0,,你们看，确实找着了。
Dialogue: 0,0:37:14.04,0:37:19.06,english,,0,0,0,,Otherwise, let's search for something that I know isn't there, like a race car, which was there when I grew up.
Dialogue: 0,0:37:14.04,0:37:19.06,chinese,,0,0,0,,我们再来搜点不存在的，比如陪伴我长大的赛车。
Dialogue: 0,0:37:19.06,0:37:23.22,english,,0,0,0,,But huh, segmentation fault, core dumped.
Dialogue: 0,0:37:19.06,0:37:23.22,chinese,,0,0,0,,但是，啊，段错误，核心转储。
Dialogue: 0,0:37:23.22,0:37:25.81,english,,0,0,0,,And actually, some of you have tripped over this error before.
Dialogue: 0,0:37:23.22,0:37:25.81,chinese,,0,0,0,,实际上，你们有人可能之前遇到过这个错误了。
Dialogue: 0,0:37:25.81,0:37:27.22,english,,0,0,0,,Anyone want to admit seeing this?
Dialogue: 0,0:37:25.81,0:37:27.22,chinese,,0,0,0,,有没有人愿意承认一下？
Dialogue: 0,0:37:27.22,0:37:32.17,english,,0,0,0,,So yeah, not something we've talked about, and honestly, not something I intended just now.
Dialogue: 0,0:37:27.22,0:37:32.17,chinese,,0,0,0,,所以，是的，我们还没有讨论过这个话题，说实话，我今天没打算讲。
Dialogue: 0,0:37:32.17,0:37:34.45,english,,0,0,0,,But that too, we'll see next week.
Dialogue: 0,0:37:32.17,0:37:34.45,chinese,,0,0,0,,不过，下周一切都会揭晓。
Dialogue: 0,0:37:34.45,0:37:39.92,english,,0,0,0,,Any intuition for why my program just broke.
Dialogue: 0,0:37:34.45,0:37:39.92,chinese,,0,0,0,,我的程序为什么会崩溃？
Dialogue: 0,0:37:39.92,0:37:41.90,english,,0,0,0,,I didn't really change the logic.
Dialogue: 0,0:37:39.92,0:37:41.90,chinese,,0,0,0,,我没有改变程序逻辑啊。
Dialogue: 0,0:37:41.90,0:37:43.55,english,,0,0,0,,It's still linear search.
Dialogue: 0,0:37:41.90,0:37:43.55,chinese,,0,0,0,,还是那个线性查找。
Dialogue: 0,0:37:43.55,0:37:46.28,english,,0,0,0,,Let me hide the terminal so you can see all of the code at once.
Dialogue: 0,0:37:43.55,0:37:46.28,chinese,,0,0,0,,我来把终端隐藏起来，一次性展示所有代码。
Dialogue: 0,0:37:46.28,0:37:49.85,english,,0,0,0,,The only thing I did was switched from integers to strings.
Dialogue: 0,0:37:46.28,0:37:49.85,chinese,,0,0,0,,我只做了一件事情，把 int 换成 string。
Dialogue: 0,0:37:49.85,0:37:52.31,english,,0,0,0,,And I switched to str compare here.
Dialogue: 0,0:37:49.85,0:37:52.31,chinese,,0,0,0,,在这里，改用 strlen 了。
Dialogue: 0,0:37:52.31,0:37:54.20,english,,0,0,0,,But segmentation fault happened.
Dialogue: 0,0:37:52.31,0:37:54.20,chinese,,0,0,0,,结果发生了段错误。
Dialogue: 0,0:37:54.20,0:37:57.08,english,,0,0,0,,And the teaser is that that somehow relates to the computer's memory.
Dialogue: 0,0:37:54.20,0:37:57.08,chinese,,0,0,0,,我来预告一下，这跟计算机内存有某种联系。
Dialogue: 0,0:37:57.08,0:37:57.99,english,,0,0,0,,Yeah.
Dialogue: 0,0:37:57.99,0:38:00.69,english,,0,0,0,,STUDENT: [INAUDIBLE]
Dialogue: 0,0:37:57.99,0:38:00.69,chinese,,0,0,0,,学生：[听不清]
Dialogue: 0,0:38:01.47,0:38:03.67,english,,0,0,0,,DAVID MALAN: Yeah, and this is subtle, but spot on.
Dialogue: 0,0:38:01.47,0:38:03.67,chinese,,0,0,0,,没错诶，这有点不容易察觉，不过完全正确。
Dialogue: 0,0:38:03.67,0:38:12.81,english,,0,0,0,,So one, two, three, four, five, six elements total in this array, versus the seven numbers of monopoly denominations that we had earlier.
Dialogue: 0,0:38:03.67,0:38:12.81,chinese,,0,0,0,,你看这个数组，一共有 6 个元素，而我们之前有 7 个柜子。
Dialogue: 0,0:38:12.81,0:38:13.88,english,,0,0,0,,And this is where, see?
Dialogue: 0,0:38:12.81,0:38:13.88,chinese,,0,0,0,,就在这里，看到了吗？
Dialogue: 0,0:38:13.88,0:38:15.93,english,,0,0,0,,Sort of case in point, this came back to bite me.
Dialogue: 0,0:38:13.88,0:38:15.93,chinese,,0,0,0,,这就是一个典型的例子，它反过来咬了我一口。
Dialogue: 0,0:38:15.93,0:38:26.61,english,,0,0,0,,The fact that I hardcoded this value as opposed to maybe separating it out as a constant or declaring it higher up, kind of bit me here, because now, I'm iterating over an array of size 6.
Dialogue: 0,0:38:15.93,0:38:26.61,chinese,,0,0,0,,我刚才硬编码了这个值，没有写成一个常量抽象出来，在前面的位置进行声明，\N结果被摆了一道，因为现在遍历的数组长度是 6。
Dialogue: 0,0:38:26.61,0:38:32.25,english,,0,0,0,,But clearly, I'm going one step too far, because I'm literally going to iterate seven times, not six.
Dialogue: 0,0:38:26.61,0:38:32.25,chinese,,0,0,0,,很明显，这里没刹住车，迭代了 7 次，而不是 6 次。
Dialogue: 0,0:38:32.25,0:38:35.58,english,,0,0,0,,So it's as though I'm looking at memory that's over here.
Dialogue: 0,0:38:32.25,0:38:35.58,chinese,,0,0,0,,因此我用到了不属于数组的后面的内存。
Dialogue: 0,0:38:35.58,0:38:37.53,english,,0,0,0,,And indeed, next week, we'll focus on memory.
Dialogue: 0,0:38:35.58,0:38:37.53,chinese,,0,0,0,,下周我们会重点讨论内存的一些话题。
Dialogue: 0,0:38:37.53,0:38:38.86,english,,0,0,0,,And that's just a bad thing.
Dialogue: 0,0:38:37.53,0:38:38.86,chinese,,0,0,0,,这种事情就很糟糕。
Dialogue: 0,0:38:38.86,0:38:47.28,english,,0,0,0,,So odds are, not even seeing your code from this past week, if any of you have had segmentation faults, odds are, you touched memory that you shouldn't have.
Dialogue: 0,0:38:38.86,0:38:47.28,chinese,,0,0,0,,其实，我都不用看到具体的代码，如果你们出现过 segment fault（段错误）什么的，\N大概率就是访问了不该操作的内存。
Dialogue: 0,0:38:47.28,0:38:49.29,english,,0,0,0,,You maybe looped too many times.
Dialogue: 0,0:38:47.28,0:38:49.29,chinese,,0,0,0,,可能是你循环的次数太多了。
Dialogue: 0,0:38:49.29,0:38:52.77,english,,0,0,0,,You might have used a negative number to get into your array.
Dialogue: 0,0:38:49.29,0:38:52.77,chinese,,0,0,0,,可能是你用了负数的下标来访问数组。
Dialogue: 0,0:38:52.77,0:38:55.22,english,,0,0,0,,In general, you touched memory that you shouldn't have.
Dialogue: 0,0:38:52.77,0:38:55.22,chinese,,0,0,0,,总而言之，你访问了不该操作的内存。
Dialogue: 0,0:38:55.22,0:38:57.72,english,,0,0,0,,And you touched a segment of memory that you shouldn't have.
Dialogue: 0,0:38:55.22,0:38:57.72,chinese,,0,0,0,,访问了不该访问的内存段。
Dialogue: 0,0:38:57.72,0:39:00.06,english,,0,0,0,,The fix, though, at least in my case, is simple.
Dialogue: 0,0:38:57.72,0:39:00.06,chinese,,0,0,0,,不过，至少在这里，解决方法很简单。
Dialogue: 0,0:39:00.06,0:39:01.30,english,,0,0,0,,Just don't do that.
Dialogue: 0,0:39:00.06,0:39:01.30,chinese,,0,0,0,,不要这么做就行了。
Dialogue: 0,0:39:01.30,0:39:03.21,english,,0,0,0,,So let me go ahead and recompile this.
Dialogue: 0,0:39:01.30,0:39:03.21,chinese,,0,0,0,,我继续重新编译。
Dialogue: 0,0:39:03.21,0:39:06.87,english,,0,0,0,,Make search dot slash search.
Dialogue: 0,0:39:03.21,0:39:06.87,chinese,,0,0,0,,来走流程。
Dialogue: 0,0:39:06.87,0:39:10.32,english,,0,0,0,,And I'll search again for race car, Enter.
Dialogue: 0,0:39:06.87,0:39:10.32,chinese,,0,0,0,,我还是想要搜索一下 race car。
Dialogue: 0,0:39:10.32,0:39:11.85,english,,0,0,0,,And now it does not crash.
Dialogue: 0,0:39:10.32,0:39:11.85,chinese,,0,0,0,,现在它不会崩溃了。
Dialogue: 0,0:39:11.85,0:39:13.63,english,,0,0,0,,But it does tell me it's not found.
Dialogue: 0,0:39:11.85,0:39:13.63,chinese,,0,0,0,,它确切地告诉我没有找到。
Dialogue: 0,0:39:13.63,0:39:17.04,english,,0,0,0,,So subtle, but something you might yourself have tripped over already.
Dialogue: 0,0:39:13.63,0:39:17.04,chinese,,0,0,0,,就这么一个细节的问题，你自己写的话可能会被卡住 。
Dialogue: 0,0:39:17.04,0:39:23.19,english,,0,0,0,,Questions then, on what I just did, intentionally or otherwise.
Dialogue: 0,0:39:17.04,0:39:23.19,chinese,,0,0,0,,那么，对于我刚才有意无意写下的程序，请你们提出问题吧。
Dialogue: 0,0:39:23.19,0:39:24.42,english,,0,0,0,,Yeah, in front.
Dialogue: 0,0:39:23.19,0:39:24.42,chinese,,0,0,0,,好，前面这位。
Dialogue: 0,0:39:24.42,0:39:31.27,english,,0,0,0,,STUDENT: One thing is the program still works if you do return-- if you don't do return 0, return 1.
Dialogue: 0,0:39:24.42,0:39:31.27,chinese,,0,0,0,,有一点是，如果你不 return 0、return 1 什么的，程序还是可以运行啊。
Dialogue: 0,0:39:31.27,0:39:33.22,english,,0,0,0,,So what is the purpose of doing [INAUDIBLE]??
Dialogue: 0,0:39:31.27,0:39:33.22,chinese,,0,0,0,,那这样做的目的是什么呢？
Dialogue: 0,0:39:33.22,0:39:34.72,english,,0,0,0,,DAVID MALAN: A really good question.
Dialogue: 0,0:39:33.22,0:39:34.72,chinese,,0,0,0,,这个问题太好了。
Dialogue: 0,0:39:34.72,0:39:38.92,english,,0,0,0,,So the program will still work even if I don't return 0 or return 1.
Dialogue: 0,0:39:34.72,0:39:38.92,chinese,,0,0,0,,他说，即使我不 return 0 或 return 1，程序还是能够运行。
Dialogue: 0,0:39:38.92,0:39:43.93,english,,0,0,0,,In fact, let me go ahead and do that and just hide my terminal window for a second.
Dialogue: 0,0:39:38.92,0:39:43.93,chinese,,0,0,0,,我先来把终端窗口隐藏起来。
Dialogue: 0,0:39:43.93,0:39:48.04,english,,0,0,0,,Let's get rid of the return here.
Dialogue: 0,0:39:43.93,0:39:48.04,chinese,,0,0,0,,把这里的 return 全都删掉。
Dialogue: 0,0:39:48.04,0:39:50.81,english,,0,0,0,,However, watch what happens here.
Dialogue: 0,0:39:48.04,0:39:50.81,chinese,,0,0,0,,然而，请看这里会发生什么。
Dialogue: 0,0:39:50.81,0:39:53.71,english,,0,0,0,,Let me go ahead and recompile this, make search.
Dialogue: 0,0:39:50.81,0:39:53.71,chinese,,0,0,0,,走个编译流程。
Dialogue: 0,0:39:53.71,0:39:55.61,english,,0,0,0,,Let me scroll up in my code here.
Dialogue: 0,0:39:53.71,0:39:55.61,chinese,,0,0,0,,把代码滚到下面来。
Dialogue: 0,0:39:55.61,0:39:57.56,english,,0,0,0,,Let me go ahead and do dot slash search.
Dialogue: 0,0:39:55.61,0:39:57.56,chinese,,0,0,0,,执行以下。
Dialogue: 0,0:39:57.56,0:40:02.80,english,,0,0,0,,And let me go ahead and search for the first thing in the list, battle ship, so I know that this should be found.
Dialogue: 0,0:39:57.56,0:40:02.80,chinese,,0,0,0,,我现在要搜索列表里第一个，battle ship，应该会找到。
Dialogue: 0,0:40:02.80,0:40:04.69,english,,0,0,0,,I hit Enter.
Dialogue: 0,0:40:02.80,0:40:04.69,chinese,,0,0,0,,按下回车。
Dialogue: 0,0:40:04.69,0:40:05.85,english,,0,0,0,,Huh, interesting.
Dialogue: 0,0:40:04.69,0:40:05.85,chinese,,0,0,0,,嗯，有意思。
Dialogue: 0,0:40:05.85,0:40:07.15,english,,0,0,0,,So it's saying found not found.
Dialogue: 0,0:40:05.85,0:40:07.15,chinese,,0,0,0,,结果它没找着。
Dialogue: 0,0:40:07.15,0:40:11.49,english,,0,0,0,,But do you see why, logically, in this case?
Dialogue: 0,0:40:07.15,0:40:11.49,chinese,,0,0,0,,但是，从逻辑上讲，这种情况你知道为啥吗？
Dialogue: 0,0:40:11.49,0:40:12.98,english,,0,0,0,,STUDENT: Is the loop still running?
Dialogue: 0,0:40:11.49,0:40:12.98,chinese,,0,0,0,,循环还在运行吗？
Dialogue: 0,0:40:12.98,0:40:13.91,english,,0,0,0,,DAVID MALAN: Exactly.
Dialogue: 0,0:40:12.98,0:40:13.91,chinese,,0,0,0,,没错。
Dialogue: 0,0:40:13.91,0:40:15.30,english,,0,0,0,,So the loop is still running.
Dialogue: 0,0:40:13.91,0:40:15.30,chinese,,0,0,0,,是因为循环还在运行。
Dialogue: 0,0:40:15.30,0:40:17.01,english,,0,0,0,,So there's a couple of solutions to this.
Dialogue: 0,0:40:15.30,0:40:17.01,chinese,,0,0,0,,所以这个问题有几种解决方案。
Dialogue: 0,0:40:17.01,0:40:21.08,english,,0,0,0,,I could, for instance, somehow break out of the code here.
Dialogue: 0,0:40:17.01,0:40:21.08,chinese,,0,0,0,,比如说，我可以用 break，跳出这里的循环。
Dialogue: 0,0:40:17.01,0:40:21.08,annotation,,0,0,0,,*注：这个知识点前面没有提到过，可以用 break 跳出 for、while 循环。
Dialogue: 0,0:40:21.08,0:40:24.20,english,,0,0,0,,But that's going to still result in line 18 executing.
Dialogue: 0,0:40:21.08,0:40:24.20,chinese,,0,0,0,,第 18 行还是要执行的。
Dialogue: 0,0:40:24.20,0:40:26.60,english,,0,0,0,,I could then instead just return here.
Dialogue: 0,0:40:24.20,0:40:26.60,chinese,,0,0,0,,在这里 return 0 也是可以的。
Dialogue: 0,0:40:26.60,0:40:29.39,english,,0,0,0,,I don't strictly need to return 1 down at the bottom.
Dialogue: 0,0:40:26.60,0:40:29.39,chinese,,0,0,0,,严格来说，在底部 return 1 不是必须的。
Dialogue: 0,0:40:29.39,0:40:39.30,english,,0,0,0,,But I made this claim last week that it tends to be helpful as your programs get more sophisticated, to at least signify, just like a real world programmer, error codes when something goes wrong.
Dialogue: 0,0:40:29.39,0:40:39.30,chinese,,0,0,0,,但我上周说过，当你的程序越来越复杂时，\N就要学着像工业环境里面的程序员一样，在出错时给出错误代码，这往往会有所帮助。
Dialogue: 0,0:40:39.30,0:40:44.09,english,,0,0,0,,So returning 0 in main is the easiest way to signify my code is done.
Dialogue: 0,0:40:39.30,0:40:44.09,chinese,,0,0,0,,因此，main 里返回 0 是表示程序执行完成的最简单方法。
Dialogue: 0,0:40:44.09,0:40:46.34,english,,0,0,0,,I'm ready to exit successfully, that's it.
Dialogue: 0,0:40:44.09,0:40:46.34,chinese,,0,0,0,,我已经准备好成功退出了，就这样。
Dialogue: 0,0:40:46.34,0:40:50.28,english,,0,0,0,,But down here, I could absolutely still return 0, because that's not a huge deal.
Dialogue: 0,0:40:46.34,0:40:50.28,chinese,,0,0,0,,但在这里，return 0 也是绝对可以的，不是啥大问题。
Dialogue: 0,0:40:50.28,0:40:55.20,english,,0,0,0,,It's not really an error that deserves annoying the user with some kind of pop up that something went wrong.
Dialogue: 0,0:40:50.28,0:40:55.20,chinese,,0,0,0,,这并不是一个真正的错误，不值得弹出一个窗口来提醒用户出了问题。
Dialogue: 0,0:40:55.20,0:41:00.33,english,,0,0,0,,But return 1 is just a lower level way of signaling, eh, it didn't really find what I was looking for.
Dialogue: 0,0:40:55.20,0:41:00.33,chinese,,0,0,0,,但 return 1 只是一种低层次的信号，表示 "嗯，它并没有找到我想要的东西"。
Dialogue: 0,0:41:00.33,0:41:03.51,english,,0,0,0,,And remember from last week, you can see this as follows.
Dialogue: 0,0:41:00.33,0:41:03.51,chinese,,0,0,0,,还记得上周的内容吗？
Dialogue: 0,0:41:03.51,0:41:08.06,english,,0,0,0,,If I recompile this again, now that I've reverted those changes, so make search.
Dialogue: 0,0:41:03.51,0:41:08.06,chinese,,0,0,0,,重新编译一下，现在我已经改回去了，make search。
Dialogue: 0,0:41:08.06,0:41:19.79,english,,0,0,0,,And if I do a dot slash search and search for battle ship, which is indeed found, recall I can execute this magical command, echo dollar sign question mark, which you're not going to often execute.
Dialogue: 0,0:41:08.06,0:41:19.79,chinese,,0,0,0,,./search，搜索 battle ship，确实找到了，\N就可以执行那个神奇的命令，each $?，你不会经常执行这个命令。
Dialogue: 0,0:41:19.79,0:41:22.79,english,,0,0,0,,But it shows you what main returned.
Dialogue: 0,0:41:19.79,0:41:22.79,chinese,,0,0,0,,它确实可以向你展示 main 函数的返回值。
Dialogue: 0,0:41:22.79,0:41:27.77,english,,0,0,0,,If I run search again and search for race car, which is not found,
Dialogue: 0,0:41:22.79,0:41:27.77,chinese,,0,0,0,,再次运行，搜索 race car，但找不到的，
Dialogue: 0,0:41:27.77,0:41:32.15,english,,0,0,0,,I see not found, but I can also run this command again and see that, oh, it returned 1.
Dialogue: 0,0:41:27.77,0:41:32.15,chinese,,0,0,0,,得到了 Not found，来执行 each $?，就看到它返回了 1。
Dialogue: 0,0:41:32.15,0:41:40.10,english,,0,0,0,,So now if you fast forward a few months, a few years, when you're actually writing code in a company or for larger projects, you might want to be automating software.
Dialogue: 0,0:41:32.15,0:41:40.10,chinese,,0,0,0,,所以说，如果快进到几个月几年以后，\N当你们实际在公司或大型项目中编写代码时，你可能会希望实现软件自动化。
Dialogue: 0,0:41:40.10,0:41:43.10,english,,0,0,0,,You might not want the human to necessarily be running it manually.
Dialogue: 0,0:41:40.10,0:41:43.10,chinese,,0,0,0,,不希望每次都一定要我们手动运行程序。
Dialogue: 0,0:41:43.10,0:41:48.36,english,,0,0,0,,You might want code to be automated by some nightly process or something like that.
Dialogue: 0,0:41:43.10,0:41:48.36,chinese,,0,0,0,,可能希望在每天晚上或者什么时间，代码能够自动化地执行一些任务。
Dialogue: 0,0:41:48.36,0:41:55.91,english,,0,0,0,,Using these exit codes, can a program determine yes or no that other code succeeded or failed.
Dialogue: 0,0:41:48.36,0:41:55.91,chinese,,0,0,0,,利用好这些退出代码，程序就能够确定其他代码是运行成功还是失败。
Dialogue: 0,0:41:55.91,0:42:01.85,english,,0,0,0,,Other questions on linear search in this way.
Dialogue: 0,0:41:55.91,0:42:01.85,chinese,,0,0,0,,关于线性查找，还有问题吗大家？
Dialogue: 0,0:42:01.85,0:42:02.35,english,,0,0,0,,No?
Dialogue: 0,0:42:02.35,0:42:11.59,english,,0,0,0,,All right, well, let's translate this to one other feature of C here by incorporating these two ideas now into one other program.
Dialogue: 0,0:42:02.35,0:42:11.59,chinese,,0,0,0,,好的，那我们继续这个思想，\N再加上 C 的另一个特性，把两个东西结合起来写一个程序。
Dialogue: 0,0:42:11.59,0:42:16.60,english,,0,0,0,,So I'm going to create a phone book in C by doing code space phonebook dot C.
Dialogue: 0,0:42:11.59,0:42:16.60,chinese,,0,0,0,,code phonebook.c，这样来创建一个 C 语言写的电话簿。
Dialogue: 0,0:42:16.60,0:42:23.03,english,,0,0,0,,And let's combine some of these ideas and implement this notion of searching a phonebook for an actual name and getting back a number.
Dialogue: 0,0:42:16.60,0:42:23.03,chinese,,0,0,0,,把这些想法结合起来，我们实现一个在电话簿里搜索真实姓名，返回对应的号码。
Dialogue: 0,0:42:23.03,0:42:30.86,english,,0,0,0,,So I'm going to go ahead and quickly include some of the same things, cs50.h so we can get input. standard io dot h so we can print output.
Dialogue: 0,0:42:23.03,0:42:30.86,chinese,,0,0,0,,【口述代码】
Dialogue: 0,0:42:30.86,0:42:39.01,english,,0,0,0,,And I'm going to preemptively include string.h in case we need that one as well. int main void, no need for command line arguments today.
Dialogue: 0,0:42:30.86,0:42:39.01,chinese,,0,0,0,,【口述代码】
Dialogue: 0,0:42:39.01,0:42:42.65,english,,0,0,0,,And let me give myself, now, an array of names for this phone book.
Dialogue: 0,0:42:39.01,0:42:42.65,chinese,,0,0,0,,现在，我把电话簿数组叫做 names。
Dialogue: 0,0:42:42.65,0:42:45.04,english,,0,0,0,,So string names equals.
Dialogue: 0,0:42:42.65,0:42:45.04,chinese,,0,0,0,,【口述代码】
Dialogue: 0,0:42:45.04,0:42:50.84,english,,0,0,0,,And then in curly braces, how about Carter will be one person in the phone book, and David, myself, will be the other.
Dialogue: 0,0:42:45.04,0:42:50.84,chinese,,0,0,0,,【口述代码】
Dialogue: 0,0:42:50.84,0:42:53.46,english,,0,0,0,,So we'll keep it short so we don't have to type too many names.
Dialogue: 0,0:42:50.84,0:42:53.46,chinese,,0,0,0,,所以我们一切从简，不打出那么多名字来。
Dialogue: 0,0:42:53.46,0:42:55.84,english,,0,0,0,,But this is a phone book with two people thus far.
Dialogue: 0,0:42:53.46,0:42:55.84,chinese,,0,0,0,,直到现在，电话簿上有两个人了。
Dialogue: 0,0:42:55.84,0:42:59.62,english,,0,0,0,,Suppose, now, we want to also store Carter's phone number in mind.
Dialogue: 0,0:42:55.84,0:42:59.62,chinese,,0,0,0,,要是现在我们还想存储 Carter 的电话号码。
Dialogue: 0,0:42:59.62,0:43:01.42,english,,0,0,0,,So it's not just saying found or not found.
Dialogue: 0,0:42:59.62,0:43:01.42,chinese,,0,0,0,,现在不是说找到或者没找到了。
Dialogue: 0,0:43:01.42,0:43:05.32,english,,0,0,0,,It's literally looking up our phone numbers like a proper phone book.
Dialogue: 0,0:43:01.42,0:43:05.32,chinese,,0,0,0,,要像一本正规的电话簿一样，能够查询电话号码。
Dialogue: 0,0:43:05.32,0:43:09.44,english,,0,0,0,,Well, at the moment, there's really no way to do this.
Dialogue: 0,0:43:05.32,0:43:09.44,chinese,,0,0,0,,目前的代码还不得行。
Dialogue: 0,0:43:09.44,0:43:16.51,english,,0,0,0,,I could do something hackish like I could put a number like 617-495-1000 after Carter.
Dialogue: 0,0:43:09.44,0:43:16.51,chinese,,0,0,0,,我要做点小动作，在 Carter 后面加个号码，比如 617-495-1000。
Dialogue: 0,0:43:16.51,0:43:22.46,english,,0,0,0,,I could maybe do something like 949-468-2750 after me.
Dialogue: 0,0:43:16.51,0:43:22.46,chinese,,0,0,0,,我自己名字后面加个 949-468-2750。
Dialogue: 0,0:43:22.46,0:43:25.30,english,,0,0,0,,But now you're kind of doing the whole apples and oranges thing.
Dialogue: 0,0:43:22.46,0:43:25.30,chinese,,0,0,0,,这俩玩意风马牛不相及啊。
Dialogue: 0,0:43:25.30,0:43:26.47,english,,0,0,0,,Now, it's not strings.
Dialogue: 0,0:43:25.30,0:43:26.47,chinese,,0,0,0,,这又不是字符串。
Dialogue: 0,0:43:26.47,0:43:28.42,english,,0,0,0,,It's a string int, string int.
Dialogue: 0,0:43:26.47,0:43:28.42,chinese,,0,0,0,,数组里面是：string、int、string、int。
Dialogue: 0,0:43:28.42,0:43:31.24,english,,0,0,0,,All right, so maybe I could just make all of these strings.
Dialogue: 0,0:43:28.42,0:43:31.24,chinese,,0,0,0,,好吧，要不我就把全部都变成 string。
Dialogue: 0,0:43:31.24,0:43:34.60,english,,0,0,0,,But now it's just a conceptual mixing of apples and oranges.
Dialogue: 0,0:43:31.24,0:43:34.60,chinese,,0,0,0,,从类型上把两种东西统一一下。
Dialogue: 0,0:43:34.60,0:43:36.42,english,,0,0,0,,Like yes, that's an array of four strings.
Dialogue: 0,0:43:34.60,0:43:36.42,chinese,,0,0,0,,没错，现在的数组由四个 string 组成了。
Dialogue: 0,0:43:36.42,0:43:43.10,english,,0,0,0,,But now you're on the honor system to know that the first string is a name, the second string is a number, the third string is-- you can do it.
Dialogue: 0,0:43:36.42,0:43:43.10,chinese,,0,0,0,,我们现在必须守着规矩，\N第一个 string 是名字，第二个是电话号码；第三个是名字... 你得保持下去。
Dialogue: 0,0:43:43.10,0:43:45.11,english,,0,0,0,,But it's a bit of a hack, so to speak.
Dialogue: 0,0:43:43.10,0:43:45.11,chinese,,0,0,0,,可以说，这有点太乱来了。
Dialogue: 0,0:43:45.11,0:43:47.30,english,,0,0,0,,So what might be cleaner than this?
Dialogue: 0,0:43:45.11,0:43:47.30,chinese,,0,0,0,,我们怎么做可以规范一点？
Dialogue: 0,0:43:47.30,0:43:55.48,english,,0,0,0,,Instead of combining our phone numbers into the same array as our names, what else might we do that's perhaps a little better?
Dialogue: 0,0:43:47.30,0:43:55.48,chinese,,0,0,0,,不要把电话号码和姓名合并到同一个数组里面，我们能不能更加优雅一点？
Dialogue: 0,0:43:55.48,0:43:56.44,english,,0,0,0,,Say it little louder.
Dialogue: 0,0:43:55.48,0:43:56.44,chinese,,0,0,0,,大声点说出来。
Dialogue: 0,0:43:58.96,0:44:01.19,english,,0,0,0,,A 2D array, possibly something we could do.
Dialogue: 0,0:43:58.96,0:44:01.19,chinese,,0,0,0,,二维数组，可能是个解决办法。
Dialogue: 0,0:44:01.19,0:44:07.82,english,,0,0,0,,I'm going to keep it even simpler now, because we haven't used those by name, even though that is, we saw last week, technically what argv is.
Dialogue: 0,0:44:01.19,0:44:07.82,chinese,,0,0,0,,我们先简单点，不把所有都塞进 names 数组里面，其实从技术实现上，argv 就是这么做的。
Dialogue: 0,0:44:01.19,0:44:07.82,annotation,,0,0,0,,*注：是指 argv 把所有的参数都当作一整个 string 数组，不分什么 int。
Dialogue: 0,0:44:07.82,0:44:10.24,english,,0,0,0,,What else could I do if I want to store names and numbers?
Dialogue: 0,0:44:07.82,0:44:10.24,chinese,,0,0,0,,如果我想存储名字和数字，还能怎么做？
Dialogue: 0,0:44:10.24,0:44:11.14,english,,0,0,0,,Yeah.
Dialogue: 0,0:44:11.14,0:44:12.22,english,,0,0,0,,STUDENT: [INAUDIBLE]
Dialogue: 0,0:44:12.22,0:44:13.69,english,,0,0,0,,DAVID MALAN: Yeah, let me go with this suggestion.
Dialogue: 0,0:44:12.22,0:44:13.69,chinese,,0,0,0,,我非常认可这个建议。
Dialogue: 0,0:44:13.69,0:44:14.60,english,,0,0,0,,It's a little simpler.
Dialogue: 0,0:44:13.69,0:44:14.60,chinese,,0,0,0,,这就简单多了。
Dialogue: 0,0:44:14.60,0:44:18.97,english,,0,0,0,,Rather than complicate things in literally different dimensions, let me go ahead and do string.
Dialogue: 0,0:44:14.60,0:44:18.97,chinese,,0,0,0,,弄成二维数组把事情复杂化了，我现在要这么写...
Dialogue: 0,0:44:18.97,0:44:21.73,english,,0,0,0,,Well, I could do int numbers.
Dialogue: 0,0:44:18.97,0:44:21.73,chinese,,0,0,0,,【口述代码】
Dialogue: 0,0:44:21.73,0:44:22.69,english,,0,0,0,,But you know what?
Dialogue: 0,0:44:21.73,0:44:22.69,chinese,,0,0,0,,但你知道吗？
Dialogue: 0,0:44:22.69,0:44:29.20,english,,0,0,0,,So that we can support punctuation like dashes or even parentheses or country codes, I'm going to do this instead.
Dialogue: 0,0:44:22.69,0:44:29.20,chinese,,0,0,0,,为了支持破折号、括号或国家代码什么的符号，我打算不用 int。
Dialogue: 0,0:44:22.69,0:44:29.20,chinese,,0,0,0,,*注：想想身份证，用 int 也存不下啊。所以直接用 string 了。
Dialogue: 0,0:44:29.20,0:44:40.39,english,,0,0,0,,I'm going to do string numbers so that I can represent Carter's number as quote unquote plus 1 for the US, 617-495-1000, complete with hyphens, as is US convention.
Dialogue: 0,0:44:29.20,0:44:40.39,chinese,,0,0,0,,【口述代码】
Dialogue: 0,0:44:40.39,0:44:47.93,english,,0,0,0,,And then for mine I'll go ahead and do +1-949-468-2750 semicolon.
Dialogue: 0,0:44:40.39,0:44:47.93,chinese,,0,0,0,,【口述代码】
Dialogue: 0,0:44:47.93,0:44:53.86,english,,0,0,0,,And now down below, let's actually enable the user to search this phone book, just like in week 0 we did.
Dialogue: 0,0:44:47.93,0:44:53.86,chinese,,0,0,0,,现在，要像第 0 周那样，让用户在电话簿里面查。
Dialogue: 0,0:44:53.86,0:44:55.96,english,,0,0,0,,String name equals get string.
Dialogue: 0,0:44:53.86,0:44:55.96,chinese,,0,0,0,,【口述代码】
Dialogue: 0,0:44:55.96,0:44:59.99,english,,0,0,0,,And let's ask the user for a name, presumably David or Carter or someone else.
Dialogue: 0,0:44:55.96,0:44:59.99,chinese,,0,0,0,,【口述代码】
Dialogue: 0,0:44:59.99,0:45:01.85,english,,0,0,0,,And now let's re-implement linear search.
Dialogue: 0,0:44:59.99,0:45:01.85,chinese,,0,0,0,,现在我们来重新实现一下线性查找。
Dialogue: 0,0:45:01.85,0:45:05.92,english,,0,0,0,,So 4, int i get 0. i is less than 2.
Dialogue: 0,0:45:01.85,0:45:05.92,chinese,,0,0,0,,【口述代码】
Dialogue: 0,0:45:05.92,0:45:07.51,english,,0,0,0,,And do as I say, not as I do.
Dialogue: 0,0:45:05.92,0:45:07.51,chinese,,0,0,0,,注意我说的啊，不要每次都这么写。
Dialogue: 0,0:45:07.51,0:45:13.22,english,,0,0,0,,I think we should beware this hard coding, but we'll keep it simple for now. i++.
Dialogue: 0,0:45:07.51,0:45:13.22,chinese,,0,0,0,,这种硬编码必须得避免，不过现在就简单起见。
Dialogue: 0,0:45:13.22,0:45:17.15,english,,0,0,0,,And then in this for loop, I think we have all of the ingredients to solve this.
Dialogue: 0,0:45:13.22,0:45:17.15,chinese,,0,0,0,,用这个 for 循环，我觉得解决整个问题就足够了。
Dialogue: 0,0:45:17.15,0:45:28.81,english,,0,0,0,,So if the return value of str compare of all of the names bracket i comparing against the name that the human typed in, if all of that equals
Dialogue: 0,0:45:17.15,0:45:28.81,chinese,,0,0,0,,【口述代码】
Dialogue: 0,0:45:28.81,0:45:36.77,english,,0,0,0,,【口述代码】
Dialogue: 0,0:45:28.81,0:45:36.77,chinese,,0,0,0,,等于 0，即这两个字符串中的所有字符都相等，那么我想我们就可以像上次一样说 "找到了"。
Dialogue: 0,0:45:36.77,0:45:37.52,english,,0,0,0,,But you know what?
Dialogue: 0,0:45:36.77,0:45:37.52,chinese,,0,0,0,,但你知道吗？
Dialogue: 0,0:45:37.52,0:45:40.13,english,,0,0,0,,Let's actually print Carter's or my phone number.
Dialogue: 0,0:45:37.52,0:45:40.13,chinese,,0,0,0,,我们来打印下 Carter，或者我的电话号码吧。
Dialogue: 0,0:45:40.13,0:45:44.77,english,,0,0,0,,So found percent s, and we'll plug in numbers, bracket i.
Dialogue: 0,0:45:40.13,0:45:44.77,chinese,,0,0,0,,【口述代码】
Dialogue: 0,0:45:44.77,0:45:47.80,english,,0,0,0,,And then just for consistency, I'll return 0 here.
Dialogue: 0,0:45:44.77,0:45:47.80,chinese,,0,0,0,,跟以前保持一致，我在这里 return 0。
Dialogue: 0,0:45:47.80,0:45:53.60,english,,0,0,0,,And down here, how about I'll say something like printf not found, just to be clear.
Dialogue: 0,0:45:47.80,0:45:53.60,chinese,,0,0,0,,表达清楚一点，我在下面 printf 没找到之类的提示。
Dialogue: 0,0:45:53.60,0:45:56.24,english,,0,0,0,,And then I'll return 1 as well.
Dialogue: 0,0:45:53.60,0:45:56.24,chinese,,0,0,0,,然后，这里就 return 1。
Dialogue: 0,0:45:56.24,0:45:58.12,english,,0,0,0,,So just to recap, here's all of the code.
Dialogue: 0,0:45:56.24,0:45:58.12,chinese,,0,0,0,,来回顾一下这个程序所有的代码。
Dialogue: 0,0:45:58.12,0:46:01.61,english,,0,0,0,,It's almost the same as before, except now it's useful.
Dialogue: 0,0:45:58.12,0:46:01.61,chinese,,0,0,0,,程序和以前变化不大，只不过现在能解决实际问题了。
Dialogue: 0,0:46:01.61,0:46:03.46,english,,0,0,0,,I'm not just saying found or not found.
Dialogue: 0,0:46:01.61,0:46:03.46,chinese,,0,0,0,,不只是告诉用户，找到或者没找到。
Dialogue: 0,0:46:03.46,0:46:07.18,english,,0,0,0,,I found a number in monopoly, or I found a piece in monopoly.
Dialogue: 0,0:46:03.46,0:46:07.18,chinese,,0,0,0,,我在大富翁游戏里，找到了一个数字，或者找到了一个棋子。
Dialogue: 0,0:46:07.18,0:46:09.88,english,,0,0,0,,I'm looking up in one array, one of the strings.
Dialogue: 0,0:46:07.18,0:46:09.88,chinese,,0,0,0,,这次是，在一个数组里，查找其中一个字符串。
Dialogue: 0,0:46:09.88,0:46:12.73,english,,0,0,0,,And then I'm printing from the other array, the answer.
Dialogue: 0,0:46:09.88,0:46:12.73,chinese,,0,0,0,,如果找到了，就从另一个数组里打印出答案。
Dialogue: 0,0:46:12.73,0:46:19.48,english,,0,0,0,,So let me go ahead here and run the compiler, make phone book, Enter.
Dialogue: 0,0:46:12.73,0:46:19.48,chinese,,0,0,0,,跑一下编译，make phonebook，回车。
Dialogue: 0,0:46:19.48,0:46:21.07,english,,0,0,0,,OK, that's promising, no errors.
Dialogue: 0,0:46:19.48,0:46:21.07,chinese,,0,0,0,,好的，很有搞头啊，没发生错误。
Dialogue: 0,0:46:21.07,0:46:22.72,english,,0,0,0,,Dot slash phonebook now.
Dialogue: 0,0:46:21.07,0:46:22.72,chinese,,0,0,0,,运行一下。
Dialogue: 0,0:46:22.72,0:46:26.35,english,,0,0,0,,And let's search, for instance, Carter Enter.
Dialogue: 0,0:46:22.72,0:46:26.35,chinese,,0,0,0,,比如说，来搜一下 Carter 吧，回车。
Dialogue: 0,0:46:26.35,0:46:28.06,english,,0,0,0,,All right, so we found Carter's number.
Dialogue: 0,0:46:26.35,0:46:28.06,chinese,,0,0,0,,我们找到了 Carter 的号码。
Dialogue: 0,0:46:28.06,0:46:29.39,english,,0,0,0,,All right, let me do that again.
Dialogue: 0,0:46:28.06,0:46:29.39,chinese,,0,0,0,,好吧，再来一遍。
Dialogue: 0,0:46:29.39,0:46:30.96,english,,0,0,0,,Phone book, let's search for David.
Dialogue: 0,0:46:29.39,0:46:30.96,chinese,,0,0,0,,这次搜索 David。
Dialogue: 0,0:46:30.96,0:46:32.96,english,,0,0,0,,All right, we seem to have found David's number.
Dialogue: 0,0:46:30.96,0:46:32.96,chinese,,0,0,0,,好，这次看起来也找到了。
Dialogue: 0,0:46:32.96,0:46:34.50,english,,0,0,0,,All right, let's do it one last time.
Dialogue: 0,0:46:32.96,0:46:34.50,chinese,,0,0,0,,好吧，再来最后一次。
Dialogue: 0,0:46:34.50,0:46:35.41,english,,0,0,0,,Phone book, Enter.
Dialogue: 0,0:46:34.50,0:46:35.41,chinese,,0,0,0,,运行。
Dialogue: 0,0:46:35.41,0:46:37.36,english,,0,0,0,,And now we'll search for John Harvard.
Dialogue: 0,0:46:35.41,0:46:37.36,chinese,,0,0,0,,来查找 John Harvard。
Dialogue: 0,0:46:37.36,0:46:40.06,english,,0,0,0,,Enter, not found.
Dialogue: 0,0:46:37.36,0:46:40.06,chinese,,0,0,0,,回车，它说没找到。
Dialogue: 0,0:46:40.06,0:46:45.52,english,,0,0,0,,All right, so I daresay, albeit with minimal testing, this code is correct.
Dialogue: 0,0:46:40.06,0:46:45.52,chinese,,0,0,0,,好吧，我敢说，虽然只是简单测试了一下，但这段代码是正确的。
Dialogue: 0,0:46:45.52,0:46:48.19,english,,0,0,0,,Would anyone now like to critique the design?
Dialogue: 0,0:46:45.52,0:46:48.19,chinese,,0,0,0,,有没有人愿意锐评一下这段代码的设计？
Dialogue: 0,0:46:48.19,0:46:51.91,english,,0,0,0,,Does something rub you the wrong way, perhaps, about this approach here?
Dialogue: 0,0:46:48.19,0:46:51.91,chinese,,0,0,0,,有没有哪里你觉得不妥？
Dialogue: 0,0:46:55.12,0:47:01.51,english,,0,0,0,,And as always, think about how, if the program maybe gets longer, more complicated, how decisions like this might unfold.
Dialogue: 0,0:46:55.12,0:47:01.51,chinese,,0,0,0,,我们需要一如既往养成习惯，\N思考如果程序变得更加复杂，应该怎么把代码展开得更加标准和优雅。
Dialogue: 0,0:47:01.51,0:47:02.44,english,,0,0,0,,Yeah.
Dialogue: 0,0:47:02.44,0:47:04.40,english,,0,0,0,,STUDENT: If i is less than 2.
Dialogue: 0,0:47:02.44,0:47:04.40,chinese,,0,0,0,,学生：if i < 2 这里。
Dialogue: 0,0:47:04.40,0:47:10.08,english,,0,0,0,,DAVID MALAN: OK, so if i is less than 2, so technically, if I change the number of people in this phone book,
Dialogue: 0,0:47:04.40,0:47:10.08,chinese,,0,0,0,,嗯嗯，如果写 i<2，那我们要是从代码上改变了电话簿里的人数，
Dialogue: 0,0:47:10.08,0:47:11.33,english,,0,0,0,,I'm going to have to update i.
Dialogue: 0,0:47:10.08,0:47:11.33,chinese,,0,0,0,,必须同步更新 i。
Dialogue: 0,0:47:11.33,0:47:13.29,english,,0,0,0,,And we've already seen that I get myself into trouble.
Dialogue: 0,0:47:11.33,0:47:13.29,chinese,,0,0,0,,可以看到，这样添了不少麻烦。
Dialogue: 0,0:47:13.29,0:47:14.16,english,,0,0,0,,So that's bad design.
Dialogue: 0,0:47:13.29,0:47:14.16,chinese,,0,0,0,,所以说是烂设计。
Dialogue: 0,0:47:14.16,0:47:15.00,english,,0,0,0,,Good.
Dialogue: 0,0:47:15.00,0:47:20.71,english,,0,0,0,,STUDENT: Say you add someone's name to the phonebook, but you don't have the corresponding number.
Dialogue: 0,0:47:15.00,0:47:20.71,chinese,,0,0,0,,学生：要是你在电话簿里添加了某人的名字，但却没有相应的号码。
Dialogue: 0,0:47:20.71,0:47:24.73,english,,0,0,0,,So then when you go to pull their number, it [INAUDIBLE] someone's number.
Dialogue: 0,0:47:20.71,0:47:24.73,chinese,,0,0,0,,当你去获取他们的号码时，就会...
Dialogue: 0,0:47:24.73,0:47:25.48,english,,0,0,0,,DAVID MALAN: Yeah.
Dialogue: 0,0:47:24.73,0:47:25.48,chinese,,0,0,0,,没错。
Dialogue: 0,0:47:25.48,0:47:28.18,english,,0,0,0,,So again, I'm sort of trusting myself not to screw up.
Dialogue: 0,0:47:25.48,0:47:28.18,chinese,,0,0,0,,所以，我给了自己充分的信任，不会搞砸任何地方。
Dialogue: 0,0:47:28.18,0:47:36.64,english,,0,0,0,,If I add John or anyone else to the first array but I forget to add their number to the second array, eventually things are going to drift and be inconsistent.
Dialogue: 0,0:47:28.18,0:47:36.64,chinese,,0,0,0,,如果我把其他人添加到第一个数组里，却忘了同步添加他们的号码到第二个数组，\N最终程序就走偏了，变得前后不一致。
Dialogue: 0,0:47:36.64,0:47:39.01,english,,0,0,0,,And then code will be incorrect at that point.
Dialogue: 0,0:47:36.64,0:47:39.01,chinese,,0,0,0,,这时，代码就会出现错误。
Dialogue: 0,0:47:39.01,0:47:43.42,english,,0,0,0,,So sort of a poor design setting me up for future failure, if you will.
Dialogue: 0,0:47:39.01,0:47:43.42,chinese,,0,0,0,,所以可以说，这是为我未来的失败埋下的伏笔，一种很烂的设计。
Dialogue: 0,0:47:43.42,0:47:44.86,english,,0,0,0,,Other thoughts?
Dialogue: 0,0:47:43.42,0:47:44.86,chinese,,0,0,0,,还有别的想法吗？
Dialogue: 0,0:47:44.86,0:47:45.46,english,,0,0,0,,Yeah.
Dialogue: 0,0:47:45.46,0:47:52.84,english,,0,0,0,,STUDENT: [INAUDIBLE] so if you were to switch the order of the numbers but not the main [INAUDIBLE]
Dialogue: 0,0:47:45.46,0:47:52.84,chinese,,0,0,0,,学生：如果你调换了数字的顺序，但是主要的...
Dialogue: 0,0:47:52.84,0:47:54.14,english,,0,0,0,,DAVID MALAN: Yeah, really good.
Dialogue: 0,0:47:52.84,0:47:54.14,chinese,,0,0,0,,是的，非常对。
Dialogue: 0,0:47:54.14,0:47:55.55,english,,0,0,0,,We're assuming the same order.
Dialogue: 0,0:47:54.14,0:47:55.55,chinese,,0,0,0,,我们假设两个数组顺序一致。
Dialogue: 0,0:47:55.55,0:47:59.45,english,,0,0,0,,From left to right, the names go, and from left to right, the numbers go.
Dialogue: 0,0:47:55.55,0:47:59.45,chinese,,0,0,0,,从左到右名字和数字依次对应。
Dialogue: 0,0:47:59.45,0:48:01.16,english,,0,0,0,,But that's kind of just the honor system.
Dialogue: 0,0:47:59.45,0:48:01.16,chinese,,0,0,0,,但这只是一种君子协议。
Dialogue: 0,0:48:01.16,0:48:07.04,english,,0,0,0,,Like, there's literally nothing in code preventing me from reversing the order for whatever reason, or maybe sorting the names.
Dialogue: 0,0:48:01.16,0:48:07.04,chinese,,0,0,0,,代码里没有任何东西可以阻止我拿个理由去改变顺序或者排个序。
Dialogue: 0,0:48:07.04,0:48:10.13,english,,0,0,0,,Like, they're sorted now, and maybe that's deliberate, but maybe it's not.
Dialogue: 0,0:48:07.04,0:48:10.13,chinese,,0,0,0,,比如，names 现在被排了个序，有意无意的。
Dialogue: 0,0:48:10.13,0:48:12.92,english,,0,0,0,,So this honor system here, too, is just not good.
Dialogue: 0,0:48:10.13,0:48:12.92,chinese,,0,0,0,,所以，这里的君子协议是不可取的。
Dialogue: 0,0:48:12.92,0:48:19.49,english,,0,0,0,,I could put a comment in here to remind myself, note to self, always update arrays the same way.
Dialogue: 0,0:48:12.92,0:48:19.49,chinese,,0,0,0,,我可以在这里写条注释提醒自己，注意，必须要以同样的方式更新数组。
Dialogue: 0,0:48:19.49,0:48:26.09,english,,0,0,0,,But like, something's going to happen eventually, especially when we have not two, but three, but 30, 300 names and numbers.
Dialogue: 0,0:48:19.49,0:48:26.09,chinese,,0,0,0,,但是常在河边走哪有不湿鞋，尤其是当我们有了两个、三个... 300 个名字和号码的时候。
Dialogue: 0,0:48:26.09,0:48:29.67,english,,0,0,0,,It would be nice to keep all of the related data together.
Dialogue: 0,0:48:26.09,0:48:29.67,chinese,,0,0,0,,如果能把所有相关数据保存在一起就更好了。
Dialogue: 0,0:48:29.67,0:48:37.97,english,,0,0,0,,And so in fact, the one new feature of C we'll introduce today is one that actually allows us to implement our very own data structures.
Dialogue: 0,0:48:29.67,0:48:37.97,chinese,,0,0,0,,所以我们今天要介绍 C 语言里一种新语法，就是允许我们实现自己的数据结构。
Dialogue: 0,0:48:37.97,0:48:45.93,english,,0,0,0,,You can think of arrays as a very lightweight data structure, in that it allows you to cluster related data back to back to back to back.
Dialogue: 0,0:48:37.97,0:48:45.93,chinese,,0,0,0,,你可以把数组视为一种非常轻量级的数据结构，数组里所有数据紧挨着，集中连续存放在一起。
Dialogue: 0,0:48:45.93,0:48:48.17,english,,0,0,0,,And this is how strings are implemented.
Dialogue: 0,0:48:45.93,0:48:48.17,chinese,,0,0,0,,这就是字符串的实现方式。
Dialogue: 0,0:48:48.17,0:48:51.56,english,,0,0,0,,They are a data structure effectively implemented with an array.
Dialogue: 0,0:48:48.17,0:48:51.56,chinese,,0,0,0,,通过数组，字符串（字符数组）被高效地实现了。
Dialogue: 0,0:48:51.56,0:48:59.87,english,,0,0,0,,But with C and with other languages, it turns out you can invent your own data types, whether they're one dimensional, two dimensional even, or beyond.
Dialogue: 0,0:48:51.56,0:48:59.87,chinese,,0,0,0,,但其实，不管是 C 语言还是别的语言，你可以发明自己的数据类型，一维、二维甚至更多都可以。
Dialogue: 0,0:48:59.87,0:49:07.20,english,,0,0,0,,And with C, can you specifically create your own types that have their own names?
Dialogue: 0,0:48:59.87,0:49:07.20,chinese,,0,0,0,,那么在 C 语言里，怎么创建一个，具有自己名称的数据类型呢？
Dialogue: 0,0:49:07.20,0:49:16.38,english,,0,0,0,,So for instance, wouldn't it have been nice if C came with, not just char and int and floats and long and others.
Dialogue: 0,0:49:07.20,0:49:16.38,chinese,,0,0,0,,就是说，如果 C 语言里不仅有 char、int、floats 和 long 这些类型，还允许有其他的，那该多好啊。
Dialogue: 0,0:49:16.38,0:49:19.97,english,,0,0,0,,Wouldn't it be nice if C came with a data type called person?
Dialogue: 0,0:49:16.38,0:49:19.97,chinese,,0,0,0,,如果 C 语言自带一种数据类型 person，岂不更香？
Dialogue: 0,0:49:19.97,0:49:22.79,english,,0,0,0,,And ideally, a person would have a name and a number.
Dialogue: 0,0:49:19.97,0:49:22.79,chinese,,0,0,0,,理想情况下，一个 person 类型应该具有名字和号码。
Dialogue: 0,0:49:22.79,0:49:24.86,english,,0,0,0,,Now, that's a little naive and unrealistic.
Dialogue: 0,0:49:22.79,0:49:24.86,chinese,,0,0,0,,现在看来，这未免有点天真和不切实际了。
Dialogue: 0,0:49:24.86,0:49:28.46,english,,0,0,0,,Like, why would they define a person to have just those two fields.
Dialogue: 0,0:49:24.86,0:49:28.46,chinese,,0,0,0,,比如，为什么要把一个人定义成只有这两个字段呢？
Dialogue: 0,0:49:28.46,0:49:30.95,english,,0,0,0,,Certainly, people could have disagreed what a person is.
Dialogue: 0,0:49:28.46,0:49:30.95,chinese,,0,0,0,,每个人（每个程序里）对人的定义都可能存在分歧。
Dialogue: 0,0:49:30.95,0:49:32.30,english,,0,0,0,,So they leave it to us.
Dialogue: 0,0:49:30.95,0:49:32.30,chinese,,0,0,0,,所以，C 语言把决定权交给了我们程序员自己。
Dialogue: 0,0:49:32.30,0:49:36.81,english,,0,0,0,,The authors of C gave us all of these primitives, ints and floats and strings and so forth.
Dialogue: 0,0:49:32.30,0:49:36.81,chinese,,0,0,0,,C 语言的作者们，为我们提供了所有的基元，比如说各种整型、浮点型和字符串等等。
Dialogue: 0,0:49:36.81,0:49:48.15,english,,0,0,0,,But it's up to us now to use those in a more interesting way so that we can create an array of person variables, if you will, inside of an array called people, just to pluralize it here.
Dialogue: 0,0:49:36.81,0:49:48.15,chinese,,0,0,0,,但现在我们需要的是更加创造性地使用这些变量，\N这样我们就可以创建一个叫做 people 的数组，里面包含有相应的多个 person 类型变量。
Dialogue: 0,0:49:48.15,0:49:49.74,english,,0,0,0,,So how are we going to do this?
Dialogue: 0,0:49:48.15,0:49:49.74,chinese,,0,0,0,,那我们要怎么实现呢？
Dialogue: 0,0:49:49.74,0:49:58.01,english,,0,0,0,,Well, for now, let's just stipulate that a person in the world will have a name and a number that we could argue all day long what else a person should have.
Dialogue: 0,0:49:49.74,0:49:58.01,chinese,,0,0,0,,好吧，现在我们先规定，世界上的人都会有一个名字和一个号码，\N至于一个人还应该有什么属性，我们可以争论一整天。
Dialogue: 0,0:49:58.01,0:49:58.67,english,,0,0,0,,And that's fine.
Dialogue: 0,0:49:58.01,0:49:58.67,chinese,,0,0,0,,好了。
Dialogue: 0,0:49:58.67,0:50:01.79,english,,0,0,0,,You can invent your own person eventually.
Dialogue: 0,0:49:58.67,0:50:01.79,chinese,,0,0,0,,你最终可以发明自己的 person 类型。
Dialogue: 0,0:50:01.79,0:50:06.50,english,,0,0,0,,At the moment, I'm using just two variables to define a person's name and number.
Dialogue: 0,0:50:01.79,0:50:06.50,chinese,,0,0,0,,目前的一个 person，由姓名和号码两个 string 定义。
Dialogue: 0,0:50:06.50,0:50:14.66,english,,0,0,0,,But wouldn't it be nice to encapsulate, that is, combine these two data types, into a new and improved data type called person.
Dialogue: 0,0:50:06.50,0:50:14.66,chinese,,0,0,0,,但是，要是能把这两种数据类型封装起来，\N合并成一种新的、改进的数据类型，做一层抽象，直接叫做 person，岂不更好？
Dialogue: 0,0:50:14.66,0:50:17.36,english,,0,0,0,,And the syntax for that is going to be this.
Dialogue: 0,0:50:14.66,0:50:17.36,chinese,,0,0,0,,语法是这样子的。
Dialogue: 0,0:50:17.36,0:50:18.80,english,,0,0,0,,So it's a bit of a mouthful.
Dialogue: 0,0:50:17.36,0:50:18.80,chinese,,0,0,0,,所以说有点拗口。
Dialogue: 0,0:50:18.80,0:50:21.96,english,,0,0,0,,But you can, perhaps, infer what some of this is doing here.
Dialogue: 0,0:50:18.80,0:50:21.96,chinese,,0,0,0,,不过，你可以猜猜这么写的逻辑。
Dialogue: 0,0:50:21.96,0:50:24.50,english,,0,0,0,,So it turns out C has a keyword called typedef.
Dialogue: 0,0:50:21.96,0:50:24.50,chinese,,0,0,0,,原来 C 语言有一个关键字叫 typedef（type define）。
Dialogue: 0,0:50:24.50,0:50:28.31,english,,0,0,0,,As the name kind of suggests, this allows you to define your own type.
Dialogue: 0,0:50:24.50,0:50:28.31,chinese,,0,0,0,,顾名思义，它允许你定义自己的类型。
Dialogue: 0,0:50:28.31,0:50:31.55,english,,0,0,0,,Struct is an indication that it's a structure.
Dialogue: 0,0:50:28.31,0:50:31.55,chinese,,0,0,0,,struct 表明这是一整个 structure（结构体）。
Dialogue: 0,0:50:31.55,0:50:36.71,english,,0,0,0,,It's like a structure that has multiple values inside of it that you are trying to define.
Dialogue: 0,0:50:31.55,0:50:36.71,chinese,,0,0,0,,这个结构体里面，有多个你要定义的值。
Dialogue: 0,0:50:36.71,0:50:42.27,english,,0,0,0,,And then at the very bottom here outside of the curly braces, is the name of the type that you want to create.
Dialogue: 0,0:50:36.71,0:50:42.27,chinese,,0,0,0,,然后在花括号外的最下方，是你要创建类型的名称。
Dialogue: 0,0:50:42.27,0:50:46.79,english,,0,0,0,,So you don't have discretion over using typedef or struct in this particular case.
Dialogue: 0,0:50:42.27,0:50:46.79,chinese,,0,0,0,,所以，在这种特殊情况下，你不能随意使用 typedef 或 struct。
Dialogue: 0,0:50:42.27,0:50:46.79,annotation,,0,0,0,,*注：这里是说，所有变量和自定义类型的名字不能和 C 中的关键字一样。
Dialogue: 0,0:50:46.79,0:50:48.66,english,,0,0,0,,But you can name the thing whatever you want.
Dialogue: 0,0:50:46.79,0:50:48.66,chinese,,0,0,0,,除此以外你想取什么都可以。
Dialogue: 0,0:50:48.66,0:50:52.59,english,,0,0,0,,And you can put anything in the structure that you want as well.
Dialogue: 0,0:50:48.66,0:50:52.59,chinese,,0,0,0,,在 struct 里，可以加入任何你想要的东西。
Dialogue: 0,0:50:52.59,0:51:05.76,english,,0,0,0,,And as soon as the semicolon is executed at the bottom of the code, every line thereafter can now have access to a person data type, whether as a single variable, or as an entire array.
Dialogue: 0,0:50:52.59,0:51:05.76,chinese,,0,0,0,,在类型声明后面加上分号，在这以后的每一行都可以访问 person 类型，\N可以创建单个变量，也可以是整个数组。
Dialogue: 0,0:51:05.76,0:51:10.26,english,,0,0,0,,So if I want to build on this then, let me go ahead and do this.
Dialogue: 0,0:51:05.76,0:51:10.26,chinese,,0,0,0,,现在我想在此基础上再进一步，来这么写。
Dialogue: 0,0:51:10.26,0:51:12.23,english,,0,0,0,,Let me go back to my C code here.
Dialogue: 0,0:51:10.26,0:51:12.23,chinese,,0,0,0,,回到 C 语言代码里面。
Dialogue: 0,0:51:12.23,0:51:17.61,english,,0,0,0,,And I'm going to go ahead and change just a couple of things.
Dialogue: 0,0:51:12.23,0:51:17.61,chinese,,0,0,0,,接着我想先改动几处。
Dialogue: 0,0:51:17.61,0:51:19.11,english,,0,0,0,,Let's go ahead and do this.
Dialogue: 0,0:51:17.61,0:51:19.11,chinese,,0,0,0,,让我们开始吧。
Dialogue: 0,0:51:19.11,0:51:23.24,english,,0,0,0,,I'm going to go ahead and, first, get rid of those two hardcoded arrays.
Dialogue: 0,0:51:19.11,0:51:23.24,chinese,,0,0,0,,首先，我要去掉这两个硬编码的数组。
Dialogue: 0,0:51:23.24,0:51:30.18,english,,0,0,0,,And let me go ahead and, at the top of my file, invent this type, so typedef struct.
Dialogue: 0,0:51:23.24,0:51:30.18,chinese,,0,0,0,,继续写，在文件的顶部创造这个类型，typedef struct。
Dialogue: 0,0:51:30.18,0:51:34.47,english,,0,0,0,,Inside of it will be a string name and then a string number.
Dialogue: 0,0:51:30.18,0:51:34.47,chinese,,0,0,0,,里面包含有两个 string，一个是名字，一个是编号。
Dialogue: 0,0:51:34.47,0:51:36.78,english,,0,0,0,,And then the name of the structure will be person.
Dialogue: 0,0:51:34.47,0:51:36.78,chinese,,0,0,0,,然后，整个结构体的名称是 person。
Dialogue: 0,0:51:36.78,0:51:44.53,english,,0,0,0,,And best practice would have me define it at the very top of my file so that any of my functions, in fact, could use it, even though I just have main in this case.
Dialogue: 0,0:51:36.78,0:51:44.53,chinese,,0,0,0,,最佳实践是在文件的最顶端定义它，\N这样在下面任何函数都可以使用，尽管这个例子里只有 main 函数用到了。
Dialogue: 0,0:51:44.53,0:51:47.10,english,,0,0,0,,Now, if I wanted, I could do this.
Dialogue: 0,0:51:44.53,0:51:47.10,chinese,,0,0,0,,现在，我想这么写。
Dialogue: 0,0:51:47.10,0:51:50.37,english,,0,0,0,,Person P1 and person P2.
Dialogue: 0,0:51:47.10,0:51:50.37,chinese,,0,0,0,,【口述代码】
Dialogue: 0,0:51:50.37,0:51:53.04,english,,0,0,0,,But we know from last week, that already is bad design.
Dialogue: 0,0:51:50.37,0:51:53.04,chinese,,0,0,0,,但我们从上周就知道，这是一种烂设计。
Dialogue: 0,0:51:53.04,0:52:00.04,english,,0,0,0,,If you want to have multiple instances of the same type of variable, we should probably use what instead?
Dialogue: 0,0:51:53.04,0:52:00.04,chinese,,0,0,0,,如果要使用同一类型变量的多个实例，应该用什么来代替？
Dialogue: 0,0:52:00.04,0:52:01.04,english,,0,0,0,,STUDENT: [INAUDIBLE]
Dialogue: 0,0:52:01.04,0:52:01.79,english,,0,0,0,,DAVID MALAN: And--
Dialogue: 0,0:52:01.79,0:52:02.47,english,,0,0,0,,STUDENT: An array.
Dialogue: 0,0:52:01.79,0:52:02.47,chinese,,0,0,0,,一个数组。
Dialogue: 0,0:52:02.47,0:52:03.63,english,,0,0,0,,DAVID MALAN: Yeah, an array.
Dialogue: 0,0:52:02.47,0:52:03.63,chinese,,0,0,0,,是的，一个数组。
Dialogue: 0,0:52:03.63,0:52:05.23,english,,0,0,0,,So let me not even go down that road.
Dialogue: 0,0:52:03.63,0:52:05.23,chinese,,0,0,0,,所以，我就不这么搞了。
Dialogue: 0,0:52:05.23,0:52:06.70,english,,0,0,0,,Let me instead just do this.
Dialogue: 0,0:52:05.23,0:52:06.70,chinese,,0,0,0,,而是这么写。
Dialogue: 0,0:52:06.70,0:52:09.72,english,,0,0,0,,Person will be the type of the array.
Dialogue: 0,0:52:06.70,0:52:09.72,chinese,,0,0,0,,person 是数组的类型。
Dialogue: 0,0:52:09.72,0:52:10.81,english,,0,0,0,,But I'm going to call it--
Dialogue: 0,0:52:09.72,0:52:10.81,chinese,,0,0,0,,但我要叫它...
Dialogue: 0,0:52:10.81,0:52:11.98,english,,0,0,0,,I could call it persons.
Dialogue: 0,0:52:10.81,0:52:11.98,chinese,,0,0,0,,叫它 persons 好了。
Dialogue: 0,0:52:11.98,0:52:13.72,english,,0,0,0,,But in English, we typically say people.
Dialogue: 0,0:52:11.98,0:52:13.72,chinese,,0,0,0,,在英语中，我们通常说 people。
Dialogue: 0,0:52:13.72,0:52:15.19,english,,0,0,0,,So I'll call the array people.
Dialogue: 0,0:52:13.72,0:52:15.19,chinese,,0,0,0,,所以我就叫它 people。
Dialogue: 0,0:52:15.19,0:52:20.92,english,,0,0,0,,And I want two people to exist in this array, though I could certainly change that number to be anything I want.
Dialogue: 0,0:52:15.19,0:52:20.92,chinese,,0,0,0,,我希望这个数组里有两个元素，当然这个数字是可以随意更改的。
Dialogue: 0,0:52:20.92,0:52:27.19,english,,0,0,0,,How, now, do you put a name inside of a person and then put the number inside of that same person?
Dialogue: 0,0:52:20.92,0:52:27.19,chinese,,0,0,0,,现在，怎么把名字和数字放在 person 的里面？
Dialogue: 0,0:52:27.19,0:52:28.99,english,,0,0,0,,Well, slightly new syntax today.
Dialogue: 0,0:52:27.19,0:52:28.99,chinese,,0,0,0,,嗯，今天的语法有点新。
Dialogue: 0,0:52:28.99,0:52:30.52,english,,0,0,0,,I'm going to go ahead and say this.
Dialogue: 0,0:52:28.99,0:52:30.52,chinese,,0,0,0,,我就直说了。
Dialogue: 0,0:52:30.52,0:52:34.42,english,,0,0,0,,People bracket 0 just gives me the first person in the array.
Dialogue: 0,0:52:30.52,0:52:34.42,chinese,,0,0,0,,people[0] 就是数组里的第一个人。
Dialogue: 0,0:52:34.42,0:52:35.57,english,,0,0,0,,That's not new.
Dialogue: 0,0:52:34.42,0:52:35.57,chinese,,0,0,0,,这个倒是不新鲜。
Dialogue: 0,0:52:35.57,0:52:40.84,english,,0,0,0,,But if you want to go inside of that person in memory, you use a dot.
Dialogue: 0,0:52:35.57,0:52:40.84,chinese,,0,0,0,,但如果你想访问内存中那个 person 的属性，就需要使用点语法。
Dialogue: 0,0:52:40.84,0:52:44.87,english,,0,0,0,,And then you just specify the name of the attribute therein.
Dialogue: 0,0:52:40.84,0:52:44.87,chinese,,0,0,0,,然后指定其中的属性名称就行了。
Dialogue: 0,0:52:44.87,0:52:47.41,english,,0,0,0,,So if I want to set the first person's name to Carter,
Dialogue: 0,0:52:44.87,0:52:47.41,chinese,,0,0,0,,比如说我想把第一个人的 name 设置成 Carter，
Dialogue: 0,0:52:47.41,0:52:49.48,english,,0,0,0,,I just use that so-called dot notation.
Dialogue: 0,0:52:47.41,0:52:49.48,chinese,,0,0,0,,要用这个点符号。
Dialogue: 0,0:52:49.48,0:52:52.78,english,,0,0,0,,And then if I want to set Carter's number using dot notation,
Dialogue: 0,0:52:49.48,0:52:52.78,chinese,,0,0,0,,然后，我想用点符号设置 Carter 的 number。
Dialogue: 0,0:52:52.78,0:52:56.68,english,,0,0,0,,I would do this, +1-617-495-1000.
Dialogue: 0,0:52:52.78,0:52:56.68,chinese,,0,0,0,,【口述代码】
Dialogue: 0,0:52:56.68,0:52:58.88,english,,0,0,0,,And then if I want to do the same for myself,
Dialogue: 0,0:52:56.68,0:52:58.88,chinese,,0,0,0,,然后，我也想把自己的设置了。
Dialogue: 0,0:52:58.88,0:53:03.73,english,,0,0,0,,I would now do people bracket 1 dot name equals quote unquote David.
Dialogue: 0,0:52:58.88,0:53:03.73,chinese,,0,0,0,,【口述代码】
Dialogue: 0,0:53:03.73,0:53:08.44,english,,0,0,0,,And then people bracket 1 still dot number equals quote unquote
Dialogue: 0,0:53:03.73,0:53:08.44,chinese,,0,0,0,,【口述代码】
Dialogue: 0,0:53:08.44,0:53:13.03,english,,0,0,0,,+1-949-468-2750.
Dialogue: 0,0:53:13.03,0:53:18.61,english,,0,0,0,,And now, at the bottom of my file, I think my logic can pretty much stay the same.
Dialogue: 0,0:53:13.03,0:53:18.61,chinese,,0,0,0,,文件后面呢，我觉得逻辑可以基本保持不变。
Dialogue: 0,0:53:18.61,0:53:24.37,english,,0,0,0,,I can still, on this line here, prompt the user for the name of the person they want to look up.
Dialogue: 0,0:53:18.61,0:53:24.37,chinese,,0,0,0,,这一行还是提示用户输入查询人的姓名。
Dialogue: 0,0:53:24.37,0:53:26.62,english,,0,0,0,,For now, even though I admit it's not the best design,
Dialogue: 0,0:53:24.37,0:53:26.62,chinese,,0,0,0,,现在，我得承认这设计得不行，
Dialogue: 0,0:53:26.62,0:53:28.49,english,,0,0,0,,I'm just doing this for demonstration's sake,
Dialogue: 0,0:53:26.62,0:53:28.49,chinese,,0,0,0,,这么写只是为了演示，
Dialogue: 0,0:53:28.49,0:53:31.36,english,,0,0,0,,I'm going to leave the two there, because I know I have two people.
Dialogue: 0,0:53:28.49,0:53:31.36,chinese,,0,0,0,,还是把 2 留在这里，因为我知道一共是两个人。
Dialogue: 0,0:53:31.36,0:53:34.10,english,,0,0,0,,But down here, this is going to have to change.
Dialogue: 0,0:53:31.36,0:53:34.10,chinese,,0,0,0,,但这一行必须改一下了。
Dialogue: 0,0:53:34.10,0:53:37.00,english,,0,0,0,,I don't want to compare names bracket i anymore.
Dialogue: 0,0:53:34.10,0:53:37.00,chinese,,0,0,0,,现在比较的不是 names[i] 了。
Dialogue: 0,0:53:37.00,0:53:42.19,english,,0,0,0,,What do I want to type here as the first argument to str compare?
Dialogue: 0,0:53:37.00,0:53:42.19,chinese,,0,0,0,,strcmp 的第一个参数应该改成什么？
Dialogue: 0,0:53:42.19,0:53:43.90,english,,0,0,0,,What do I want to do here?
Dialogue: 0,0:53:42.19,0:53:43.90,chinese,,0,0,0,,我想在这里做什么？
Dialogue: 0,0:53:43.90,0:53:44.96,english,,0,0,0,,Yeah.
Dialogue: 0,0:53:44.96,0:53:46.80,english,,0,0,0,,STUDENT: People i dot name.
Dialogue: 0,0:53:46.80,0:53:49.14,english,,0,0,0,,DAVID MALAN: So people i dot name, yeah.
Dialogue: 0,0:53:46.80,0:53:49.14,chinese,,0,0,0,,所以是 people[i].name。
Dialogue: 0,0:53:49.14,0:53:54.48,english,,0,0,0,,So I want to go into the people array at the ith location, because that's what my loop is doing.
Dialogue: 0,0:53:49.14,0:53:54.48,chinese,,0,0,0,,【口述代码】
Dialogue: 0,0:53:54.48,0:53:55.89,english,,0,0,0,,It's updating i again and again.
Dialogue: 0,0:53:54.48,0:53:55.89,chinese,,0,0,0,,循环一次又一次地更新 i。
Dialogue: 0,0:53:55.89,0:53:58.08,english,,0,0,0,,And then look at name, and that's good.
Dialogue: 0,0:53:55.89,0:53:58.08,chinese,,0,0,0,,【口述代码】
Dialogue: 0,0:53:58.08,0:53:59.67,english,,0,0,0,,I think now I need to change this too.
Dialogue: 0,0:53:58.08,0:53:59.67,chinese,,0,0,0,,下面也要跟着变。
Dialogue: 0,0:53:59.67,0:54:01.89,english,,0,0,0,,What do I want to print if the person is found?
Dialogue: 0,0:53:59.67,0:54:01.89,chinese,,0,0,0,,如果找到了这个人，我想输出什么？
Dialogue: 0,0:54:01.89,0:54:02.44,english,,0,0,0,,Someone else?
Dialogue: 0,0:54:01.89,0:54:02.44,chinese,,0,0,0,,别的人想回答吗？
Dialogue: 0,0:54:05.07,0:54:08.85,english,,0,0,0,,What do I want to print here, if I found the person's name?
Dialogue: 0,0:54:05.07,0:54:08.85,chinese,,0,0,0,,如果我找到了这个人的名字，要打印点啥？
Dialogue: 0,0:54:08.85,0:54:09.36,english,,0,0,0,,Yeah.
Dialogue: 0,0:54:09.36,0:54:10.89,english,,0,0,0,,STUDENT: [INAUDIBLE]
Dialogue: 0,0:54:10.89,0:54:12.39,english,,0,0,0,,DAVID MALAN: Say it a little louder.
Dialogue: 0,0:54:10.89,0:54:12.39,chinese,,0,0,0,,说大声点。
Dialogue: 0,0:54:12.39,0:54:13.79,english,,0,0,0,,STUDENT: People i dot number.
Dialogue: 0,0:54:13.79,0:54:14.67,english,,0,0,0,,DAVID MALAN: Perfect.
Dialogue: 0,0:54:14.67,0:54:20.31,english,,0,0,0,,So people bracket i dot number, if indeed I want to print the corresponding number to this person.
Dialogue: 0,0:54:14.67,0:54:20.31,chinese,,0,0,0,,所以是 people[i].number，如果我想访问相应的 person。
Dialogue: 0,0:54:20.31,0:54:22.93,english,,0,0,0,,And then I think the rest of my code can stay the same.
Dialogue: 0,0:54:20.31,0:54:22.93,chinese,,0,0,0,,然后，我想别的代码可以不动了。
Dialogue: 0,0:54:22.93,0:54:27.15,english,,0,0,0,,So let me go ahead and rerun make phone book to recompile this version.
Dialogue: 0,0:54:22.93,0:54:27.15,chinese,,0,0,0,,重新编译一下。
Dialogue: 0,0:54:27.15,0:54:28.17,english,,0,0,0,,So far so good.
Dialogue: 0,0:54:27.15,0:54:28.17,chinese,,0,0,0,,到目前为止还不错。
Dialogue: 0,0:54:28.17,0:54:29.40,english,,0,0,0,,Dot slash phone book.
Dialogue: 0,0:54:28.17,0:54:29.40,chinese,,0,0,0,,运行一下。
Dialogue: 0,0:54:29.40,0:54:31.59,english,,0,0,0,,Let's go ahead and type in Carter's name, found.
Dialogue: 0,0:54:29.40,0:54:31.59,chinese,,0,0,0,,我们来输入 Carter 的名字，找到了。
Dialogue: 0,0:54:31.59,0:54:33.39,english,,0,0,0,,All right, let's go ahead and run it again.
Dialogue: 0,0:54:31.59,0:54:33.39,chinese,,0,0,0,,好吧，再来一次。
Dialogue: 0,0:54:33.39,0:54:35.27,english,,0,0,0,,David's name, found.
Dialogue: 0,0:54:33.39,0:54:35.27,chinese,,0,0,0,,David 的名字，找到了。
Dialogue: 0,0:54:35.27,0:54:36.94,english,,0,0,0,,Let's go ahead and run it one more time.
Dialogue: 0,0:54:35.27,0:54:36.94,chinese,,0,0,0,,再运行一次。
Dialogue: 0,0:54:36.94,0:54:40.26,english,,0,0,0,,Type in John Harvard, for instance, not found, in this case.
Dialogue: 0,0:54:36.94,0:54:40.26,chinese,,0,0,0,,输入 John Harvard，这个情况应该不该找到。
Dialogue: 0,0:54:40.26,0:54:43.71,english,,0,0,0,,So fundamentally, the code isn't all that different.
Dialogue: 0,0:54:40.26,0:54:43.71,chinese,,0,0,0,,所以从根本上来说，代码并没有什么不同。
Dialogue: 0,0:54:43.71,0:54:46.09,english,,0,0,0,,Linear search is still behaving the same way.
Dialogue: 0,0:54:43.71,0:54:46.09,chinese,,0,0,0,,还是用老办法来进行线性查找。
Dialogue: 0,0:54:46.09,0:54:48.69,english,,0,0,0,,And I admit, this is kind of ugly looking.
Dialogue: 0,0:54:46.09,0:54:48.69,chinese,,0,0,0,,我得承认，这看起来有点丑。
Dialogue: 0,0:54:48.69,0:54:52.35,english,,0,0,0,,We've kind of made a two line solution five lines of code now.
Dialogue: 0,0:54:48.69,0:54:52.35,chinese,,0,0,0,,原来的解决方案只有两行，现在却要五行代码。
Dialogue: 0,0:54:52.35,0:55:03.89,english,,0,0,0,,But if we fast forward a week or two when we start saving information to files, we'll introduce you to files like csv files, comma separated values, or spreadsheet files, which
Dialogue: 0,0:54:52.35,0:55:03.89,chinese,,0,0,0,,要是我们快进到一两周后，开始把信息保存到文件里，\N我们会学到用逗号作为分隔符的 csv 文件，还有电子表格文件等等，
Dialogue: 0,0:55:03.89,0:55:06.60,english,,0,0,0,,you've surely opened on your Mac or PC at some point in the past.
Dialogue: 0,0:55:03.89,0:55:06.60,chinese,,0,0,0,,你肯定之前在电脑上打开过这些文件的。
Dialogue: 0,0:55:06.60,0:55:11.79,english,,0,0,0,,Suffice it to say we'll soon learn techniques for storing information, like names and numbers, in files.
Dialogue: 0,0:55:06.60,0:55:11.79,chinese,,0,0,0,,我们很快就能学会，怎么样把姓名和数字等等信息存进文件。
Dialogue: 0,0:55:11.79,0:55:19.08,english,,0,0,0,,And at that point, we're not going to do any of this hackish sort of hard coding of the number 2 and manually typing my name and Carter's name and number into our program.
Dialogue: 0,0:55:11.79,0:55:19.08,chinese,,0,0,0,,到那时，我们就不会像黑客那样硬编码数字 2 了，\N也不用在程序里手动输入我和 Carter 的名字、号码什么的。
Dialogue: 0,0:55:19.08,0:55:21.75,english,,0,0,0,,We'll read the information dynamically from a file.
Dialogue: 0,0:55:19.08,0:55:21.75,chinese,,0,0,0,,我们会从文件里动态读取信息。
Dialogue: 0,0:55:21.75,0:55:25.18,english,,0,0,0,,And in a few weeks, we'll read it dynamically from a database instead.
Dialogue: 0,0:55:21.75,0:55:25.18,chinese,,0,0,0,,再几周后，我们会从数据库里动态读取数据。
Dialogue: 0,0:55:25.18,0:55:32.19,english,,0,0,0,,But this is, for now, just syntactically how we can create an array of size 2 containing one person each.
Dialogue: 0,0:55:25.18,0:55:32.19,chinese,,0,0,0,,到目前我们只是介绍了，怎么用新语法创建一个大小为 2 的 person 类型数组。
Dialogue: 0,0:55:32.19,0:55:41.61,english,,0,0,0,,We can update the name and number of the first person, update the name and the number of the second person, and then later search across those names and print out the corresponding numbers.
Dialogue: 0,0:55:32.19,0:55:41.61,chinese,,0,0,0,,我们可以更新第一个人、第二个人的姓名和号码，还可以搜索这些姓名并打印出相应的号码。
Dialogue: 0,0:55:41.61,0:55:44.22,english,,0,0,0,,And in this sense, this is a better design.
Dialogue: 0,0:55:41.61,0:55:44.22,chinese,,0,0,0,,从这个意义上说，这样设计得更好了。
Dialogue: 0,0:55:44.22,0:55:44.73,english,,0,0,0,,Why?
Dialogue: 0,0:55:44.73,0:55:53.40,english,,0,0,0,,Because my person data type encapsulates, now, everything that it means to be a person, at least in this narrow world.
Dialogue: 0,0:55:44.73,0:55:53.40,chinese,,0,0,0,,因为在这个用途不多的程序里面，person 数据类型概括并包含了一个人需要的所有信息。
Dialogue: 0,0:55:53.40,0:55:57.58,english,,0,0,0,,And if I want to add something to the notion of a person, for instance,
Dialogue: 0,0:55:53.40,0:55:57.58,chinese,,0,0,0,,比如说，我现在想要给 person 添加点属性，
Dialogue: 0,0:55:57.58,0:56:03.74,english,,0,0,0,,I could go up to my type def, and tomorrow, add an address to every person and start reading that in as well.
Dialogue: 0,0:55:57.58,0:56:03.74,chinese,,0,0,0,,比如，我就可以到 typedef 的地方，为每个人添加一个 address，然后开始读写数据。
Dialogue: 0,0:56:03.74,0:56:05.16,english,,0,0,0,,And now it's not the honor system.
Dialogue: 0,0:56:03.74,0:56:05.16,chinese,,0,0,0,,现在就不是君子协定了。
Dialogue: 0,0:56:05.16,0:56:12.21,english,,0,0,0,,It's not a names array, a numbers array, an addresses array, and everything else you might imagine related to a person.
Dialogue: 0,0:56:05.16,0:56:12.21,chinese,,0,0,0,,它不是零散的 names 数组、numbers 数组、addresses 数组，等等人的单独属性。
Dialogue: 0,0:56:12.21,0:56:17.22,english,,0,0,0,,It's all encapsulated, which is a term of art inside of the same type.
Dialogue: 0,0:56:12.21,0:56:17.22,chinese,,0,0,0,,一切被封装起来，放到一个数据类型里面作为属性。
Dialogue: 0,0:56:17.22,0:56:21.66,english,,0,0,0,,Reminiscent, if some of you have programmed before, of something called object-oriented programming.
Dialogue: 0,0:56:17.22,0:56:21.66,chinese,,0,0,0,,如果你们有人以前写过程序，\N也许就会想到 "面向对象编程"（OOP，Object-Oriented Programming）。
Dialogue: 0,0:56:21.66,0:56:23.19,english,,0,0,0,,But we're not there yet.
Dialogue: 0,0:56:21.66,0:56:23.19,chinese,,0,0,0,,但我们还没到那一步。
Dialogue: 0,0:56:23.19,0:56:24.69,english,,0,0,0,,C is not that.
Dialogue: 0,0:56:23.19,0:56:24.69,chinese,,0,0,0,,C 不是一门面向对象的语言。
Dialogue: 0,0:56:24.69,0:56:35.03,english,,0,0,0,,Questions on this use of struct or this new syntax, the dot operator being really the juicy part here.
Dialogue: 0,0:56:24.69,0:56:35.03,chinese,,0,0,0,,关于 struct 的使用和相关的新语法，. 符号是最重要的。
Dialogue: 0,0:56:35.03,0:56:35.62,english,,0,0,0,,Any questions?
Dialogue: 0,0:56:35.03,0:56:35.62,chinese,,0,0,0,,有问题吗？
Dialogue: 0,0:56:35.62,0:56:36.52,english,,0,0,0,,Yeah.
Dialogue: 0,0:56:36.52,0:56:39.41,english,,0,0,0,,STUDENT: [INAUDIBLE]
Dialogue: 0,0:56:42.80,0:56:44.42,english,,0,0,0,,DAVID MALAN: On what line number?
Dialogue: 0,0:56:42.80,0:56:44.42,chinese,,0,0,0,,在哪一行？
Dialogue: 0,0:56:44.42,0:56:46.06,english,,0,0,0,,STUDENT: 16.
Dialogue: 0,0:56:46.06,0:56:46.73,english,,0,0,0,,DAVID MALAN: 16?
Dialogue: 0,0:56:46.73,0:56:51.23,english,,0,0,0,,So yes, so syntactically, we introduced the square brackets last week.
Dialogue: 0,0:56:46.73,0:56:51.23,chinese,,0,0,0,,是的，我们上周引入了 C 语法中的方括号。
Dialogue: 0,0:56:51.23,0:56:55.31,english,,0,0,0,,So doing people bracket 0 just means go to the first person in the array.
Dialogue: 0,0:56:51.23,0:56:55.31,chinese,,0,0,0,,所以，[0] 的意思就是去找 people 数组里的第一个人。
Dialogue: 0,0:56:55.31,0:56:58.40,english,,0,0,0,,That was like when Stephanie literally opened this door.
Dialogue: 0,0:56:55.31,0:56:58.40,chinese,,0,0,0,,就好像 Stephanie 把这扇门打开了。
Dialogue: 0,0:56:58.40,0:56:59.99,english,,0,0,0,,That's doors bracket 0.
Dialogue: 0,0:56:58.40,0:56:59.99,chinese,,0,0,0,,这是 doors[0]。
Dialogue: 0,0:56:59.99,0:57:02.33,english,,0,0,0,,But this is, of course, people bracket 0 instead.
Dialogue: 0,0:56:59.99,0:57:02.33,chinese,,0,0,0,,不过程序里面是 people[0]。
Dialogue: 0,0:57:02.33,0:57:04.58,english,,0,0,0,,Today, the dot is a new piece of syntax.
Dialogue: 0,0:57:02.33,0:57:04.58,chinese,,0,0,0,,从今天起，点是一种新的语法。
Dialogue: 0,0:57:04.58,0:57:13.29,english,,0,0,0,,It means go inside of that person in memory and look at the name they're in and set it equal to Carter and do the same for number.
Dialogue: 0,0:57:04.58,0:57:13.29,chinese,,0,0,0,,这句的意思是进入内存里的那个 person 结构体，\N查看 name，设置成 Carter，然后把 number 也改掉了。
Dialogue: 0,0:57:13.29,0:57:13.88,english,,0,0,0,,So that's all.
Dialogue: 0,0:57:13.29,0:57:13.88,chinese,,0,0,0,,就是这样。
Dialogue: 0,0:57:13.88,0:57:18.41,english,,0,0,0,,It's like, open the locker door, go inside of it, and check or set the name and the number.
Dialogue: 0,0:57:13.88,0:57:18.41,chinese,,0,0,0,,这就好比，打开柜子门，往里面看，检查或设置名称和号码什么的。
Dialogue: 0,0:57:18.41,0:57:19.04,english,,0,0,0,,Yeah.
Dialogue: 0,0:57:19.04,0:57:29.28,english,,0,0,0,,STUDENT: [INAUDIBLE] can you set default values for each of the [INAUDIBLE]??
Dialogue: 0,0:57:19.04,0:57:29.28,chinese,,0,0,0,,学生：你能为每个... 设置默认值吗？
Dialogue: 0,0:57:29.28,0:57:30.84,english,,0,0,0,,DAVID MALAN: Attributes is fine.
Dialogue: 0,0:57:29.28,0:57:30.84,chinese,,0,0,0,,你的意思应该是 attribute（属性）。
Dialogue: 0,0:57:30.84,0:57:31.53,english,,0,0,0,,Good question.
Dialogue: 0,0:57:30.84,0:57:31.53,chinese,,0,0,0,,好问题。
Dialogue: 0,0:57:31.53,0:57:34.05,english,,0,0,0,,In the struct, can you set default values?
Dialogue: 0,0:57:31.53,0:57:34.05,chinese,,0,0,0,,在结构体中，能不能给属性设置默认值？
Dialogue: 0,0:57:34.05,0:57:35.10,english,,0,0,0,,Short answer, no.
Dialogue: 0,0:57:34.05,0:57:35.10,chinese,,0,0,0,,简而言之，C 语言不行。
Dialogue: 0,0:57:35.10,0:57:42.58,english,,0,0,0,,And this is where C becomes less feature-able than more modern languages like Python and Java and others, where you can, in fact, do that.
Dialogue: 0,0:57:35.10,0:57:42.58,chinese,,0,0,0,,与 Python 和 Java 等更现代的语言相比，C 语言就显得功能不足了。
Dialogue: 0,0:57:42.58,0:57:47.14,english,,0,0,0,,So when we transition to Python in a few weeks' time, we'll see how we can start solving problems like that.
Dialogue: 0,0:57:42.58,0:57:47.14,chinese,,0,0,0,,所以，几周后过渡到 Python 的时候，我们就能看到怎么解决你说的设置默认值。
Dialogue: 0,0:57:47.14,0:57:51.45,english,,0,0,0,,But for now, it's up to you to initialize name and number to something.
Dialogue: 0,0:57:47.14,0:57:51.45,chinese,,0,0,0,,不过现在，你需要手动把 name 和 number 初始化为一个值。
Dialogue: 0,0:57:51.45,0:57:52.83,english,,0,0,0,,Yeah.
Dialogue: 0,0:57:52.83,0:57:55.54,english,,0,0,0,,STUDENT: [INAUDIBLE]
Dialogue: 0,0:58:04.12,0:58:05.54,english,,0,0,0,,DAVID MALAN: Really good question.
Dialogue: 0,0:58:04.12,0:58:05.54,chinese,,0,0,0,,好问题。
Dialogue: 0,0:58:05.54,0:58:08.47,english,,0,0,0,,How can we adjust or critique the design of what I'm doing?
Dialogue: 0,0:58:05.54,0:58:08.47,chinese,,0,0,0,,要怎么调整或批评这里的设计？
Dialogue: 0,0:58:08.47,0:58:13.78,english,,0,0,0,,This is one of the few situations where I would say, hypocritically, do as I say, not as I do.
Dialogue: 0,0:58:08.47,0:58:13.78,chinese,,0,0,0,,这是为数不多的几次情况，我虚伪地跟你们讲 "照我说的做，而不是照我做的做"。
Dialogue: 0,0:58:13.78,0:58:17.71,english,,0,0,0,,I am using pretty ugly lines like this, just to introduce the syntax.
Dialogue: 0,0:58:13.78,0:58:17.71,chinese,,0,0,0,,我用了这行很丑的代码，只是为了介绍一下语法。
Dialogue: 0,0:58:17.71,0:58:26.23,english,,0,0,0,,But my claim, pedagogically today, is that eventually, when we start storing names and numbers or other things in files or in databases, you won't have this redundancy.
Dialogue: 0,0:58:17.71,0:58:26.23,chinese,,0,0,0,,但是今天只是教学的目的，\N最终，我们会用文件、数据库来存储名称、数字或其他信息，就不会出现这种冗余的写法了。
Dialogue: 0,0:58:17.71,0:58:26.23,annotation,,0,0,0,,*碎碎念：有没有注意到 David 课上 live coding 的代码都是格式十分标准的，\N他一直以身作则写出好代码。大伙们一边学习语法和知识，也要好好模仿他的各种最佳实践。
Dialogue: 0,0:58:26.23,0:58:34.63,english,,0,0,0,,You'll have one line of code or two lines of code that read the information from the file or database and then fill the entire array with that data.
Dialogue: 0,0:58:26.23,0:58:34.63,chinese,,0,0,0,,一行或两行代码就可以从文件或数据库中读取信息，然后把这些数据填进整个数组。
Dialogue: 0,0:58:34.63,0:58:39.40,english,,0,0,0,,For now, I'm just doing it manually so as to keep our focus only on the new syntax, but that's it.
Dialogue: 0,0:58:34.63,0:58:39.40,chinese,,0,0,0,,在这里我是自己手写数据的，以便让我们只关注新语法，仅此而已了。
Dialogue: 0,0:58:39.40,0:58:42.64,english,,0,0,0,,So forgive the bad design by design today.
Dialogue: 0,0:58:39.40,0:58:42.64,chinese,,0,0,0,,所以，请原谅今天的糟糕设计。
Dialogue: 0,0:58:42.64,0:58:45.74,english,,0,0,0,,Other questions on this?
Dialogue: 0,0:58:42.64,0:58:45.74,chinese,,0,0,0,,还有其他问题吗？
Dialogue: 0,0:58:45.74,0:58:47.59,english,,0,0,0,,All right, that's been a lot already.
Dialogue: 0,0:58:45.74,0:58:47.59,chinese,,0,0,0,,好了，已经说了很多了。
Dialogue: 0,0:58:47.59,0:58:50.47,english,,0,0,0,,Why don't we go ahead and take our 10 minute break with snacks first.
Dialogue: 0,0:58:47.59,0:58:50.47,chinese,,0,0,0,,不如我们先去整点点心，休息 10 分钟。
Dialogue: 0,0:58:50.47,0:58:53.02,english,,0,0,0,,We have some delightful brownies in the lobby.
Dialogue: 0,0:58:50.47,0:58:53.02,chinese,,0,0,0,,大厅里有我们准备的一些好吃的巧克力蛋糕。
Dialogue: 0,0:58:53.02,0:58:55.90,english,,0,0,0,,All right, we are back.
Dialogue: 0,0:58:53.02,0:58:55.90,chinese,,0,0,0,,好了，我们回来了。
Dialogue: 0,0:58:55.90,0:59:02.35,english,,0,0,0,,And up until now, it clearly seems to be a good thing if your data is sorted, because you can use binary search.
Dialogue: 0,0:58:55.90,0:59:02.35,chinese,,0,0,0,,到目前为止，如果你的数据是排好序的，显然是件好事，因为就可以用二分查找了。
Dialogue: 0,0:59:02.35,0:59:05.54,english,,0,0,0,,You know a little something more about the data.
Dialogue: 0,0:59:02.35,0:59:05.54,chinese,,0,0,0,,你能了解数据多一点（由数据间的相对大小得到相对位置信息）。
Dialogue: 0,0:59:05.54,0:59:10.42,english,,0,0,0,,But it turns out that sorting in and of itself is kind of a problem to solve too.
Dialogue: 0,0:59:05.54,0:59:10.42,chinese,,0,0,0,,但其实，排序本身就是一个需要解决的问题。
Dialogue: 0,0:59:10.42,0:59:20.23,english,,0,0,0,,And you might think, well, if sorting is going to be pretty fast, we absolutely should do it before we start searching, because that will just speed up all of our searches.
Dialogue: 0,0:59:10.42,0:59:20.23,chinese,,0,0,0,,你可能会想，好吧，如果排序很快的话，\N我们绝对应该先排序再查找，因为可以加快后续所有搜索的速度。
Dialogue: 0,0:59:20.23,0:59:28.09,english,,0,0,0,,But if sorting is slow, that kind of invites the question, well, should we bother sorting our data if we're only going to search the data maybe once, maybe twice?
Dialogue: 0,0:59:20.23,0:59:28.09,chinese,,0,0,0,,但是，如果排序操作很慢的话，就会引出这样一个问题：\N如果只查找一两次数据，我们还需要费心排序数据吗？
Dialogue: 0,0:59:28.09,0:59:30.55,english,,0,0,0,,And so here is going to be, potentially, a trade off.
Dialogue: 0,0:59:28.09,0:59:30.55,chinese,,0,0,0,,因此，这可以说是一种权衡。
Dialogue: 0,0:59:30.55,0:59:33.25,english,,0,0,0,,So let's consider what it means really to sort data.
Dialogue: 0,0:59:30.55,0:59:33.25,chinese,,0,0,0,,我们来思考一下排序数据的真正含义。
Dialogue: 0,0:59:33.25,0:59:35.95,english,,0,0,0,,In our case, it's just going to be simple and use numbers.
Dialogue: 0,0:59:33.25,0:59:35.95,chinese,,0,0,0,,在我们的例子里面，只是简简单单几个数字来排序。
Dialogue: 0,0:59:35.95,0:59:40.88,english,,0,0,0,,But it might, in the case of the Googles of the world, be actual web pages or persons or the like.
Dialogue: 0,0:59:35.95,0:59:40.88,chinese,,0,0,0,,但是，对于世界级的 Google 来说，可能排序的是实际的网页、很多的人，等等东西。
Dialogue: 0,0:59:40.88,0:59:46.09,english,,0,0,0,,So here is our typical picture for sorting, for solving any problem.
Dialogue: 0,0:59:40.88,0:59:46.09,chinese,,0,0,0,,这张图非常典型，不管是排序还是解决别的问题都是这种模式。
Dialogue: 0,0:59:46.09,0:59:48.19,english,,0,0,0,,Input at left and output at right.
Dialogue: 0,0:59:46.09,0:59:48.19,chinese,,0,0,0,,左侧输入，右侧输出。
Dialogue: 0,0:59:48.19,0:59:54.34,english,,0,0,0,,The input to our sort problem is going to be some unsorted set of values.
Dialogue: 0,0:59:48.19,0:59:54.34,chinese,,0,0,0,,排序问题的输入是一组没有经过排序的值。
Dialogue: 0,0:59:54.34,0:59:57.94,english,,0,0,0,,And the output, ideally, will be the same set of values sorted.
Dialogue: 0,0:59:54.34,0:59:57.94,chinese,,0,0,0,,理想情况下，输出就是排序后的同一组值。
Dialogue: 0,0:59:57.94,1:00:05.86,english,,0,0,0,,And if we do this concretely, let's suppose that we want to go about sorting this list of numbers, 7, 2, 5, 4, 1, 6, 0, 3.
Dialogue: 0,0:59:57.94,1:00:04.78,chinese,,0,0,0,,具体来讲，比如我们要对 7、2、5、4、1、6、0、3 这一串数字进行排序，
Dialogue: 0,1:00:05.86,1:00:07.81,english,,0,0,0,,So it's all of the numbers from 0 to 7.
Dialogue: 0,1:00:05.86,1:00:07.81,chinese,,0,0,0,,其实就是 0 到 7 的所有数字。
Dialogue: 0,1:00:07.81,1:00:09.75,english,,0,0,0,,But they're somehow jumbled up randomly.
Dialogue: 0,1:00:07.81,1:00:09.75,chinese,,0,0,0,,不管什么原因，它们现在被随意地打乱了。
Dialogue: 0,1:00:09.75,1:00:11.59,english,,0,0,0,,That's going to be the input to the problem.
Dialogue: 0,1:00:09.75,1:00:11.59,chinese,,0,0,0,,这就是问题的输入。
Dialogue: 0,1:00:11.59,1:00:17.99,english,,0,0,0,,And the goal is now to sort those so that you, indeed, get out 0, 1, 2, 3, 4, 5, 6, 7 instead.
Dialogue: 0,1:00:11.59,1:00:17.99,chinese,,0,0,0,,现在的目标是排序这些数据，要得到的结果是 0、1、2、3、4、5、6、7。
Dialogue: 0,1:00:17.99,1:00:23.90,english,,0,0,0,,So it turns out there's lots of different ways we can actually sort numbers like these here.
Dialogue: 0,1:00:17.99,1:00:23.90,chinese,,0,0,0,,其实，有很多不同的算法来对这些数字进行排序。
Dialogue: 0,1:00:23.90,1:00:32.41,english,,0,0,0,,And in fact, just to complement our sorting example earlier, could we perhaps quickly get some eight volunteers to come up if you're comfortable appearing on the internet?
Dialogue: 0,1:00:23.90,1:00:32.41,chinese,,0,0,0,,其实我想来补充一下刚才这个排序例子，\N能不能快速上来八位志愿者，如果你愿意在视频里出镜的话？
Dialogue: 0,1:00:32.41,1:00:39.10,english,,0,0,0,,If you want to do 1, 2, 3, 4, 5, 6, 7, 8, how about?
Dialogue: 0,1:00:32.41,1:00:39.10,chinese,,0,0,0,,摇人中... 怎么样？
Dialogue: 0,1:00:39.10,1:00:40.25,english,,0,0,0,,All right, come on down.
Dialogue: 0,1:00:39.10,1:00:40.25,chinese,,0,0,0,,好了，过来吧。
Dialogue: 0,1:00:45.04,1:00:47.97,english,,0,0,0,,All right.
Dialogue: 0,1:00:47.97,1:00:50.56,english,,0,0,0,,Come on over here, and I'll give you each a number.
Dialogue: 0,1:00:47.97,1:00:50.56,chinese,,0,0,0,,过来过来，我给你们每人一个号码。
Dialogue: 0,1:00:50.56,1:00:58.39,english,,0,0,0,,And if you want to start to organize yourselves in the same order you see the numbers on the board.
Dialogue: 0,1:00:50.56,1:00:58.39,chinese,,0,0,0,,请你们按照黑板上的数字顺序排列。
Dialogue: 0,1:00:58.39,1:01:04.46,english,,0,0,0,,So look up on the overhead and organize yourselves from left to right in that same order.
Dialogue: 0,1:00:58.39,1:01:04.46,chinese,,0,0,0,,抬头看看大屏幕，按照同样的顺序从左到右排一下。
Dialogue: 0,1:01:04.46,1:01:06.21,english,,0,0,0,,And let's have the first of you-- perfect.
Dialogue: 0,1:01:04.46,1:01:06.21,chinese,,0,0,0,,你是第一个。
Dialogue: 0,1:01:06.21,1:01:10.42,english,,0,0,0,,If you want to come right over here, how about right in line with this?
Dialogue: 0,1:01:06.21,1:01:10.42,chinese,,0,0,0,,你过来一点点，排在这里可以吗？
Dialogue: 0,1:01:10.42,1:01:13.99,english,,0,0,0,,All right, and a few more numbers.
Dialogue: 0,1:01:10.42,1:01:13.99,chinese,,0,0,0,,好了，还有几个数字。
Dialogue: 0,1:01:13.99,1:01:14.98,english,,0,0,0,,All right.
Dialogue: 0,1:01:14.98,1:01:19.81,english,,0,0,0,,Number 2, 6, and perfect.
Dialogue: 0,1:01:19.81,1:01:21.62,english,,0,0,0,,Just the right number, all right.
Dialogue: 0,1:01:19.81,1:01:21.62,chinese,,0,0,0,,数字刚刚好。
Dialogue: 0,1:01:21.62,1:01:22.85,english,,0,0,0,,Uh oh.
Dialogue: 0,1:01:22.85,1:01:24.40,english,,0,0,0,,All right, there we go, number three.
Dialogue: 0,1:01:22.85,1:01:24.40,chinese,,0,0,0,,好了，第 3 个。
Dialogue: 0,1:01:24.40,1:01:24.96,english,,0,0,0,,All right.
Dialogue: 0,1:01:24.96,1:01:26.26,english,,0,0,0,,So let's just do a quick check.
Dialogue: 0,1:01:24.96,1:01:26.26,chinese,,0,0,0,,所以，我们来快速检查一下。
Dialogue: 0,1:01:26.26,1:01:30.86,english,,0,0,0,,We have 7, 2, 5, 4, 1, 6, 0, 3, very good so far.
Dialogue: 0,1:01:26.26,1:01:30.86,chinese,,0,0,0,,现在是 7、2、5、4、1、6、0、3，到现在都非常好。
Dialogue: 0,1:01:30.86,1:01:34.51,english,,0,0,0,,Do you want to just scootch a little this way just to make a little more room?
Dialogue: 0,1:01:30.86,1:01:34.51,chinese,,0,0,0,,能不能请你往这边挪一点，腾出点空间？
Dialogue: 0,1:01:34.51,1:01:38.09,english,,0,0,0,,All right, and let's consider now who we have here on stage.
Dialogue: 0,1:01:34.51,1:01:38.09,chinese,,0,0,0,,好了，现在让我们来认识下台上都有谁。
Dialogue: 0,1:01:38.09,1:01:40.78,english,,0,0,0,,You want to each say a quick hello to the audience?
Dialogue: 0,1:01:38.09,1:01:40.78,chinese,,0,0,0,,跟观众打个招呼怎么样？
Dialogue: 0,1:01:40.78,1:01:42.07,english,,0,0,0,,RYAN: Hi, my name is Ryan.
Dialogue: 0,1:01:42.07,1:01:45.59,english,,0,0,0,,I'm a first year from Pennypacker.
Dialogue: 0,1:01:45.59,1:01:46.93,english,,0,0,0,,ITSELLE: Hi, my name is Itselle.
Dialogue: 0,1:01:46.93,1:01:49.17,english,,0,0,0,,I'm a first year at Strauss.
Dialogue: 0,1:01:49.17,1:01:50.26,english,,0,0,0,,LUCY: Hi, my name is Lucy.
Dialogue: 0,1:01:50.26,1:01:52.40,english,,0,0,0,,And I'm a first year from Greenough.
Dialogue: 0,1:01:52.40,1:01:53.65,english,,0,0,0,,SHILOH: Hi, my name is Shiloh.
Dialogue: 0,1:01:53.65,1:01:55.92,english,,0,0,0,,I'm a first year in Wigglesworth.
Dialogue: 0,1:01:55.92,1:01:57.01,english,,0,0,0,,JACK: Hi, my name is Jack.
Dialogue: 0,1:01:57.01,1:01:59.87,english,,0,0,0,,And I'm a first year in Strauss.
Dialogue: 0,1:01:59.87,1:02:01.21,english,,0,0,0,,KATHRYN: Hi, my name is Kathryn.
Dialogue: 0,1:02:01.21,1:02:02.78,english,,0,0,0,,I'm a first year at Strauss.
Dialogue: 0,1:02:02.78,1:02:04.12,english,,0,0,0,,MICHAEL: Hi, my name is Michael.
Dialogue: 0,1:02:04.12,1:02:06.06,english,,0,0,0,,I'm a first year at Pennypacker.
Dialogue: 0,1:02:06.06,1:02:07.48,english,,0,0,0,,MUHAMMAD: Hi, my name is Muhammad.
Dialogue: 0,1:02:07.48,1:02:09.04,english,,0,0,0,,I'm a first year in Matthews.
Dialogue: 0,1:02:09.04,1:02:10.63,english,,0,0,0,,DAVID MALAN: Hi, nice, welcome aboard.
Dialogue: 0,1:02:09.04,1:02:10.63,chinese,,0,0,0,,嗨，很好，欢迎加入。
Dialogue: 0,1:02:10.63,1:02:11.24,english,,0,0,0,,All right.
Dialogue: 0,1:02:11.24,1:02:21.16,english,,0,0,0,,So let's consider, now, how we might go about sorting our kind volunteers here, the goal being to get them into order from smallest to largest so that,
Dialogue: 0,1:02:11.24,1:02:21.16,chinese,,0,0,0,,所以我们现在考虑的是，把所有志愿者进行排序，\N我们的目标是把他们按照从小到大的顺序排列就行了，
Dialogue: 0,1:02:21.16,1:02:24.16,english,,0,0,0,,presumably then, we can use something smarter than just linear search.
Dialogue: 0,1:02:21.16,1:02:24.16,chinese,,0,0,0,,这样以后，我们就可以使用一种办法，比线性查找更聪明一点来查找了。
Dialogue: 0,1:02:24.16,1:02:27.87,english,,0,0,0,,We can actually use binary search, assuming that they are already then sorted.
Dialogue: 0,1:02:24.16,1:02:27.87,chinese,,0,0,0,,就是二分查找，但是前提是他们已经排好序了。
Dialogue: 0,1:02:27.87,1:02:32.60,english,,0,0,0,,So let me propose that we first consider an algorithm that actually has a name called selection sort.
Dialogue: 0,1:02:27.87,1:02:32.60,chinese,,0,0,0,,所以，我们首先得考虑一种排序算法，叫做选择排序。
Dialogue: 0,1:02:32.60,1:02:43.61,english,,0,0,0,,And selection sort is going to be one that literally has me, or really you, as the programmer, selecting the smallest element again and again, and then putting them into the appropriate place.
Dialogue: 0,1:02:32.60,1:02:43.61,chinese,,0,0,0,,选择排序，就是让我们程序员，一次又一次地选择最小的元素，把它们放到合适的位置去。
Dialogue: 0,1:02:43.61,1:02:47.11,english,,0,0,0,,So let me go ahead and start this here, starting with the number 7.
Dialogue: 0,1:02:43.61,1:02:47.11,chinese,,0,0,0,,我要从这里开始，数字 7 开始。
Dialogue: 0,1:02:47.11,1:02:49.24,english,,0,0,0,,At the moment, 7 is the smallest number I've found.
Dialogue: 0,1:02:47.11,1:02:49.24,chinese,,0,0,0,,目前，我找到的最小数字是 7。
Dialogue: 0,1:02:49.24,1:02:52.61,english,,0,0,0,,So I'm going to make mental note of that with a mental variable, if you will.
Dialogue: 0,1:02:49.24,1:02:52.61,chinese,,0,0,0,,所以，我要在心里拿一个变量记着。
Dialogue: 0,1:02:52.61,1:02:53.71,english,,0,0,0,,I'm going to move on now.
Dialogue: 0,1:02:52.61,1:02:53.71,chinese,,0,0,0,,我要继续前进了。
Dialogue: 0,1:02:53.71,1:03:01.55,english,,0,0,0,,Number 2 is obviously smaller, so I'm just going to update my mental reminder that 2 is now the smallest, effectively forgetting, for now, number 7.
Dialogue: 0,1:02:53.71,1:03:01.55,chinese,,0,0,0,,2 显然更小，所以我需要更新心里那个变量，2 现在是最小的，实际上 7 可以抛之脑后了。
Dialogue: 0,1:03:01.55,1:03:02.44,english,,0,0,0,,5, not smaller.
Dialogue: 0,1:03:01.55,1:03:02.44,chinese,,0,0,0,,5，没有更小。
Dialogue: 0,1:03:02.44,1:03:03.37,english,,0,0,0,,4, not smaller.
Dialogue: 0,1:03:02.44,1:03:03.37,chinese,,0,0,0,,4，没有更小。
Dialogue: 0,1:03:03.37,1:03:04.17,english,,0,0,0,,1, smaller.
Dialogue: 0,1:03:03.37,1:03:04.17,chinese,,0,0,0,,1，还要小点。
Dialogue: 0,1:03:04.17,1:03:05.92,english,,0,0,0,,And I'm going to make mental note of that.
Dialogue: 0,1:03:04.17,1:03:05.92,chinese,,0,0,0,,我要在心里记着。
Dialogue: 0,1:03:05.92,1:03:07.03,english,,0,0,0,,6, not smaller.
Dialogue: 0,1:03:05.92,1:03:07.03,chinese,,0,0,0,,6，没有更小。
Dialogue: 0,1:03:07.03,1:03:08.20,english,,0,0,0,,0, even smaller.
Dialogue: 0,1:03:07.03,1:03:08.20,chinese,,0,0,0,,0，甚至还要小。
Dialogue: 0,1:03:08.20,1:03:11.14,english,,0,0,0,,I'll make mental note of that, having forgotten now everything else.
Dialogue: 0,1:03:08.20,1:03:11.14,chinese,,0,0,0,,前面忘了，中间忘了，最后是 0。
Dialogue: 0,1:03:11.14,1:03:13.18,english,,0,0,0,,And now number 3 is not smaller.
Dialogue: 0,1:03:11.14,1:03:13.18,chinese,,0,0,0,,现在的 3 也没有更小。
Dialogue: 0,1:03:13.18,1:03:14.29,english,,0,0,0,,So what's your name again?
Dialogue: 0,1:03:13.18,1:03:14.29,chinese,,0,0,0,,你叫什么名字来着？
Dialogue: 0,1:03:14.29,1:03:14.63,english,,0,0,0,,MICHAEL: Michael.
Dialogue: 0,1:03:14.63,1:03:16.24,english,,0,0,0,,DAVID MALAN: So Michael is number 0.
Dialogue: 0,1:03:14.63,1:03:16.24,chinese,,0,0,0,,Michael 是 0 号。
Dialogue: 0,1:03:16.24,1:03:18.31,english,,0,0,0,,He belongs, of course, way down there.
Dialogue: 0,1:03:16.24,1:03:18.31,chinese,,0,0,0,,当然，他应该去那里。
Dialogue: 0,1:03:18.31,1:03:20.74,english,,0,0,0,,But unfortunately-- you are--
Dialogue: 0,1:03:18.31,1:03:20.74,chinese,,0,0,0,,不幸的是，这位...
Dialogue: 0,1:03:20.74,1:03:21.55,english,,0,0,0,,RYAN: Ryan.
Dialogue: 0,1:03:21.55,1:03:23.36,english,,0,0,0,,DAVID MALAN: Ryan is in the way.
Dialogue: 0,1:03:21.55,1:03:23.36,chinese,,0,0,0,,Ryan 占住了那个位置。
Dialogue: 0,1:03:23.36,1:03:24.58,english,,0,0,0,,So what should we do?
Dialogue: 0,1:03:23.36,1:03:24.58,chinese,,0,0,0,,那我们该怎么办？
Dialogue: 0,1:03:24.58,1:03:27.57,english,,0,0,0,,How should we start to sort this list?
Dialogue: 0,1:03:24.58,1:03:27.57,chinese,,0,0,0,,我们应该怎么开始排序这个列表？
Dialogue: 0,1:03:27.57,1:03:30.51,english,,0,0,0,,Where should number 0 go?
Dialogue: 0,1:03:27.57,1:03:30.51,chinese,,0,0,0,,0 号应该放在哪里？
Dialogue: 0,1:03:30.51,1:03:31.01,english,,0,0,0,,Yeah.
Dialogue: 0,1:03:31.01,1:03:32.22,english,,0,0,0,,Do you want to say it louder?
Dialogue: 0,1:03:31.01,1:03:32.22,chinese,,0,0,0,,大声点可以吗？
Dialogue: 0,1:03:32.22,1:03:34.54,english,,0,0,0,,STUDENT: I will swap, I think.
Dialogue: 0,1:03:32.22,1:03:34.54,chinese,,0,0,0,,学生：我觉得需要他俩交换。
Dialogue: 0,1:03:34.54,1:03:36.67,english,,0,0,0,,DAVID MALAN: Yeah, so let's just go ahead and swap.
Dialogue: 0,1:03:34.54,1:03:36.67,chinese,,0,0,0,,是啊，那我们就继续交换吧。
Dialogue: 0,1:03:36.67,1:03:39.19,english,,0,0,0,,So if you want to go ahead and 0, go on where 7 is.
Dialogue: 0,1:03:36.67,1:03:39.19,chinese,,0,0,0,,所以，0 这位，转移到 7 的位置。
Dialogue: 0,1:03:39.19,1:03:41.17,english,,0,0,0,,We need to make room for number 7.
Dialogue: 0,1:03:39.19,1:03:41.17,chinese,,0,0,0,,我们需要为 7 腾出空间。
Dialogue: 0,1:03:41.17,1:03:45.53,english,,0,0,0,,It would kind of be cheating if maybe everyone kind of politely stepped over to the side.
Dialogue: 0,1:03:41.17,1:03:45.53,chinese,,0,0,0,,如果每个人都换位思考，站到 0 的后边来，那就有点耍赖了。
Dialogue: 0,1:03:45.53,1:03:46.03,english,,0,0,0,,Why?
Dialogue: 0,1:03:46.03,1:03:54.19,english,,0,0,0,,Because if we imagine all of our volunteers here to be an array, like, that's a crazy amount of work to have every element in the array shift to the left just to make room.
Dialogue: 0,1:03:46.03,1:03:54.19,chinese,,0,0,0,,我们把志愿者想象成一整个数组，\N如果要让数组里的每个元素都移动一位腾出空间，这么做的工作量特别大。
Dialogue: 0,1:03:54.19,1:03:57.34,english,,0,0,0,,So we're going to keep it simple and just evict whoever's there now.
Dialogue: 0,1:03:54.19,1:03:57.34,chinese,,0,0,0,,所以我们就简单点，不管是谁，只要做一次交换就行了。
Dialogue: 0,1:03:57.34,1:04:00.88,english,,0,0,0,,Now, maybe we get lucky, and number 7 is actually closer to its destination.
Dialogue: 0,1:03:57.34,1:04:00.88,chinese,,0,0,0,,现在，可能是运气好吧，7 号距离他实际上的终点更近了。
Dialogue: 0,1:04:00.88,1:04:03.25,english,,0,0,0,,Maybe we get unlucky, and it goes farther away.
Dialogue: 0,1:04:00.88,1:04:03.25,chinese,,0,0,0,,也可能运气不好，他离得更远。
Dialogue: 0,1:04:03.25,1:04:05.26,english,,0,0,0,,But we've at least solved one problem.
Dialogue: 0,1:04:03.25,1:04:05.26,chinese,,0,0,0,,但我们至少解决了一个问题。
Dialogue: 0,1:04:05.26,1:04:10.28,english,,0,0,0,,If we had n problems at first, now we have n minus 1, because number 0 is indeed in the right place.
Dialogue: 0,1:04:05.26,1:04:10.28,chinese,,0,0,0,,如果一开始我们有 n 个问题（n 个数字需要排序），\N那现在问题规模只有 n-1 了，因为数字 0 确实去到了正确的位置。
Dialogue: 0,1:04:10.28,1:04:15.13,english,,0,0,0,,So if I continue to act this out, let me go ahead and say 2, currently the smallest.
Dialogue: 0,1:04:10.28,1:04:15.13,chinese,,0,0,0,,所以，我们继续表演下去，我得说，2 目前是最小的。
Dialogue: 0,1:04:15.13,1:04:18.04,english,,0,0,0,,5, no, 4, no, 1 currently the smallest.
Dialogue: 0,1:04:15.13,1:04:18.04,chinese,,0,0,0,,5，没有，4，没有，1 目前最小。
Dialogue: 0,1:04:18.04,1:04:19.00,english,,0,0,0,,I'll make mental note.
Dialogue: 0,1:04:18.04,1:04:19.00,chinese,,0,0,0,,我会记下来的。
Dialogue: 0,1:04:19.00,1:04:22.69,english,,0,0,0,,6, 7, 3, and now let me pause.
Dialogue: 0,1:04:19.00,1:04:22.69,chinese,,0,0,0,,6、7、3，现在要暂停一下。
Dialogue: 0,1:04:22.69,1:04:26.00,english,,0,0,0,,1 is obviously the now smallest element.
Dialogue: 0,1:04:22.69,1:04:26.00,chinese,,0,0,0,,1 显然是现在最小的元素。
Dialogue: 0,1:04:26.00,1:04:27.76,english,,0,0,0,,So did I need to keep going?
Dialogue: 0,1:04:26.00,1:04:27.76,chinese,,0,0,0,,那么，我现在需要交换吗？
Dialogue: 0,1:04:27.76,1:04:30.55,english,,0,0,0,,Well, turns out, at least as I've defined selection sort,
Dialogue: 0,1:04:27.76,1:04:30.55,chinese,,0,0,0,,其实，按照我刚才定义的选择排序（每次选择最小的元素，放到合适的位置去），
Dialogue: 0,1:04:30.55,1:04:36.55,english,,0,0,0,,I do need to keep going, because I only claim that I'm using one variable in my mind to remember the then smallest element.
Dialogue: 0,1:04:30.55,1:04:36.55,chinese,,0,0,0,,我确实需要继续下去，因为我在脑海里只用了一个变量，来记住目前最小的元素。
Dialogue: 0,1:04:36.55,1:04:41.59,english,,0,0,0,,I'm not smart enough like us humans to remember, wait a minute, 1 is definitely the smallest now.
Dialogue: 0,1:04:36.55,1:04:41.59,chinese,,0,0,0,,计算机在记忆上没人类那么聪明灵活，"停一下，1 现在肯定是最小的"。
Dialogue: 0,1:04:41.59,1:04:43.19,english,,0,0,0,,I don't have that whole recollection.
Dialogue: 0,1:04:41.59,1:04:43.19,chinese,,0,0,0,,走过的这段完整的记忆，计算机没有。
Dialogue: 0,1:04:43.19,1:04:45.59,english,,0,0,0,,So I just am keeping track of the now smallest.
Dialogue: 0,1:04:43.19,1:04:45.59,chinese,,0,0,0,,所以，我只是记录了当前最小值。
Dialogue: 0,1:04:45.59,1:04:46.91,english,,0,0,0,,So number 1, your name was?
Dialogue: 0,1:04:45.59,1:04:46.91,chinese,,0,0,0,,那么 1 号这位，你叫什么名字？
Dialogue: 0,1:04:46.91,1:04:47.41,english,,0,0,0,,JACK: Jack.
Dialogue: 0,1:04:47.41,1:04:49.30,english,,0,0,0,,DAVID MALAN: Jack, where should Jack go?
Dialogue: 0,1:04:47.41,1:04:49.30,chinese,,0,0,0,,Jack 该去哪儿？
Dialogue: 0,1:04:49.30,1:04:50.38,english,,0,0,0,,Probably there.
Dialogue: 0,1:04:49.30,1:04:50.38,chinese,,0,0,0,,应该是那里。
Dialogue: 0,1:04:50.38,1:04:51.67,english,,0,0,0,,And what's your name?
Dialogue: 0,1:04:50.38,1:04:51.67,chinese,,0,0,0,,你叫什么名字？
Dialogue: 0,1:04:51.67,1:04:51.88,english,,0,0,0,,ITSELLE: Itselle.
Dialogue: 0,1:04:51.88,1:04:57.43,english,,0,0,0,,DAVID MALAN: OK, so Jack and Itselle, if you want to swap places, we've now solved two of the n total problems.
Dialogue: 0,1:04:51.88,1:04:57.43,chinese,,0,0,0,,好了，Jack 和 Itselle，如果你们交换一下位置，n 个问题我们就解决两个了。
Dialogue: 0,1:04:57.43,1:04:58.99,english,,0,0,0,,And now we'll do it a little faster.
Dialogue: 0,1:04:57.43,1:04:58.99,chinese,,0,0,0,,现在要做快一点。
Dialogue: 0,1:04:58.99,1:05:03.88,english,,0,0,0,,If each of you want to start to swap as I find the right person, so 5 smallest,
Dialogue: 0,1:04:58.99,1:05:03.88,chinese,,0,0,0,,我找到合适人选后，你们就自己交换一下，现在最小的是 5，
Dialogue: 0,1:05:03.88,1:05:06.34,english,,0,0,0,,4 smaller, 2 is smaller.
Dialogue: 0,1:05:03.88,1:05:06.34,chinese,,0,0,0,,4 更小，2 更小。
Dialogue: 0,1:05:06.34,1:05:07.75,english,,0,0,0,,Got to keep checking.
Dialogue: 0,1:05:06.34,1:05:07.75,chinese,,0,0,0,,必须继续往后找。
Dialogue: 0,1:05:07.75,1:05:09.57,english,,0,0,0,,OK, 2 was smaller.
Dialogue: 0,1:05:07.75,1:05:09.57,chinese,,0,0,0,,好了，2 是最小的。
Dialogue: 0,1:05:09.57,1:05:11.78,english,,0,0,0,,All right, now I'm going to go back to the beginning.
Dialogue: 0,1:05:09.57,1:05:11.78,chinese,,0,0,0,,现在我要回到开头。
Dialogue: 0,1:05:11.78,1:05:13.09,english,,0,0,0,,All right, 4 is small.
Dialogue: 0,1:05:11.78,1:05:13.09,chinese,,0,0,0,,好吧，4 很小。
Dialogue: 0,1:05:13.09,1:05:14.05,english,,0,0,0,,5 is not.
Dialogue: 0,1:05:14.05,1:05:14.74,english,,0,0,0,,6 is not.
Dialogue: 0,1:05:14.74,1:05:16.12,english,,0,0,0,,7-- oh, 3 is small.
Dialogue: 0,1:05:14.74,1:05:16.12,chinese,,0,0,0,,哦，3 还要小。
Dialogue: 0,1:05:16.12,1:05:17.77,english,,0,0,0,,Where do you want to go?
Dialogue: 0,1:05:16.12,1:05:17.77,chinese,,0,0,0,,你要去哪里？
Dialogue: 0,1:05:17.77,1:05:18.67,english,,0,0,0,,OK, good.
Dialogue: 0,1:05:18.67,1:05:19.81,english,,0,0,0,,I'm going to go back here.
Dialogue: 0,1:05:18.67,1:05:19.81,chinese,,0,0,0,,我要回到开头去。
Dialogue: 0,1:05:19.81,1:05:21.06,english,,0,0,0,,And I can be a little smart.
Dialogue: 0,1:05:19.81,1:05:21.06,chinese,,0,0,0,,我现在还可以聪明一点。
Dialogue: 0,1:05:21.06,1:05:24.95,english,,0,0,0,,I don't have to go all the way to the end, because I know these folks are already sorted.
Dialogue: 0,1:05:21.06,1:05:24.95,chinese,,0,0,0,,没有必要从开头一直检查到结尾，因为我知道前面这些已经排好序了。
Dialogue: 0,1:05:24.95,1:05:26.63,english,,0,0,0,,So I can at least optimize slightly.
Dialogue: 0,1:05:24.95,1:05:26.63,chinese,,0,0,0,,这里稍微优化了一下。
Dialogue: 0,1:05:26.63,1:05:27.97,english,,0,0,0,,So now 5 is small.
Dialogue: 0,1:05:26.63,1:05:27.97,chinese,,0,0,0,,现在 5 是最小的。
Dialogue: 0,1:05:27.97,1:05:28.72,english,,0,0,0,,6 is small.
Dialogue: 0,1:05:27.97,1:05:28.72,chinese,,0,0,0,,6 没有。
Dialogue: 0,1:05:28.72,1:05:30.16,english,,0,0,0,,7 is 4, 4 is smaller.
Dialogue: 0,1:05:28.72,1:05:30.16,chinese,,0,0,0,,4 更小。
Dialogue: 0,1:05:30.16,1:05:33.08,english,,0,0,0,,If you want to go in place there.
Dialogue: 0,1:05:30.16,1:05:33.08,chinese,,0,0,0,,你可以去那里了。
Dialogue: 0,1:05:33.08,1:05:34.81,english,,0,0,0,,And now, here things get interesting.
Dialogue: 0,1:05:33.08,1:05:34.81,chinese,,0,0,0,,现在，事情有点意思了。
Dialogue: 0,1:05:34.81,1:05:39.34,english,,0,0,0,,I can optimize by not looking at these folks anymore, because they're obviously problem solved.
Dialogue: 0,1:05:34.81,1:05:39.34,chinese,,0,0,0,,前面还是可以不用管，因为他们显然已经找到了自己的正确位置。
Dialogue: 0,1:05:39.34,1:05:42.97,english,,0,0,0,,But now 5 is small, 6 is not, 7 is not.
Dialogue: 0,1:05:39.34,1:05:42.97,chinese,,0,0,0,,现在最小的是 5，不是 6，也不是 7。
Dialogue: 0,1:05:42.97,1:05:45.01,english,,0,0,0,,OK, 5, you can stay where you are.
Dialogue: 0,1:05:42.97,1:05:45.01,chinese,,0,0,0,,好了，5 号，你留在原地就行。
Dialogue: 0,1:05:45.01,1:05:49.42,english,,0,0,0,,Now, a human in the room is obviously going to question why I'm wasting any more time.
Dialogue: 0,1:05:45.01,1:05:49.42,chinese,,0,0,0,,现在，可能大伙会质疑我为什么还要浪费时间，不是已经排好了吗。
Dialogue: 0,1:05:49.42,1:05:52.09,english,,0,0,0,,But with selection sort, as I've defined it thus far,
Dialogue: 0,1:05:49.42,1:05:52.09,chinese,,0,0,0,,但是，按照定义来说，选择排序必须要走完（现在是一种比较好的情况），
Dialogue: 0,1:05:52.09,1:05:55.84,english,,0,0,0,,I still have to, now, check 6 is smallest, not 7.
Dialogue: 0,1:05:52.09,1:05:55.84,chinese,,0,0,0,,现在还得检查 6 是最小的，而不是 7。
Dialogue: 0,1:05:55.84,1:05:58.52,english,,0,0,0,,And now my final step, OK, they're all in place.
Dialogue: 0,1:05:55.84,1:05:58.52,chinese,,0,0,0,,最后一步看 7，好了，一切就位。
Dialogue: 0,1:05:58.52,1:06:05.06,english,,0,0,0,,So here, too, is this dichotomy between what we all have is this bird's eye view of the whole problem, where it's obvious where everyone needs to go.
Dialogue: 0,1:05:58.52,1:06:05.06,chinese,,0,0,0,,所以，这里存在着一种对立的视角，\N如果我们都从鸟瞰的角度来看待整个问题，显然每个人需要去哪里一目了然。
Dialogue: 0,1:06:05.06,1:06:09.13,english,,0,0,0,,But a computer implementing this with an array really has to be more methodical.
Dialogue: 0,1:06:05.06,1:06:09.13,chinese,,0,0,0,,但是，计算机里面的数组没法兼顾全局，必须更加有条不紊地步步执行。
Dialogue: 0,1:06:05.06,1:06:09.13,annotation,,0,0,0,,*注：好好想想 David 这里传递的思想。
Dialogue: 0,1:06:09.13,1:06:10.72,english,,0,0,0,,And we're actually saving a step here.
Dialogue: 0,1:06:09.13,1:06:10.72,chinese,,0,0,0,,其实我们在这里省了一个步骤。
Dialogue: 0,1:06:10.72,1:06:13.78,english,,0,0,0,,If we were really doing this, none of these numbers would be visible.
Dialogue: 0,1:06:10.72,1:06:13.78,chinese,,0,0,0,,如果我们真的这样做了，这些数字就都看不到了。
Dialogue: 0,1:06:13.78,1:06:16.84,english,,0,0,0,,All eight of our volunteers would be inside of a locked door.
Dialogue: 0,1:06:13.78,1:06:16.84,chinese,,0,0,0,,我们的八名志愿者，每位都会关进一扇上锁的门。
Dialogue: 0,1:06:16.84,1:06:19.22,english,,0,0,0,,And only then could we see them one at a time.
Dialogue: 0,1:06:16.84,1:06:19.22,chinese,,0,0,0,,这样，我们一次只能看到他们里的一个，没法从全局把握。
Dialogue: 0,1:06:19.22,1:06:21.67,english,,0,0,0,,But we're focusing now just on the sorting aspect.
Dialogue: 0,1:06:19.22,1:06:21.67,chinese,,0,0,0,,我们现在只关注排序方面。
Dialogue: 0,1:06:21.67,1:06:29.62,english,,0,0,0,,So let me just, before we do one other demonstration here, propose that what I really just did here in pseudocode was something like this.
Dialogue: 0,1:06:21.67,1:06:29.62,chinese,,0,0,0,,所以，在做别的演示之前，我来推出刚才表演的伪代码描述。
Dialogue: 0,1:06:29.62,1:06:38.11,english,,0,0,0,,For i from 0 to n minus 1, keeping in mind that 0 is always the left of the array. n minus 1 is always the right end of the array.
Dialogue: 0,1:06:29.62,1:06:38.11,chinese,,0,0,0,,for i from 0 to n-1，记住 0 总是数组的左端，n-1 总是数组的右端。
Dialogue: 0,1:06:38.11,1:06:45.73,english,,0,0,0,,For i from 0 to n minus 1, I found the smallest number between numbers bracket i and numbers bracket n minus 1.
Dialogue: 0,1:06:38.11,1:06:45.73,chinese,,0,0,0,,for i from 0 to n-1，我找到了 numbers[i] 和 numbers[n-1] 之间的最小数字。
Dialogue: 0,1:06:45.73,1:06:48.61,english,,0,0,0,,And that's the very geeky way of expressing this optimization.
Dialogue: 0,1:06:45.73,1:06:48.61,chinese,,0,0,0,,这就是一种抽象过的代码描述。
Dialogue: 0,1:06:48.61,1:06:51.49,english,,0,0,0,,I'm always starting from numbers bracket i wherever I am.
Dialogue: 0,1:06:48.61,1:06:51.49,chinese,,0,0,0,,无论排序几个了，我总是从 numbers[i] 开始。
Dialogue: 0,1:06:51.49,1:06:53.20,english,,0,0,0,,And then everything else to the right.
Dialogue: 0,1:06:51.49,1:06:53.20,chinese,,0,0,0,,然后往右边看所有的。
Dialogue: 0,1:06:53.20,1:06:56.89,english,,0,0,0,,And that's what was allowing me to ignore the already sorted volunteers.
Dialogue: 0,1:06:53.20,1:06:56.89,chinese,,0,0,0,,这样就忽略掉了已经排序的志愿者。
Dialogue: 0,1:06:56.89,1:07:05.47,english,,0,0,0,,If, though, my last line says swap smallest number with numbers i, think that implements what our humans were doing by physically walking to another spot.
Dialogue: 0,1:06:56.89,1:07:05.47,chinese,,0,0,0,,在伪代码的最后一行里面，我说要交换 numbers[i] 和最小的数字，\N就是刚才我们人工演示里做的走到另一个位置。
Dialogue: 0,1:07:05.47,1:07:09.22,english,,0,0,0,,All right, so that, then, would be what we'll call selection sort.
Dialogue: 0,1:07:05.47,1:07:09.22,chinese,,0,0,0,,好了，这就是我们说的选择排序。
Dialogue: 0,1:07:09.22,1:07:13.36,english,,0,0,0,,Let's go ahead and take a second approach here using an algorithm that I'm going to call bubble sort.
Dialogue: 0,1:07:09.22,1:07:13.36,chinese,,0,0,0,,现在来介绍第二种方法，叫做冒泡排序。
Dialogue: 0,1:07:13.36,1:07:16.09,english,,0,0,0,,But to do this, we need you all to reset to your original locations.
Dialogue: 0,1:07:13.36,1:07:16.09,chinese,,0,0,0,,在开始以前，需要你们全部重置到原来的位置。
Dialogue: 0,1:07:16.09,1:07:19.75,english,,0,0,0,,We have a little cheat sheet on the board if you'd like to go back to this position here.
Dialogue: 0,1:07:16.09,1:07:19.75,chinese,,0,0,0,,看黑板上有你们刚才位置的记录。
Dialogue: 0,1:07:19.75,1:07:26.78,english,,0,0,0,,And let me take a fundamentally different approach, because I'm not really liking selection sort as is, because it's kind of a lot of walking back and forth.
Dialogue: 0,1:07:19.75,1:07:26.78,chinese,,0,0,0,,这种算法截然不同，因为我不太喜欢现在的选择排序，要来回走动。
Dialogue: 0,1:07:26.78,1:07:30.62,english,,0,0,0,,And the lot of walking suggests a lot of, lot of steps again and again.
Dialogue: 0,1:07:26.78,1:07:30.62,chinese,,0,0,0,,而走了很多路，就意味着要运算很多很多步。
Dialogue: 0,1:07:30.62,1:07:32.09,english,,0,0,0,,So what might I do instead?
Dialogue: 0,1:07:30.62,1:07:32.09,chinese,,0,0,0,,那我该怎么做呢？
Dialogue: 0,1:07:32.09,1:07:36.73,english,,0,0,0,,Well, bubble sort is going to have me focus a little more intuitively on just smaller problems.
Dialogue: 0,1:07:32.09,1:07:36.73,chinese,,0,0,0,,嗯，冒泡排序会更直观地关注一些小问题。
Dialogue: 0,1:07:36.73,1:07:38.60,english,,0,0,0,,And let's see if this gets me somewhere else.
Dialogue: 0,1:07:36.73,1:07:38.60,chinese,,0,0,0,,让我们看看能不能带来一些进展。
Dialogue: 0,1:07:38.60,1:07:43.67,english,,0,0,0,,So if I just look at this list without looking at everyone else, 7 and 2, this is obviously a problem.
Dialogue: 0,1:07:38.60,1:07:43.67,chinese,,0,0,0,,如果我不看这个列表里面其他的，只关注 7 和 2，这显然有问题。
Dialogue: 0,1:07:43.67,1:07:44.17,english,,0,0,0,,Why?
Dialogue: 0,1:07:44.17,1:07:45.50,english,,0,0,0,,Because you're out of order.
Dialogue: 0,1:07:44.17,1:07:45.50,chinese,,0,0,0,,因为顺序不对。
Dialogue: 0,1:07:45.50,1:07:47.81,english,,0,0,0,,So let's just solve one tiny problem first.
Dialogue: 0,1:07:45.50,1:07:47.81,chinese,,0,0,0,,所以，我们先把这个小问题解决掉。
Dialogue: 0,1:07:47.81,1:07:49.57,english,,0,0,0,,So 7 and 2, why don't you swap?
Dialogue: 0,1:07:47.81,1:07:49.57,chinese,,0,0,0,,7 和 2 两位，你们交换一下？
Dialogue: 0,1:07:49.57,1:07:54.16,english,,0,0,0,,I know 2 is in a better place now, because she's definitely less than 7.
Dialogue: 0,1:07:49.57,1:07:54.16,chinese,,0,0,0,,我知道 2 号的位置更加接近正确，因为 2 比 7 号小是必然的。
Dialogue: 0,1:07:54.16,1:07:55.54,english,,0,0,0,,So I think I can now move on.
Dialogue: 0,1:07:54.16,1:07:55.54,chinese,,0,0,0,,所以，我们接着往后看。
Dialogue: 0,1:07:55.54,1:07:57.35,english,,0,0,0,,7 and 5, problem.
Dialogue: 0,1:07:55.54,1:07:57.35,chinese,,0,0,0,,7 和 5，是个问题。
Dialogue: 0,1:07:57.35,1:07:58.39,english,,0,0,0,,So let's solve that.
Dialogue: 0,1:07:57.35,1:07:58.39,chinese,,0,0,0,,我们来解决一下。
Dialogue: 0,1:07:58.39,1:07:59.83,english,,0,0,0,,7 and 4, problem.
Dialogue: 0,1:07:58.39,1:07:59.83,chinese,,0,0,0,,7 和 4，有问题。
Dialogue: 0,1:07:59.83,1:08:02.38,english,,0,0,0,,Let's solve that, 7 and 1, let's solve that.
Dialogue: 0,1:07:59.83,1:08:02.38,chinese,,0,0,0,,交换一下。7 和 1，交换一下。
Dialogue: 0,1:08:02.38,1:08:03.97,english,,0,0,0,,7 and 6, let's solve that.
Dialogue: 0,1:08:02.38,1:08:03.97,chinese,,0,0,0,,7 和 6，交换一下。
Dialogue: 0,1:08:03.97,1:08:05.08,english,,0,0,0,,7 and 0, solve that.
Dialogue: 0,1:08:03.97,1:08:05.08,chinese,,0,0,0,,7 和 0，交换一下。
Dialogue: 0,1:08:05.08,1:08:06.55,english,,0,0,0,,7 and 3, solve that.
Dialogue: 0,1:08:05.08,1:08:06.55,chinese,,0,0,0,,7 和 3，交换一下。
Dialogue: 0,1:08:06.55,1:08:07.33,english,,0,0,0,,OK, done.
Dialogue: 0,1:08:07.33,1:08:09.13,english,,0,0,0,,Sorted, right?
Dialogue: 0,1:08:07.33,1:08:09.13,chinese,,0,0,0,,排序好了，对吗？
Dialogue: 0,1:08:09.13,1:08:11.78,english,,0,0,0,,Or obviously not, if you just glance at these numbers here.
Dialogue: 0,1:08:09.13,1:08:11.78,chinese,,0,0,0,,你们看一眼就知道，显然还没有。
Dialogue: 0,1:08:11.78,1:08:14.53,english,,0,0,0,,But we have, fundamentally, taken a bite out of the problem.
Dialogue: 0,1:08:11.78,1:08:14.53,chinese,,0,0,0,,但从根本上讲，我们已经解决了一个问题。
Dialogue: 0,1:08:14.53,1:08:17.02,english,,0,0,0,,7 is indeed in the right place.
Dialogue: 0,1:08:14.53,1:08:17.02,chinese,,0,0,0,,7 到达了正确的位置。
Dialogue: 0,1:08:17.02,1:08:21.17,english,,0,0,0,,So we maximally have n minus 1 other problems to solve.
Dialogue: 0,1:08:17.02,1:08:21.17,chinese,,0,0,0,,所以，我们最多还有 n-1 个其他问题需要解决。
Dialogue: 0,1:08:21.17,1:08:23.66,english,,0,0,0,,So how do I do this?
Dialogue: 0,1:08:21.17,1:08:23.66,chinese,,0,0,0,,我们要怎么做呢？
Dialogue: 0,1:08:23.66,1:08:25.70,english,,0,0,0,,I think I can just repeat the same logic.
Dialogue: 0,1:08:23.66,1:08:25.70,chinese,,0,0,0,,我想可以重复同样的逻辑。
Dialogue: 0,1:08:25.70,1:08:26.77,english,,0,0,0,,Let me go over here.
Dialogue: 0,1:08:25.70,1:08:26.77,chinese,,0,0,0,,让我到最开始的地方来。
Dialogue: 0,1:08:26.77,1:08:28.21,english,,0,0,0,,2 and 5, good.
Dialogue: 0,1:08:26.77,1:08:28.21,chinese,,0,0,0,,2 和 5，对的。
Dialogue: 0,1:08:28.21,1:08:29.80,english,,0,0,0,,5 and 4, no.
Dialogue: 0,1:08:28.21,1:08:29.80,chinese,,0,0,0,,5 和 4，不对。
Dialogue: 0,1:08:29.80,1:08:31.33,english,,0,0,0,,5 and 1, no.
Dialogue: 0,1:08:29.80,1:08:31.33,chinese,,0,0,0,,5 和 1，不对。
Dialogue: 0,1:08:31.33,1:08:32.59,english,,0,0,0,,5 and 6, yes.
Dialogue: 0,1:08:31.33,1:08:32.59,chinese,,0,0,0,,5 和 6，没错。
Dialogue: 0,1:08:32.59,1:08:34.66,english,,0,0,0,,6 and 0, no.
Dialogue: 0,1:08:32.59,1:08:34.66,chinese,,0,0,0,,6 和 0，不行。
Dialogue: 0,1:08:34.66,1:08:36.76,english,,0,0,0,,6 and 3, no.
Dialogue: 0,1:08:34.66,1:08:36.76,chinese,,0,0,0,,6 和 3，不行。
Dialogue: 0,1:08:36.76,1:08:39.19,english,,0,0,0,,So now we've solved two of the problems.
Dialogue: 0,1:08:36.76,1:08:39.19,chinese,,0,0,0,,现在我们已经解决了两个问题。
Dialogue: 0,1:08:39.19,1:08:42.70,english,,0,0,0,,And what's nice about bubble sort, at least as this glance, it's nice and simple.
Dialogue: 0,1:08:39.19,1:08:42.70,chinese,,0,0,0,,冒泡排序的好处是，至少从这个角度来看，好用又简单。
Dialogue: 0,1:08:42.70,1:08:43.54,english,,0,0,0,,It's nice and local.
Dialogue: 0,1:08:42.70,1:08:43.54,chinese,,0,0,0,,非常好使，而且每次都只关注局部。
Dialogue: 0,1:08:43.54,1:08:46.51,english,,0,0,0,,And you just keep incrementally solving more and more problems.
Dialogue: 0,1:08:43.54,1:08:46.51,chinese,,0,0,0,,我们只是一步一步地解决越来越多的问题。
Dialogue: 0,1:08:46.51,1:08:48.01,english,,0,0,0,,So let's go ahead and do this again.
Dialogue: 0,1:08:46.51,1:08:48.01,chinese,,0,0,0,,我们再来一次。
Dialogue: 0,1:08:48.01,1:08:50.08,english,,0,0,0,,And I'll do it-- we can do it faster.
Dialogue: 0,1:08:48.01,1:08:50.08,chinese,,0,0,0,,这次做快一点。
Dialogue: 0,1:08:50.08,1:08:51.76,english,,0,0,0,,2 and 4, we know are good.
Dialogue: 0,1:08:50.08,1:08:51.76,chinese,,0,0,0,,2 和 4，没问题。
Dialogue: 0,1:08:51.76,1:08:59.20,english,,0,0,0,,4 and 1, 4 and 5, 5 and 0, 5 and 3, 5 and 6, 6 and 7, good.
Dialogue: 0,1:08:51.76,1:08:59.20,chinese,,0,0,0,,4 和 1、4 和 5、5 和 0、5 和 3、5 和 6、6 和 7，很好。
Dialogue: 0,1:08:59.20,1:09:01.39,english,,0,0,0,,So we go back, 2 and 1.
Dialogue: 0,1:08:59.20,1:09:01.39,chinese,,0,0,0,,所以我们倒回去看，2 和 1。
Dialogue: 0,1:09:01.39,1:09:03.34,english,,0,0,0,,Ah, now another problem solve.
Dialogue: 0,1:09:01.39,1:09:03.34,chinese,,0,0,0,,啊，现在又能解决一个问题。
Dialogue: 0,1:09:03.34,1:09:09.93,english,,0,0,0,,2, and 4, 4 and 0, 4 and 3, 4 and 5, 5 and 6, 6 and 7.
Dialogue: 0,1:09:09.93,1:09:14.89,english,,0,0,0,,And so notice too, as per its name, the largest elements have bubbled their way up to the top.
Dialogue: 0,1:09:09.93,1:09:14.89,chinese,,0,0,0,,注意了，正如冒泡排序的名字，最大的元素已经浮出水面（最右边）。
Dialogue: 0,1:09:14.89,1:09:18.34,english,,0,0,0,,And that's what seems to be happening just as we're fixing some remaining problems.
Dialogue: 0,1:09:14.89,1:09:18.34,chinese,,0,0,0,,就是这样的步骤，我们一步步会解决剩下的问题。
Dialogue: 0,1:09:18.34,1:09:19.12,english,,0,0,0,,So almost done.
Dialogue: 0,1:09:18.34,1:09:19.12,chinese,,0,0,0,,差不多快完成了。
Dialogue: 0,1:09:19.12,1:09:27.55,english,,0,0,0,,1 and 2, 2 and 0, 2 and 3, 3 and 4, 4 and 5, 5 and 6, 6 and 7, almost done.
Dialogue: 0,1:09:19.12,1:09:27.55,chinese,,0,0,0,,1 和 2、2 和 0、2 和 3、3 和 4、4 和 5、5 和 6、6 和 7，完成了。
Dialogue: 0,1:09:27.55,1:09:29.83,english,,0,0,0,,Obviously, to us humans, it looks done.
Dialogue: 0,1:09:27.55,1:09:29.83,chinese,,0,0,0,,显然，对我们人类来说，它看起来已经完成了。
Dialogue: 0,1:09:29.83,1:09:32.52,english,,0,0,0,,How do I know as the computer for sure?
Dialogue: 0,1:09:29.83,1:09:32.52,chinese,,0,0,0,,作为计算机，我怎么确定？
Dialogue: 0,1:09:32.52,1:09:36.37,english,,0,0,0,,What would be the most surefire way for me to now go, it's not done, sorry.
Dialogue: 0,1:09:32.52,1:09:36.37,chinese,,0,0,0,,有什么万无一失的办法能让我现在确定一切结束？噢，不好意思捏。
Dialogue: 0,1:09:36.37,1:09:38.08,english,,0,0,0,,That's a bug.
Dialogue: 0,1:09:36.37,1:09:38.08,chinese,,0,0,0,,这里有个 bug。
Dialogue: 0,1:09:38.08,1:09:43.39,english,,0,0,0,,OK, 1 and 0, 1 and 2, 2 and 3, 3 and 4, 4 and 5, 5 and 6, 6 and 7.
Dialogue: 0,1:09:38.08,1:09:43.39,chinese,,0,0,0,,好，1 和 0、1 和 2、2 和 3、3 和 4、4 和 5、5 和 6、6 和 7。
Dialogue: 0,1:09:43.39,1:09:47.89,english,,0,0,0,,OK, so now it's obviously sorted to the rest of us on stage.
Dialogue: 0,1:09:43.39,1:09:47.89,chinese,,0,0,0,,好了，现在应该都排好序了。
Dialogue: 0,1:09:47.89,1:09:50.29,english,,0,0,0,,How could I confirm as much as code?
Dialogue: 0,1:09:47.89,1:09:50.29,chinese,,0,0,0,,我怎么从代码上进行确认？
Dialogue: 0,1:09:50.29,1:09:52.67,english,,0,0,0,,You're doing it with your mind, just glancing at this.
Dialogue: 0,1:09:50.29,1:09:52.67,chinese,,0,0,0,,你只是瞥了一眼，就自然地知道了。
Dialogue: 0,1:09:52.67,1:09:56.08,english,,0,0,0,,How would the computer, the code, know for sure that this list is now sorted?
Dialogue: 0,1:09:52.67,1:09:56.08,chinese,,0,0,0,,计算机怎么确定列表已经排序？
Dialogue: 0,1:09:56.08,1:09:57.00,english,,0,0,0,,Yeah.
Dialogue: 0,1:09:57.00,1:09:58.50,english,,0,0,0,,STUDENT: [INAUDIBLE] one more time.
Dialogue: 0,1:09:57.00,1:09:58.50,chinese,,0,0,0,,学生：...再来一次。
Dialogue: 0,1:09:58.50,1:10:00.00,english,,0,0,0,,DAVID MALAN: Let's do one more time.
Dialogue: 0,1:09:58.50,1:10:00.00,chinese,,0,0,0,,我们再来走一次。
Dialogue: 0,1:10:00.00,1:10:03.51,english,,0,0,0,,And look, draw what conclusion?
Dialogue: 0,1:10:00.00,1:10:03.51,chinese,,0,0,0,,然后能得出什么结论呢？
Dialogue: 0,1:10:03.51,1:10:05.49,english,,0,0,0,,STUDENT: That nothing has to switch at all.
Dialogue: 0,1:10:03.51,1:10:05.49,chinese,,0,0,0,,学生：什么都不用交换。
Dialogue: 0,1:10:05.49,1:10:08.86,english,,0,0,0,,DAVID MALAN: Yeah, let's do it one more time, even though it's a little wasteful.
Dialogue: 0,1:10:05.49,1:10:08.86,chinese,,0,0,0,,是啊，我们再来一次吧，虽然有点浪费。
Dialogue: 0,1:10:08.86,1:10:19.13,english,,0,0,0,,But logically, if I go through the whole list comparing pairs again, again, and again, and I don't do any work that time, now it's obviously logically safe to just stop, because otherwise, I'm
Dialogue: 0,1:10:08.86,1:10:19.13,chinese,,0,0,0,,但从逻辑上讲，如果我一遍又一遍地在列表里面比较、交换，\N而这一次我什么都不用交换，那显然从逻辑上现在停止是没问题的，
Dialogue: 0,1:10:19.13,1:10:22.93,english,,0,0,0,,wasting my time doing the same thing again and again if no one's actually moving.
Dialogue: 0,1:10:19.13,1:10:22.93,chinese,,0,0,0,,因为没有需要移动的元素了，如果不停止就是在浪费时间一遍又一遍地循环。
Dialogue: 0,1:10:22.93,1:10:25.35,english,,0,0,0,,So I'm afraid we don't have monopoly games for all of you.
Dialogue: 0,1:10:22.93,1:10:25.35,chinese,,0,0,0,,可惜我们没有给你们所有人准备大富翁游戏。
Dialogue: 0,1:10:25.35,1:10:26.76,english,,0,0,0,,But we do have eight stress balls.
Dialogue: 0,1:10:25.35,1:10:26.76,chinese,,0,0,0,,不过确实有八个压力球分给大家。
Dialogue: 0,1:10:26.76,1:10:30.09,english,,0,0,0,,And round of applause, if we could, for our volunteers.
Dialogue: 0,1:10:26.76,1:10:30.09,chinese,,0,0,0,,掌声送给我们的志愿者们。
Dialogue: 0,1:10:30.09,1:10:33.91,english,,0,0,0,,If you want to put your numbers on the shelf there.
Dialogue: 0,1:10:30.09,1:10:33.91,chinese,,0,0,0,,请大家把数字放在架子上。
Dialogue: 0,1:10:33.91,1:10:36.72,english,,0,0,0,,So if we consider for a moment-- thank you.
Dialogue: 0,1:10:33.91,1:10:36.72,chinese,,0,0,0,,所以，我们来考虑一下... 谢谢你们。
Dialogue: 0,1:10:36.72,1:10:39.34,english,,0,0,0,,Thank you so much.
Dialogue: 0,1:10:36.72,1:10:39.34,chinese,,0,0,0,,非常感谢。
Dialogue: 0,1:10:39.34,1:10:42.15,english,,0,0,0,,Sure.
Dialogue: 0,1:10:42.15,1:10:43.17,english,,0,0,0,,Thank you.
Dialogue: 0,1:10:43.17,1:10:44.23,english,,0,0,0,,Thanks.
Dialogue: 0,1:10:44.23,1:10:44.73,english,,0,0,0,,Sure.
Dialogue: 0,1:10:44.73,1:10:48.87,english,,0,0,0,,So if we consider now these two algorithms, which one is better?
Dialogue: 0,1:10:44.73,1:10:48.87,chinese,,0,0,0,,那么，我们现在来考虑一下这两种算法，哪一种更好呢？
Dialogue: 0,1:10:48.87,1:10:55.95,english,,0,0,0,,Any intuition for whether selection sort the first is better or worse than bubble sort the second?
Dialogue: 0,1:10:48.87,1:10:55.95,chinese,,0,0,0,,第一种是选择排序，第二种是冒泡排序，大家有没有什么直观的印象好或者不好？
Dialogue: 0,1:10:55.95,1:10:58.02,english,,0,0,0,,Any thoughts?
Dialogue: 0,1:10:55.95,1:10:58.02,chinese,,0,0,0,,有想法吗？
Dialogue: 0,1:10:58.02,1:10:58.86,english,,0,0,0,,Yeah.
Dialogue: 0,1:10:58.86,1:11:03.62,english,,0,0,0,,STUDENT: Bubble sort's even better because it's less work [INAUDIBLE]..
Dialogue: 0,1:10:58.86,1:11:03.62,chinese,,0,0,0,,冒泡排序更好一点，因为它...
Dialogue: 0,1:11:03.62,1:11:08.93,english,,0,0,0,,DAVID MALAN: So bubble sort seems like less work, especially since I was focusing on those localized problems.
Dialogue: 0,1:11:03.62,1:11:08.93,chinese,,0,0,0,,所以说，冒泡排序似乎更省事，我们每次都专注于解决局部的问题。
Dialogue: 0,1:11:08.93,1:11:11.46,english,,0,0,0,,Other intuition?
Dialogue: 0,1:11:08.93,1:11:11.46,chinese,,0,0,0,,还有想法吗？
Dialogue: 0,1:11:11.46,1:11:14.58,english,,0,0,0,,Selection sort versus bubble sort.
Dialogue: 0,1:11:11.46,1:11:14.58,chinese,,0,0,0,,选择排序与冒泡排序。
Dialogue: 0,1:11:14.58,1:11:19.42,english,,0,0,0,,Well, let me propose that we try to quantize this so we can actually analyze it in some way.
Dialogue: 0,1:11:14.58,1:11:19.42,chinese,,0,0,0,,好吧，我提议来试着量化这两种算法，这样我们就能不凭感觉而是根据实际分析了。
Dialogue: 0,1:11:19.42,1:11:22.59,english,,0,0,0,,And this is not an exercise we'll do constantly for lots of algorithms.
Dialogue: 0,1:11:19.42,1:11:22.59,chinese,,0,0,0,,而且，这也不是我们为大量算法不断进行的练习。
Dialogue: 0,1:11:22.59,1:11:24.94,english,,0,0,0,,But these are pretty representative of algorithms.
Dialogue: 0,1:11:22.59,1:11:24.94,chinese,,0,0,0,,但这些算法都很有代表性。
Dialogue: 0,1:11:24.94,1:11:28.96,english,,0,0,0,,So we can wrap our minds around, indeed, the performance or the design of these things.
Dialogue: 0,1:11:24.94,1:11:28.96,chinese,,0,0,0,,因此，我们可以对这些东西的性能或设计进行思考。
Dialogue: 0,1:11:28.96,1:11:34.35,english,,0,0,0,,So here is my pseudocode for selection sort, whereby as per its name,
Dialogue: 0,1:11:28.96,1:11:34.35,chinese,,0,0,0,,下面是我的选择排序伪代码，正如它的名字一样、
Dialogue: 0,1:11:34.35,1:11:38.50,english,,0,0,0,,I just iteratively select the next smallest element again and again.
Dialogue: 0,1:11:34.35,1:11:38.50,chinese,,0,0,0,,我只是反复选择下一个最小的元素。
Dialogue: 0,1:11:38.50,1:11:41.89,english,,0,0,0,,So how can we go about analyzing something like this?
Dialogue: 0,1:11:38.50,1:11:41.89,chinese,,0,0,0,,那么，我们该怎么对这样的事情进行分析呢？
Dialogue: 0,1:11:41.89,1:11:48.03,english,,0,0,0,,Well, we could just do it on paper pencil and count up the number of steps that seem to be implied logically by the code.
Dialogue: 0,1:11:41.89,1:11:48.03,chinese,,0,0,0,,好吧，我们可以用纸笔来做，然后数一数代码中逻辑上似乎隐含的步骤数。
Dialogue: 0,1:11:48.03,1:11:52.89,english,,0,0,0,,We could literally count the number of steps I was taking again and again, left to right.
Dialogue: 0,1:11:48.03,1:11:52.89,chinese,,0,0,0,,我们简直可以数出我从左到右一次又一次走了多少步。
Dialogue: 0,1:11:52.89,1:11:55.83,english,,0,0,0,,We could also just count the number of comparisons
Dialogue: 0,1:11:52.89,1:11:55.83,chinese,,0,0,0,,我们也可以只计算比较的次数
Dialogue: 0,1:11:55.83,1:11:58.30,english,,0,0,0,,I was making with each of the persons involved.
Dialogue: 0,1:11:55.83,1:11:58.30,chinese,,0,0,0,,我和每个相关人员都在一起工作。
Dialogue: 0,1:11:58.30,1:12:00.51,english,,0,0,0,,And I was doing it kind of quickly in selection sort.
Dialogue: 0,1:11:58.30,1:12:00.51,chinese,,0,0,0,,在选择排序时，我做得有点快。
Dialogue: 0,1:12:00.51,1:12:04.95,english,,0,0,0,,But every time I was looking at a person trying to decide, do I want to remember that number is smallest?
Dialogue: 0,1:12:00.51,1:12:04.95,chinese,,0,0,0,,但每当我看着一个人做出决定时，我是否要记住那个数字是最小的？
Dialogue: 0,1:12:04.95,1:12:11.70,english,,0,0,0,,That number, I was comparing two values with an equals equals or less than or greater than sign, at least if we had done this in code.
Dialogue: 0,1:12:04.95,1:12:11.70,chinese,,0,0,0,,那个数字，我是在用等号或小于号或大于号比较两个值，至少如果我们在代码中这样做的话是这样。
Dialogue: 0,1:12:11.70,1:12:13.11,english,,0,0,0,,So that tends to be the norm.
Dialogue: 0,1:12:11.70,1:12:13.11,chinese,,0,0,0,,因此，这往往是常态。
Dialogue: 0,1:12:13.11,1:12:23.49,english,,0,0,0,,When analyzing algorithms like these, counting the number of comparisons, because it's kind of a global unit of measure we can use to compare different algorithms entirely.
Dialogue: 0,1:12:13.11,1:12:23.49,chinese,,0,0,0,,在分析类似算法时，我们需要计算比较次数，因为它是一种全局衡量单位，我们可以用它来比较不同的算法。
Dialogue: 0,1:12:23.49,1:12:35.22,english,,0,0,0,,So think, too, that in the general case, when we have more than eight volunteers, more than seven doors, we can generalize our array in general, as this is the first element at bracket 0.
Dialogue: 0,1:12:23.49,1:12:35.22,chinese,,0,0,0,,因此，我们也要想一想，在一般情况下，当我们有超过 8 个志愿者、超过 7 扇门时，我们可以将我们的数组一般化，因为这是括号 0 中的第一个元素。
Dialogue: 0,1:12:35.22,1:12:37.77,english,,0,0,0,,And the end of it is always n minus 1.
Dialogue: 0,1:12:35.22,1:12:37.77,chinese,,0,0,0,,其末尾总是 n 减 1。
Dialogue: 0,1:12:37.77,1:12:47.20,english,,0,0,0,,So arrays or doors, in this case, or volunteers, are always numerically indexed from 0 on up to n minus 1, if there's n of them in total.
Dialogue: 0,1:12:37.77,1:12:47.20,chinese,,0,0,0,,因此，数组或门（在本例中为志愿者）的数字索引总是从 0 到 n 减 1（如果总共有 n 个）。
Dialogue: 0,1:12:47.20,1:12:50.94,english,,0,0,0,,So how do we analyze the code of selection sort?
Dialogue: 0,1:12:47.20,1:12:50.94,chinese,,0,0,0,,那么，我们该怎么分析选择排序的代码呢？
Dialogue: 0,1:12:50.94,1:12:56.37,english,,0,0,0,,Well, how many steps did it take me to find the first smallest element?
Dialogue: 0,1:12:50.94,1:12:56.37,chinese,,0,0,0,,那么，我花了多少步才找到第一个最小元素？
Dialogue: 0,1:12:56.37,1:13:06.10,english,,0,0,0,,Or more precisely, how many comparisons did I need to make when I walked to left to right to find our first-smallest person, which ended up being 0?
Dialogue: 0,1:12:56.37,1:13:06.10,chinese,,0,0,0,,或者更准确地说，当我从左到右寻找我们的第一个最小的人时，我需要进行多少次比较，最后结果是 0？
Dialogue: 0,1:13:06.10,1:13:09.31,english,,0,0,0,,How many comparisons did I do when walking left to right?
Dialogue: 0,1:13:06.10,1:13:09.31,chinese,,0,0,0,,我从左到右走了多少次？
Dialogue: 0,1:13:09.31,1:13:15.85,english,,0,0,0,,If there were eight people on stage, how many total comparisons that I do?
Dialogue: 0,1:13:09.31,1:13:15.85,chinese,,0,0,0,,如果台上有八个人，我一共做了多少次比较？
Dialogue: 0,1:13:15.85,1:13:18.28,english,,0,0,0,,Like if there's eight people, I compared these folks.
Dialogue: 0,1:13:15.85,1:13:18.28,chinese,,0,0,0,,比如说，如果有八个人，我就把这些人比下去。
Dialogue: 0,1:13:18.28,1:13:22.21,english,,0,0,0,,Then this person, this person, yeah.
Dialogue: 0,1:13:18.28,1:13:22.21,chinese,,0,0,0,,然后这个人，这个人，是的。
Dialogue: 0,1:13:22.21,1:13:23.41,english,,0,0,0,,Yeah, so seven total, right?
Dialogue: 0,1:13:22.21,1:13:23.41,chinese,,0,0,0,,是的，一共七个，对吗？
Dialogue: 0,1:13:23.41,1:13:29.96,english,,0,0,0,,Because if there's eight people on stage, you can only do seven comparisons total, because otherwise you'd be comparing one number to itself.
Dialogue: 0,1:13:23.41,1:13:29.96,chinese,,0,0,0,,因为如果台上有八个人，你一共只能进行七次比较，否则你就会把一个数字和它自己进行比较。
Dialogue: 0,1:13:29.96,1:13:38.56,english,,0,0,0,,So it seems like, in the general case, if you've got n numbers that you're trying to sort, finding the smallest element first takes n minus 1 comparisons.
Dialogue: 0,1:13:29.96,1:13:38.56,chinese,,0,0,0,,因此，在一般情况下，如果要对 n 个数字进行排序，首先找到最小的元素需要进行 n 减 1 的比较。
Dialogue: 0,1:13:38.56,1:13:41.27,english,,0,0,0,,Maybe n total steps left to right.
Dialogue: 0,1:13:38.56,1:13:41.27,chinese,,0,0,0,,也许从左到右共有 n 个台阶。
Dialogue: 0,1:13:41.27,1:13:46.03,english,,0,0,0,,But the number of comparisons, which I claim, is just a useful unit of measure, is n minus 1.
Dialogue: 0,1:13:41.27,1:13:46.03,chinese,,0,0,0,,但比较的次数，我认为只是一个有用的度量单位，是 n 减 1。
Dialogue: 0,1:13:46.03,1:13:48.49,english,,0,0,0,,How about finding the next smallest person?
Dialogue: 0,1:13:46.03,1:13:48.49,chinese,,0,0,0,,找到下一个最小的人怎么样？
Dialogue: 0,1:13:48.49,1:13:53.20,english,,0,0,0,,How many steps did it take me to find the next smallest number, which ended up being the number 1?
Dialogue: 0,1:13:48.49,1:13:53.20,chinese,,0,0,0,,我花了多少步才找到下一个最小的数字，最后是数字 1？
Dialogue: 0,1:13:55.79,1:13:56.85,english,,0,0,0,,Yeah.
Dialogue: 0,1:13:56.85,1:13:58.34,english,,0,0,0,,STUDENT: [INAUDIBLE] n minus 2.
Dialogue: 0,1:13:56.85,1:13:58.34,chinese,,0,0,0,,学生： n 减 2。
Dialogue: 0,1:13:58.34,1:13:59.60,english,,0,0,0,,DAVID MALAN: Yeah, so just n minus 2.
Dialogue: 0,1:13:58.34,1:13:59.60,chinese,,0,0,0,,是的，所以是 n 减 2。
Dialogue: 0,1:13:59.60,1:13:59.87,english,,0,0,0,,Why?
Dialogue: 0,1:13:59.87,1:14:01.61,english,,0,0,0,,Because I'd already solved one problem.
Dialogue: 0,1:13:59.87,1:14:01.61,chinese,,0,0,0,,因为我已经解决了一个问题。
Dialogue: 0,1:14:01.61,1:14:03.21,english,,0,0,0,,Someone was already in the right position.
Dialogue: 0,1:14:01.61,1:14:03.21,chinese,,0,0,0,,有人已经在正确的位置上了。
Dialogue: 0,1:14:03.21,1:14:05.49,english,,0,0,0,,It would be silly to keep counting them again and again.
Dialogue: 0,1:14:03.21,1:14:05.49,chinese,,0,0,0,,如果一而再、再而三地计算，那就太傻了。
Dialogue: 0,1:14:05.49,1:14:09.20,english,,0,0,0,,So I can whittle down my number of comparisons for the next pass to n minus 2.
Dialogue: 0,1:14:05.49,1:14:09.20,chinese,,0,0,0,,这样，我就可以把下一次的比较次数减少到 n 减 2。
Dialogue: 0,1:14:09.20,1:14:12.35,english,,0,0,0,,The third pass to find the third smallest number would be n minus 3.
Dialogue: 0,1:14:09.20,1:14:12.35,chinese,,0,0,0,,第三次求最小的第三个数是 n 减 3。
Dialogue: 0,1:14:12.35,1:14:19.62,english,,0,0,0,,And then dot, dot, dot, presumably this story, this formula, ends when you have just one final pair, the people at the end, to compare.
Dialogue: 0,1:14:12.35,1:14:19.62,chinese,,0,0,0,,然后，点点，点点，点点，大概这个故事，这个公式，就在最后只有一对人，也就是最后的人，可以比较的时候结束了。
Dialogue: 0,1:14:19.62,1:14:28.22,english,,0,0,0,,So if this is looking a little reminiscent of some kind of recurrence from high school or high school math or physics or the like, let me just stipulate that if you actually do out this math
Dialogue: 0,1:14:19.62,1:14:28.22,chinese,,0,0,0,,所以，如果你觉得这有点像高中数学、高中物理或类似题目的复现，那么请允许我说明一下，如果你真的做完了这道数学题
Dialogue: 0,1:14:28.22,1:14:33.39,english,,0,0,0,,and generalize it, that is the same thing as n times n minus 1 divided by 2.
Dialogue: 0,1:14:28.22,1:14:33.39,chinese,,0,0,0,,并加以推广，就等于 n 乘以 n 减 1 再除以 2。
Dialogue: 0,1:14:33.39,1:14:35.10,english,,0,0,0,,And if you're rusty on that, no big deal.
Dialogue: 0,1:14:33.39,1:14:35.10,chinese,,0,0,0,,如果你已经生疏了，也没什么大不了的。
Dialogue: 0,1:14:35.10,1:14:42.30,english,,0,0,0,,Just kind of commit to memory that any time you add up this kind of series, something plus something slightly smaller, plus something slightly smaller, each of which
Dialogue: 0,1:14:35.10,1:14:42.30,chinese,,0,0,0,,你只要记住，任何时候，只要你把这种系列加起来，一些东西加上一些稍小的东西，再加上一些稍小的东西，其中每一个
Dialogue: 0,1:14:42.30,1:14:46.52,english,,0,0,0,,differs by 1, you're going to get this formula. n times n minus 1 over 2.
Dialogue: 0,1:14:42.30,1:14:46.52,chinese,,0,0,0,,n 乘以 n 再减去 1 得到 2。
Dialogue: 0,1:14:46.52,1:14:51.68,english,,0,0,0,,If we, of course, multiply that out, that's really n squared minus n, all divided by 2.
Dialogue: 0,1:14:46.52,1:14:51.68,chinese,,0,0,0,,当然，如果我们把它乘出来，实际上就是 n 的平方减去 n，再除以 2。
Dialogue: 0,1:14:51.68,1:14:56.54,english,,0,0,0,,If we keep multiplying it out, that's n squared divided by 2 minus n over 2.
Dialogue: 0,1:14:51.68,1:14:56.54,chinese,,0,0,0,,如果我们继续相乘，那就是 n 的平方除以 2 再减去 n 超过 2。
Dialogue: 0,1:14:56.54,1:15:03.14,english,,0,0,0,,And now, we have kind of a vocabulary with which we can talk about the efficiency, the design of this algorithm.
Dialogue: 0,1:14:56.54,1:15:03.14,chinese,,0,0,0,,现在，我们有了一种词汇，可以用来讨论这种算法的效率和设计。
Dialogue: 0,1:15:03.14,1:15:09.56,english,,0,0,0,,But honestly, I don't really care about this level of precision, like n squared divided by 2 minus n divided by 2.
Dialogue: 0,1:15:03.14,1:15:09.56,chinese,,0,0,0,,但老实说，我并不太在意这种精确度，比如 n 的平方除以 2 再减去 n 除以 2。
Dialogue: 0,1:15:09.56,1:15:20.19,english,,0,0,0,,As n gets really large, which of these symbols, which of these terms is really going to dominate, become the biggest influencer on the total value of steps?
Dialogue: 0,1:15:09.56,1:15:20.19,chinese,,0,0,0,,当 n 越来越大时，哪一个符号、哪一个术语将真正占据主导地位，成为步骤总价值的最大影响因素？
Dialogue: 0,1:15:20.19,1:15:20.69,english,,0,0,0,,Right?
Dialogue: 0,1:15:20.69,1:15:21.89,english,,0,0,0,,It's the square, right?
Dialogue: 0,1:15:20.69,1:15:21.89,chinese,,0,0,0,,是广场，对吗？
Dialogue: 0,1:15:21.89,1:15:23.38,english,,0,0,0,,It's definitely not n divided by 2.
Dialogue: 0,1:15:21.89,1:15:23.38,chinese,,0,0,0,,绝对不是 n 除以 2。
Dialogue: 0,1:15:23.38,1:15:24.59,english,,0,0,0,,That's shaving some time off.
Dialogue: 0,1:15:23.38,1:15:24.59,chinese,,0,0,0,,这样可以节省一些时间。
Dialogue: 0,1:15:24.59,1:15:27.80,english,,0,0,0,,But n squared, as n gets big, is going to get really big.
Dialogue: 0,1:15:24.59,1:15:27.80,chinese,,0,0,0,,但 n 的平方，随着 n 的增大，会变得非常大。
Dialogue: 0,1:15:27.80,1:15:29.99,english,,0,0,0,,If n is 100, then n squared is bigger.
Dialogue: 0,1:15:27.80,1:15:29.99,chinese,,0,0,0,,如果 n 是 100，那么 n 的平方更大。
Dialogue: 0,1:15:29.99,1:15:32.57,english,,0,0,0,,If n is a million, n squared is really bigger.
Dialogue: 0,1:15:29.99,1:15:32.57,chinese,,0,0,0,,如果 n 是一百万，那么 n 的平方确实更大。
Dialogue: 0,1:15:32.57,1:15:43.13,english,,0,0,0,,And so at the end of the day, when we're really just talking about a wave of the hand analysis and upper bound, if you will, let's just say that selection sort, as analyzed here,
Dialogue: 0,1:15:32.57,1:15:43.13,chinese,,0,0,0,,所以，最后，当我们真的只是在讨论挥手分析和上限时，如果你愿意，让我们只说选择排序，就像这里分析的那样、
Dialogue: 0,1:15:43.13,1:15:45.86,english,,0,0,0,,it's on the order of n squared steps.
Dialogue: 0,1:15:43.13,1:15:45.86,chinese,,0,0,0,,是 n 平方步的数量级。
Dialogue: 0,1:15:45.86,1:15:47.69,english,,0,0,0,,It's not precisely n squared steps.
Dialogue: 0,1:15:45.86,1:15:47.69,chinese,,0,0,0,,这并不是精确的 n 平方步。
Dialogue: 0,1:15:47.69,1:15:58.57,english,,0,0,0,,But you know what? n squared divided by 2, the intuition here might be that, well, it's half of that. n squared is what really matters as n gets really, really large.
Dialogue: 0,1:15:47.69,1:15:58.57,chinese,,0,0,0,,但你知道吗？n 的平方除以 2，直觉上可能是 n 的一半，但随着 n 越来越大，n 的平方才是真正重要的。
Dialogue: 0,1:15:58.57,1:16:02.44,english,,0,0,0,,And that's when you start thinking about and trying to solve the Google problems of the world.
Dialogue: 0,1:15:58.57,1:16:02.44,chinese,,0,0,0,,这时，你就会开始思考并试图解决世界上的谷歌问题。
Dialogue: 0,1:16:02.44,1:16:07.49,english,,0,0,0,,When n gets large, that's when you have to be smarter than just sort of naive implementations of any algorithm.
Dialogue: 0,1:16:02.44,1:16:07.49,chinese,,0,0,0,,当 n 变大时，你就必须变得更聪明，而不仅仅是天真地实现任何算法。
Dialogue: 0,1:16:07.49,1:16:12.48,english,,0,0,0,,So where, then, does this algorithm fall into this categorization here?
Dialogue: 0,1:16:07.49,1:16:12.48,chinese,,0,0,0,,那么，这种算法属于哪一类呢？
Dialogue: 0,1:16:12.48,1:16:19.61,english,,0,0,0,,Well, n squared, it turns out, is on the order of n squared steps, in the worst case, whether it's sorted or not.
Dialogue: 0,1:16:12.48,1:16:19.61,chinese,,0,0,0,,事实证明，无论排序与否，在最坏的情况下，n 的平方是 n 步的平方。
Dialogue: 0,1:16:19.61,1:16:28.67,english,,0,0,0,,It turns out, though, lower bound, if we consider this same code, suppose the best case scenario, like our eight volunteers came up on stage.
Dialogue: 0,1:16:19.61,1:16:28.67,chinese,,0,0,0,,但事实证明，如果我们考虑同样的代码，假设最好的情况是我们的八位志愿者上台，那么下限就会降低。
Dialogue: 0,1:16:28.67,1:16:32.24,english,,0,0,0,,And just because they already sorted themselves, so 0 through 7.
Dialogue: 0,1:16:28.67,1:16:32.24,chinese,,0,0,0,,因为他们已经自己排序了，所以从 0 到 7。
Dialogue: 0,1:16:32.24,1:16:34.49,english,,0,0,0,,Suppose they just happened to be in that state.
Dialogue: 0,1:16:32.24,1:16:34.49,chinese,,0,0,0,,假设他们正好在那个州。
Dialogue: 0,1:16:34.49,1:16:42.67,english,,0,0,0,,How many steps would selection store take to sort an already-sorted list of volunteers?
Dialogue: 0,1:16:34.49,1:16:42.67,chinese,,0,0,0,,遴选商店需要多少步骤才能对已经排序的志愿者名单进行排序？
Dialogue: 0,1:16:42.67,1:16:43.42,english,,0,0,0,,Any intuition?
Dialogue: 0,1:16:42.67,1:16:43.42,chinese,,0,0,0,,有什么直觉吗？
Dialogue: 0,1:16:43.42,1:16:44.31,english,,0,0,0,,Yeah.
Dialogue: 0,1:16:44.31,1:16:47.18,english,,0,0,0,,STUDENT: Would it still be [INAUDIBLE]?
Dialogue: 0,1:16:44.31,1:16:47.18,chinese,,0,0,0,,学生：还会[听不清]吗？
Dialogue: 0,1:16:47.18,1:16:49.71,english,,0,0,0,,DAVID MALAN: Would it still be n--
Dialogue: 0,1:16:47.18,1:16:49.71,chinese,,0,0,0,,它还会是 n --
Dialogue: 0,1:16:49.71,1:16:51.18,english,,0,0,0,,STUDENT: Still be 7 [INAUDIBLE].
Dialogue: 0,1:16:49.71,1:16:51.18,chinese,,0,0,0,,学生：仍然是 7 [听不清]。
Dialogue: 0,1:16:51.18,1:16:55.71,english,,0,0,0,,DAVID MALAN: So for the first pass, it would still be 7 for the first pass across the humans.
Dialogue: 0,1:16:51.18,1:16:55.71,chinese,,0,0,0,,因此，对于第一次穿越，人类的第一次穿越仍将是 7 次。
Dialogue: 0,1:16:55.71,1:16:58.53,english,,0,0,0,,Because even though, yeah, I'm claiming 0 is here,
Dialogue: 0,1:16:55.71,1:16:58.53,chinese,,0,0,0,,因为，尽管我声称 "0 "在这里、
Dialogue: 0,1:16:58.53,1:17:03.99,english,,0,0,0,,I don't know that 0 is the smallest until I make my way all the way over there doing all seven comparisons.
Dialogue: 0,1:16:58.53,1:17:03.99,chinese,,0,0,0,,我不知道 "0 "是最小的，直到我一路走过去做了七次比较。
Dialogue: 0,1:17:03.99,1:17:08.22,english,,0,0,0,,OK, fine, first pass took seven or more generally n minus 1 steps.
Dialogue: 0,1:17:03.99,1:17:08.22,chinese,,0,0,0,,好吧，好吧，第一次一般用了 7 步或更多 n 减 1 步。
Dialogue: 0,1:17:08.22,1:17:14.37,english,,0,0,0,,What if I look for the next smallest element, and the humans in this story are already sorted 0 through 7?
Dialogue: 0,1:17:08.22,1:17:14.37,chinese,,0,0,0,,如果我寻找下一个最小的元素，而故事中的人类已经从 0 到 7 排序了呢？
Dialogue: 0,1:17:14.37,1:17:17.58,english,,0,0,0,,Well, yes, the number 1 is here, and I see them first.
Dialogue: 0,1:17:14.37,1:17:17.58,chinese,,0,0,0,,是的，1 号在这里，我先看到他们。
Dialogue: 0,1:17:17.58,1:17:22.53,english,,0,0,0,,But I don't know they're the smallest until I compare against everyone else get to the end of the list.
Dialogue: 0,1:17:17.58,1:17:22.53,chinese,,0,0,0,,但我不知道他们是最小的，直到我和其他人比较后才知道他们是最小的。
Dialogue: 0,1:17:22.53,1:17:24.23,english,,0,0,0,,And we're like, oh, well that was stupid.
Dialogue: 0,1:17:22.53,1:17:24.23,chinese,,0,0,0,,我们会说，哦，那太愚蠢了。
Dialogue: 0,1:17:24.23,1:17:26.55,english,,0,0,0,,I already had the smallest person in hand then.
Dialogue: 0,1:17:24.23,1:17:26.55,chinese,,0,0,0,,那时，我手里已经有了最小的那个人。
Dialogue: 0,1:17:26.55,1:17:31.65,english,,0,0,0,,And so this pseudocode, this implementation of selection sort, is sort of fixed like this.
Dialogue: 0,1:17:26.55,1:17:31.65,chinese,,0,0,0,,因此，这个伪代码，这个选择排序的实现，就是这样固定下来的。
Dialogue: 0,1:17:31.65,1:17:35.49,english,,0,0,0,,There's no special case that says, if already sorted, quit early.
Dialogue: 0,1:17:31.65,1:17:35.49,chinese,,0,0,0,,没有什么特例说，如果已经排序，就提前退出。
Dialogue: 0,1:17:35.49,1:17:37.86,english,,0,0,0,,It's always going to take n squared steps.
Dialogue: 0,1:17:35.49,1:17:37.86,chinese,,0,0,0,,总是需要 N 个平方的步骤。
Dialogue: 0,1:17:37.86,1:17:50.79,english,,0,0,0,,And so in this case, if we borrow our jargon from earlier using omega notation, just to be clear, selection sort is also going to be in this incarnation in omega of n squared,
Dialogue: 0,1:17:37.86,1:17:50.79,chinese,,0,0,0,,因此，在这种情况下，如果我们借用之前使用欧米茄符号的行话，为了清楚起见，选择排序也将以 n 平方的欧米茄形式出现、
Dialogue: 0,1:17:50.79,1:17:59.04,english,,0,0,0,,because even in the best case, where the list is already sorted, you're going to waste a huge amount of time essentially verifying as much or discovering as much,
Dialogue: 0,1:17:50.79,1:17:59.04,chinese,,0,0,0,,因为即使在最好的情况下，即列表已经排序，你也会浪费大量时间去验证或发现同样多的信息、
Dialogue: 0,1:17:59.04,1:18:01.75,english,,0,0,0,,even though we humans of course could see it right away.
Dialogue: 0,1:17:59.04,1:18:01.75,chinese,,0,0,0,,尽管我们人类当然能立刻看到它。
Dialogue: 0,1:18:01.75,1:18:08.42,english,,0,0,0,,So selection sort would seem to take both n squared steps in the worst case, n squared steps in the best case.
Dialogue: 0,1:18:01.75,1:18:08.42,chinese,,0,0,0,,因此，在最坏的情况下，选择排序似乎需要 n 个平方步骤，而在最好的情况下，选择排序也需要 n 个平方步骤。
Dialogue: 0,1:18:08.42,1:18:09.30,english,,0,0,0,,And so you know what?
Dialogue: 0,1:18:08.42,1:18:09.30,chinese,,0,0,0,,你知道吗？
Dialogue: 0,1:18:09.30,1:18:11.28,english,,0,0,0,,We can use our theta terminology for that.
Dialogue: 0,1:18:09.30,1:18:11.28,chinese,,0,0,0,,对此，我们可以使用我们的 Theta 术语。
Dialogue: 0,1:18:11.28,1:18:19.65,english,,0,0,0,,Here would be an algorithm, just like counting earlier, that always takes n squared steps, no matter whether the array is sorted or not from the get go.
Dialogue: 0,1:18:11.28,1:18:19.65,chinese,,0,0,0,,这里有一种算法，就像前面的计数法一样，无论数组是否从一开始就排序，它总是需要 n 平方步。
Dialogue: 0,1:18:19.65,1:18:21.36,english,,0,0,0,,All right, so hopefully we can do better.
Dialogue: 0,1:18:19.65,1:18:21.36,chinese,,0,0,0,,好吧，希望我们能做得更好。
Dialogue: 0,1:18:21.36,1:18:25.61,english,,0,0,0,,And someone proposed earlier that bubble sort felt like it was using fewer steps.
Dialogue: 0,1:18:21.36,1:18:25.61,chinese,,0,0,0,,之前有人提出，冒泡排序感觉使用的步骤更少了。
Dialogue: 0,1:18:25.61,1:18:26.91,english,,0,0,0,,Well, let's consider that next.
Dialogue: 0,1:18:25.61,1:18:26.91,chinese,,0,0,0,,好吧，让我们接下来考虑这个问题。
Dialogue: 0,1:18:26.91,1:18:30.63,english,,0,0,0,,With bubble sort, we had this pseudocode, I claim.
Dialogue: 0,1:18:26.91,1:18:30.63,chinese,,0,0,0,,对于冒泡排序，我声称我们有这样的伪代码。
Dialogue: 0,1:18:30.63,1:18:33.78,english,,0,0,0,,Whereby, let's focus on the inside of the code first.
Dialogue: 0,1:18:30.63,1:18:33.78,chinese,,0,0,0,,因此，让我们先关注代码的内部。
Dialogue: 0,1:18:33.78,1:18:36.12,english,,0,0,0,,Down here, what was I doing?
Dialogue: 0,1:18:33.78,1:18:36.12,chinese,,0,0,0,,在这下面，我在做什么？
Dialogue: 0,1:18:36.12,1:18:39.96,english,,0,0,0,,For i from 0 to n minus 2.
Dialogue: 0,1:18:36.12,1:18:39.96,chinese,,0,0,0,,对于从 0 到 n 减 2 的 i。
Dialogue: 0,1:18:39.96,1:18:40.74,english,,0,0,0,,That's curious.
Dialogue: 0,1:18:39.96,1:18:40.74,chinese,,0,0,0,,这就奇怪了。
Dialogue: 0,1:18:40.74,1:18:42.36,english,,0,0,0,,We've never seen n minus 2 before.
Dialogue: 0,1:18:40.74,1:18:42.36,chinese,,0,0,0,,我们以前从未见过 n 负 2。
Dialogue: 0,1:18:42.36,1:18:44.04,english,,0,0,0,,But I asked this question.
Dialogue: 0,1:18:42.36,1:18:44.04,chinese,,0,0,0,,但我还是问了这个问题。
Dialogue: 0,1:18:44.04,1:18:50.16,english,,0,0,0,,If numbers bracket i and numbers bracket i plus 1 are out of order, swap them.
Dialogue: 0,1:18:44.04,1:18:50.16,chinese,,0,0,0,,如果第 i 个括号中的数字和第 i 个括号中的数字加 1 的顺序不对，则对调它们。
Dialogue: 0,1:18:50.16,1:18:53.61,english,,0,0,0,,So that was when I was pointing at our first two volunteers here.
Dialogue: 0,1:18:50.16,1:18:53.61,chinese,,0,0,0,,所以，当我在这里指着我们的前两名志愿者时，他们就是我们的志愿者。
Dialogue: 0,1:18:53.61,1:18:57.09,english,,0,0,0,,I saw that they were out of order, so I swapped them.
Dialogue: 0,1:18:53.61,1:18:57.09,chinese,,0,0,0,,我看到它们的顺序不对，所以就把它们对调了。
Dialogue: 0,1:18:57.09,1:19:09.67,english,,0,0,0,,How come I'm doing that again and again up to n minus 2, though, instead of n minus 1, which we've always used up until now as our rightmost boundary?
Dialogue: 0,1:18:57.09,1:19:09.67,chinese,,0,0,0,,但是，我为什么要一次又一次地这样做，直到 n 减 2，而不是 n 减 1，因为到目前为止，我们一直使用 n 减 1 作为最右边的边界？
Dialogue: 0,1:19:09.67,1:19:14.17,english,,0,0,0,,Any intuition for why I'm doing this from 0 to n minus 2?
Dialogue: 0,1:19:09.67,1:19:14.17,chinese,,0,0,0,,有没有直觉告诉我为什么要从 0 到 n 减 2 这样做？
Dialogue: 0,1:19:14.17,1:19:14.70,english,,0,0,0,,Yeah.
Dialogue: 0,1:19:14.70,1:19:18.54,english,,0,0,0,,STUDENT: [INAUDIBLE] number, you can't get rid of the ith number.
Dialogue: 0,1:19:14.70,1:19:18.54,chinese,,0,0,0,,学生：[听不清]数字，你不能去掉第几个数字。
Dialogue: 0,1:19:18.54,1:19:21.00,english,,0,0,0,,There's no benign character you can swap with.
Dialogue: 0,1:19:18.54,1:19:21.00,chinese,,0,0,0,,没有良性角色可以与你交换。
Dialogue: 0,1:19:21.00,1:19:21.88,english,,0,0,0,,DAVID MALAN: Exactly.
Dialogue: 0,1:19:21.00,1:19:21.88,chinese,,0,0,0,,没错。
Dialogue: 0,1:19:21.88,1:19:31.55,english,,0,0,0,,Because I'm looking at the ith person per this pseudocode here and the ith plus 1 person, I better make sure I don't go step beyond the boundaries of my array.
Dialogue: 0,1:19:21.88,1:19:31.55,chinese,,0,0,0,,因为我在这里查看的是这个伪代码中的第 i 个人和第 i 个加 1 个人，所以我最好确保不会超出数组的边界。
Dialogue: 0,1:19:31.55,1:19:33.01,english,,0,0,0,,So if you think of my left hand.
Dialogue: 0,1:19:31.55,1:19:33.01,chinese,,0,0,0,,如果你想到我的左手
Dialogue: 0,1:19:33.01,1:19:41.35,english,,0,0,0,,When my back was to you here, pointing at the current person at the first position, my right hand for this if conditioner is essentially pointing at the person next to them.
Dialogue: 0,1:19:33.01,1:19:41.35,chinese,,0,0,0,,当我背对着你，指着第一个位置上的人时，我的右手就会指着旁边的人。
Dialogue: 0,1:19:41.35,1:19:44.74,english,,0,0,0,,And you want to iterate with your left hand all through these people.
Dialogue: 0,1:19:41.35,1:19:44.74,chinese,,0,0,0,,在这些人中，你要一直用左手迭代。
Dialogue: 0,1:19:44.74,1:19:47.62,english,,0,0,0,,But you don't want your left hand to point at the last person.
Dialogue: 0,1:19:44.74,1:19:47.62,chinese,,0,0,0,,但你不希望你的左手指向最后一个人。
Dialogue: 0,1:19:47.62,1:19:50.00,english,,0,0,0,,You want it to point at the second to last person.
Dialogue: 0,1:19:47.62,1:19:50.00,chinese,,0,0,0,,你希望它指向倒数第二个人。
Dialogue: 0,1:19:50.00,1:19:54.22,english,,0,0,0,,But we know that the last person is always at n minus 1.
Dialogue: 0,1:19:50.00,1:19:54.22,chinese,,0,0,0,,但我们知道，最后一个人总是 n 减 1。
Dialogue: 0,1:19:54.22,1:19:57.82,english,,0,0,0,,So the second to last person, just mathematically, is at n minus 2.
Dialogue: 0,1:19:54.22,1:19:57.82,chinese,,0,0,0,,因此，从数学角度看，倒数第二个人的位置是 n 减 2。
Dialogue: 0,1:19:57.82,1:19:58.78,english,,0,0,0,,So it's a subtlety.
Dialogue: 0,1:19:57.82,1:19:58.78,chinese,,0,0,0,,因此，这是一个微妙之处。
Dialogue: 0,1:19:58.78,1:20:00.88,english,,0,0,0,,But this is a seg fault waiting to happen.
Dialogue: 0,1:19:58.78,1:20:00.88,chinese,,0,0,0,,但这是一个等待发生的故障。
Dialogue: 0,1:20:00.88,1:20:08.17,english,,0,0,0,,If you implemented bubble sort using n minus 1, you will, my right hand would go beyond the boundaries of the array, so just bad.
Dialogue: 0,1:20:00.88,1:20:08.17,chinese,,0,0,0,,如果用 n 减 1 来实现冒泡排序，我的右手就会超出数组的边界，所以很糟糕。
Dialogue: 0,1:20:08.17,1:20:10.49,english,,0,0,0,,All right, so why am I saying this n times?
Dialogue: 0,1:20:08.17,1:20:10.49,chinese,,0,0,0,,好吧，为什么我说了N遍？
Dialogue: 0,1:20:10.49,1:20:13.07,english,,0,0,0,,Well, we did it very organically with humans.
Dialogue: 0,1:20:10.49,1:20:13.07,chinese,,0,0,0,,我们与人类的合作非常有机。
Dialogue: 0,1:20:13.07,1:20:19.84,english,,0,0,0,,But each time someone-- each pass I did through the array, someone bubbled their way up to the end.
Dialogue: 0,1:20:13.07,1:20:19.84,chinese,,0,0,0,,但每次都有人 -- 我每次通过阵列 -- 都会有人冒泡爬到最后。
Dialogue: 0,1:20:19.84,1:20:22.87,english,,0,0,0,,Number 7, then number 6, then number 5.
Dialogue: 0,1:20:19.84,1:20:22.87,chinese,,0,0,0,,7 号，然后是 6 号，然后是 5 号。
Dialogue: 0,1:20:22.87,1:20:26.60,english,,0,0,0,,So if on each pass through the array of volunteers,
Dialogue: 0,1:20:22.87,1:20:26.60,chinese,,0,0,0,,因此，如果每次通过志愿者数组时、
Dialogue: 0,1:20:26.60,1:20:36.94,english,,0,0,0,,I was solving at least one problem, it seems like bubble sort can just run n times total to solve all n problems, because the first pass will get at least one number into place.
Dialogue: 0,1:20:26.60,1:20:36.94,chinese,,0,0,0,,我至少在解决一个问题，看起来冒泡排序总共运行 n 次就能解决所有 n 个问题，因为第一次运行至少会有一个数字到位。
Dialogue: 0,1:20:36.94,1:20:38.47,english,,0,0,0,,Second pass, second number into place.
Dialogue: 0,1:20:36.94,1:20:38.47,chinese,,0,0,0,,第二次通过，第二个数字到位。
Dialogue: 0,1:20:38.47,1:20:39.97,english,,0,0,0,,You might get lucky, and it would do more.
Dialogue: 0,1:20:38.47,1:20:39.97,chinese,,0,0,0,,你可能会很幸运，它会做得更多。
Dialogue: 0,1:20:39.97,1:20:41.74,english,,0,0,0,,But worst case, this feels like enough.
Dialogue: 0,1:20:39.97,1:20:41.74,chinese,,0,0,0,,但在最坏的情况下，这感觉已经足够了。
Dialogue: 0,1:20:41.74,1:20:46.24,english,,0,0,0,,Just do this blindly n times, and they'll all line up together.
Dialogue: 0,1:20:41.74,1:20:46.24,chinese,,0,0,0,,
Dialogue: 0,1:20:46.24,1:20:49.78,english,,0,0,0,,Well, technically-- all right, now we're getting into the weeds.
Dialogue: 0,1:20:46.24,1:20:49.78,chinese,,0,0,0,,好吧，技术上 -- 好吧，现在我们要进入杂草了。
Dialogue: 0,1:20:49.78,1:20:58.90,english,,0,0,0,,Technically, you can just repeat it in minus 1 times, because if you solve all n minus 1 other problems, and you're left with 1, literally that person's where they need to be, just logically.
Dialogue: 0,1:20:49.78,1:20:58.90,chinese,,0,0,0,,从技术上讲，你可以用减 1 的方式来重复它，因为如果你解决了所有 n 减 1 的其他问题，只剩下 1 个问题，那么从逻辑上讲，这个人就到了他们应该到的地方。
Dialogue: 0,1:20:58.90,1:21:02.54,english,,0,0,0,,If you've already sorted everything else and you've got just the 1 left, it's already bubbled up.
Dialogue: 0,1:20:58.90,1:21:02.54,chinese,,0,0,0,,如果你已经把其他东西都整理好了，只剩下 1，那么它就已经冒泡了。
Dialogue: 0,1:21:02.54,1:21:03.98,english,,0,0,0,,So how do we analyze this?
Dialogue: 0,1:21:02.54,1:21:03.98,chinese,,0,0,0,,那么，我们该怎么分析呢？
Dialogue: 0,1:21:03.98,1:21:06.67,english,,0,0,0,,Well in bubble sort, we might do something like this.
Dialogue: 0,1:21:03.98,1:21:06.67,chinese,,0,0,0,,那么，在泡沫排序中，我们可以这样做。
Dialogue: 0,1:21:06.67,1:21:11.01,english,,0,0,0,,I'm essentially doing n minus 1 things n minus 1 times.
Dialogue: 0,1:21:06.67,1:21:11.01,chinese,,0,0,0,,我基本上是在做 n 减 1 的事情 n 减 1 次。
Dialogue: 0,1:21:11.01,1:21:14.98,english,,0,0,0,,Now, let me back up to the pseudocode, because this one's a little less obvious.
Dialogue: 0,1:21:11.01,1:21:14.98,chinese,,0,0,0,,现在，让我回到伪代码上，因为这个不太明显。
Dialogue: 0,1:21:14.98,1:21:21.11,english,,0,0,0,,This is where you can actually mathematically infer from your loop how many steps you're taking.
Dialogue: 0,1:21:14.98,1:21:21.11,chinese,,0,0,0,,在这里，你实际上可以从你的循环中以数学方式推断出你走了多少步。
Dialogue: 0,1:21:21.11,1:21:24.58,english,,0,0,0,,So this first line literally says, repeat the following n minus 1 times.
Dialogue: 0,1:21:21.11,1:21:24.58,chinese,,0,0,0,,因此，第一行的字面意思是：重复下面的 n 减 1 次。
Dialogue: 0,1:21:24.58,1:21:28.24,english,,0,0,0,,So that's going to translate very straightforwardly to our mathematical formula.
Dialogue: 0,1:21:24.58,1:21:28.24,chinese,,0,0,0,,因此，这将非常直接地转化为我们的数学公式。
Dialogue: 0,1:21:28.24,1:21:30.19,english,,0,0,0,,Do something n minus 1 times.
Dialogue: 0,1:21:28.24,1:21:30.19,chinese,,0,0,0,,做 n 次减 1 次。
Dialogue: 0,1:21:30.19,1:21:35.84,english,,0,0,0,,This loop, just because I'm using for loop terminology, it's framed a little differently.
Dialogue: 0,1:21:30.19,1:21:35.84,chinese,,0,0,0,,因为我使用的是 for 循环术语，所以这个循环的框架有点不同。
Dialogue: 0,1:21:35.84,1:21:43.25,english,,0,0,0,,But if you're iterating from 0 to n minus 2, you're iterating a total of n minus 1 times.
Dialogue: 0,1:21:35.84,1:21:43.25,chinese,,0,0,0,,但是，如果从 0 到 n 减 2 的迭代，则总共迭代了 n 减 1 次。
Dialogue: 0,1:21:43.25,1:21:45.55,english,,0,0,0,,And again, the arithmetic is getting a little annoying.
Dialogue: 0,1:21:43.25,1:21:45.55,chinese,,0,0,0,,再说一遍，算术题有点烦人。
Dialogue: 0,1:21:45.55,1:21:48.47,english,,0,0,0,,But this just means do the following n minus 1 times.
Dialogue: 0,1:21:45.55,1:21:48.47,chinese,,0,0,0,,但这只是意味着做下面的 n 减 1 次。
Dialogue: 0,1:21:48.47,1:21:51.67,english,,0,0,0,,So do n minus 1 things n minus 1 times.
Dialogue: 0,1:21:48.47,1:21:51.67,chinese,,0,0,0,,所以要做 n 次减 1 的事情 n 次减 1 次。
Dialogue: 0,1:21:51.67,1:21:54.44,english,,0,0,0,,We can now run out the math as follows.
Dialogue: 0,1:21:51.67,1:21:54.44,chinese,,0,0,0,,现在我们可以计算如下。
Dialogue: 0,1:21:54.44,1:21:57.94,english,,0,0,0,,We have the formula n minus 1 times n minus 1.
Dialogue: 0,1:21:54.44,1:21:57.94,chinese,,0,0,0,,我们有一个 n 减 1 乘以 n 减 1 的公式。
Dialogue: 0,1:21:57.94,1:22:03.10,english,,0,0,0,,We do our little FOIL method here, n squared minus 1 times n, minus 1 times n, plus 1.
Dialogue: 0,1:21:57.94,1:22:03.10,chinese,,0,0,0,,我们在这里用我们的 FOIL 小方法，n 的平方减 1 乘以 n，减 1 乘以 n，再加 1。
Dialogue: 0,1:22:03.10,1:22:06.55,english,,0,0,0,,We can combine like terms. n squared minus 2n plus 1.
Dialogue: 0,1:22:03.10,1:22:06.55,chinese,,0,0,0,,n 平方减 2n 加 1。
Dialogue: 0,1:22:06.55,1:22:10.90,english,,0,0,0,,But at this point, when n gets really large, which term are we really going to care about?
Dialogue: 0,1:22:06.55,1:22:10.90,chinese,,0,0,0,,但此时，当 n 变得非常大时，我们真正关心的是哪个项呢？
Dialogue: 0,1:22:10.90,1:22:13.39,english,,0,0,0,,This is on the order of?
Dialogue: 0,1:22:10.90,1:22:13.39,chinese,,0,0,0,,这相当于什么？
Dialogue: 0,1:22:13.39,1:22:14.87,english,,0,0,0,,Yeah, n squared.
Dialogue: 0,1:22:13.39,1:22:14.87,chinese,,0,0,0,,是的，n 平方。
Dialogue: 0,1:22:14.87,1:22:16.78,english,,0,0,0,,So at least asymptotically.
Dialogue: 0,1:22:14.87,1:22:16.78,chinese,,0,0,0,,所以，至少从渐近的角度来看是这样。
Dialogue: 0,1:22:16.78,1:22:20.83,english,,0,0,0,,Asymptotically means, as n approaches infinity, gets really large.
Dialogue: 0,1:22:16.78,1:22:20.83,chinese,,0,0,0,,渐进的意思是，当 n 接近无穷大时，会变得非常大。
Dialogue: 0,1:22:20.83,1:22:25.43,english,,0,0,0,,Turns out that the upper bound on selection sort and bubble sort are essentially the same.
Dialogue: 0,1:22:20.83,1:22:25.43,chinese,,0,0,0,,原来，选择排序和冒泡排序的上限基本相同。
Dialogue: 0,1:22:25.43,1:22:29.68,english,,0,0,0,,Now, if we really nitpicked and compared the total number of comparisons, they might differ slightly.
Dialogue: 0,1:22:25.43,1:22:29.68,chinese,,0,0,0,,现在，如果我们真的吹毛求疵，比较比较的总数，它们可能会略有不同。
Dialogue: 0,1:22:29.68,1:22:36.35,english,,0,0,0,,But as n gets large, honestly, you're barely going to notice the difference, it would seem, between these two algorithms.
Dialogue: 0,1:22:29.68,1:22:36.35,chinese,,0,0,0,,但当 n 越大时，说实话，你几乎不会注意到这两种算法之间的差别。
Dialogue: 0,1:22:36.35,1:22:39.55,english,,0,0,0,,But what about the lower bound?
Dialogue: 0,1:22:36.35,1:22:39.55,chinese,,0,0,0,,但下限呢？
Dialogue: 0,1:22:39.55,1:22:45.47,english,,0,0,0,,If the upper bound on bubble sort is also big O of n, what about the lower bound here?
Dialogue: 0,1:22:39.55,1:22:45.47,chinese,,0,0,0,,如果冒泡排序的上限也是 n 的大 O，那么这里的下限呢？
Dialogue: 0,1:22:45.47,1:22:50.17,english,,0,0,0,,Well, with this pseudocode, what would the lower bound be on bubble sort?
Dialogue: 0,1:22:45.47,1:22:50.17,chinese,,0,0,0,,那么，根据这个伪代码，冒泡排序的下限会是多少呢？
Dialogue: 0,1:22:50.17,1:22:53.89,english,,0,0,0,,Even in the best case when all of the volunteers are sorted.
Dialogue: 0,1:22:50.17,1:22:53.89,chinese,,0,0,0,,即使在最好的情况下，所有志愿者都已分类。
Dialogue: 0,1:22:53.89,1:22:56.83,english,,0,0,0,,Any intuition?
Dialogue: 0,1:22:53.89,1:22:56.83,chinese,,0,0,0,,有什么直觉吗？
Dialogue: 0,1:22:56.83,1:22:57.67,english,,0,0,0,,In this pseudo code.
Dialogue: 0,1:22:56.83,1:22:57.67,chinese,,0,0,0,,在这段伪代码中
Dialogue: 0,1:22:57.67,1:22:58.53,english,,0,0,0,,Yeah, in the middle.
Dialogue: 0,1:22:57.67,1:22:58.53,chinese,,0,0,0,,是的，在中间。
Dialogue: 0,1:22:58.53,1:22:59.83,english,,0,0,0,,STUDENT: Sorry, quick question.
Dialogue: 0,1:22:58.53,1:22:59.83,chinese,,0,0,0,,学生：对不起，我有个简单的问题。
Dialogue: 0,1:22:59.83,1:23:05.95,english,,0,0,0,,Isn't bubble sort structured such that you wouldn't need to compare numbers that have already bubbled up?
Dialogue: 0,1:22:59.83,1:23:05.95,chinese,,0,0,0,,冒泡排序的结构不就是不需要比较已经冒泡的数字吗？
Dialogue: 0,1:23:05.95,1:23:07.08,english,,0,0,0,,DAVID MALAN: Good question.
Dialogue: 0,1:23:05.95,1:23:07.08,chinese,,0,0,0,,问得好。
Dialogue: 0,1:23:07.08,1:23:12.86,english,,0,0,0,,Isn't bubble sort designed such that you wouldn't need to compare numbers that have already bubbled up?
Dialogue: 0,1:23:07.08,1:23:12.86,chinese,,0,0,0,,冒泡排序的设计不就是为了让你不需要比较已经冒泡的数字吗？
Dialogue: 0,1:23:12.86,1:23:17.00,english,,0,0,0,,That's what's happening here in the middle, implicitly.
Dialogue: 0,1:23:12.86,1:23:17.00,chinese,,0,0,0,,这就是中间隐含发生的事情。
Dialogue: 0,1:23:17.00,1:23:19.22,english,,0,0,0,,I'm always going from left to right.
Dialogue: 0,1:23:17.00,1:23:19.22,chinese,,0,0,0,,我总是从左到右。
Dialogue: 0,1:23:19.22,1:23:27.14,english,,0,0,0,,But remember that even when I screwed up at the end and the last two people were out of order, I do always need to restart at the beginning, because the big numbers are
Dialogue: 0,1:23:19.22,1:23:27.14,chinese,,0,0,0,,但请记住，即使我在最后搞砸了，最后两个人的顺序出了问题，我也总是需要从头开始，因为大数字是
Dialogue: 0,1:23:27.14,1:23:29.69,english,,0,0,0,,going that way, and the small numbers are coming this way.
Dialogue: 0,1:23:27.14,1:23:29.69,chinese,,0,0,0,,小部分人往这边走。
Dialogue: 0,1:23:29.69,1:23:32.89,english,,0,0,0,,STUDENT: [INAUDIBLE]
Dialogue: 0,1:23:29.69,1:23:32.89,chinese,,0,0,0,,学生：[听不清]
Dialogue: 0,1:23:32.89,1:23:34.10,english,,0,0,0,,DAVID MALAN: So that is true.
Dialogue: 0,1:23:32.89,1:23:34.10,chinese,,0,0,0,,原来如此。
Dialogue: 0,1:23:34.10,1:23:37.46,english,,0,0,0,,There are some slight optimizations that I'm kind of glossing over here.
Dialogue: 0,1:23:34.10,1:23:37.46,chinese,,0,0,0,,有一些小的优化，我在这里就不多说了。
Dialogue: 0,1:23:37.46,1:23:40.70,english,,0,0,0,,Let me stipulate that it would still end up being on the order of n squared.
Dialogue: 0,1:23:37.46,1:23:40.70,chinese,,0,0,0,,我想说的是，最终的结果仍然是 n 的平方。
Dialogue: 0,1:23:40.70,1:23:43.91,english,,0,0,0,,But that would definitely shave off some actual running time here.
Dialogue: 0,1:23:40.70,1:23:43.91,chinese,,0,0,0,,但这样做肯定会缩短实际运行时间。
Dialogue: 0,1:23:43.91,1:23:46.34,english,,0,0,0,,But what if the list is already sorted?
Dialogue: 0,1:23:43.91,1:23:46.34,chinese,,0,0,0,,但如果列表已经排序了呢？
Dialogue: 0,1:23:46.34,1:23:51.02,english,,0,0,0,,Our pseudocode, at the moment, has no allowance for if list is already sorted, quit early.
Dialogue: 0,1:23:46.34,1:23:51.02,chinese,,0,0,0,,目前，我们的伪代码不允许在列表已经排序的情况下提前退出。
Dialogue: 0,1:23:51.02,1:23:58.85,english,,0,0,0,,So we're going to blindly do n minus 1 things and minus 1 times unless we modify our pseudocode, as I did verbally earlier,
Dialogue: 0,1:23:51.02,1:23:58.85,chinese,,0,0,0,,因此，除非像我之前口头说的那样，修改我们的伪代码，否则我们将盲目地做 n 减 1 的事情和减 1 的次数、
Dialogue: 0,1:23:58.85,1:23:59.96,english,,0,0,0,,I proposed this.
Dialogue: 0,1:23:58.85,1:23:59.96,chinese,,0,0,0,,我提出了这个建议。
Dialogue: 0,1:23:59.96,1:24:08.99,english,,0,0,0,,Inside of that outer loop, if you make a pass across all of the volunteers, and your mental counter has made no swaps, you have to keep track with some kind of variable,
Dialogue: 0,1:23:59.96,1:24:08.99,chinese,,0,0,0,,在这个外循环中，如果你对所有志愿者进行了一次传递，而你的心理计数器没有进行任何交换，你就必须用某种变量来进行跟踪、
Dialogue: 0,1:24:08.99,1:24:10.51,english,,0,0,0,,well then, you might as well stop.
Dialogue: 0,1:24:08.99,1:24:10.51,chinese,,0,0,0,,那你还是别说了。
Dialogue: 0,1:24:10.51,1:24:17.55,english,,0,0,0,,Because if you do a whole pass and make no swaps, why would you waste time doing it again expecting different behavior?
Dialogue: 0,1:24:10.51,1:24:17.55,chinese,,0,0,0,,因为如果你做了一整遍，却没有进行任何交换，为什么还要浪费时间再做一遍，期待有不同的表现呢？
Dialogue: 0,1:24:17.55,1:24:26.64,english,,0,0,0,,So to help visualize these, whereby now bubble sort can be advantageous if the data is already sorted or mostly sorted.
Dialogue: 0,1:24:17.55,1:24:26.64,chinese,,0,0,0,,因此，如果数据已经排序或大部分已经排序，为了帮助可视化这些数据，现在冒泡排序就很有优势。
Dialogue: 0,1:24:26.64,1:24:27.14,english,,0,0,0,,Why?
Dialogue: 0,1:24:27.14,1:24:29.51,english,,0,0,0,,Because it does have this short circuit detail.
Dialogue: 0,1:24:27.14,1:24:29.51,chinese,,0,0,0,,因为它确实有这个短路细节。
Dialogue: 0,1:24:29.51,1:24:36.26,english,,0,0,0,,At least if we implement it like that, how can we go about visualizing these things a little more clearly?
Dialogue: 0,1:24:29.51,1:24:36.26,chinese,,0,0,0,,至少，如果我们这样做，怎么才能更清晰地将这些事情可视化呢？
Dialogue: 0,1:24:36.26,1:24:37.68,english,,0,0,0,,Well, let me go ahead and do this.
Dialogue: 0,1:24:36.26,1:24:37.68,chinese,,0,0,0,,好吧，让我来做这件事。
Dialogue: 0,1:24:37.68,1:24:46.85,english,,0,0,0,,Let me pull up, here, a visualization of exactly these algorithms, thanks to a third party tool here that's going to help us visualize these sorting algorithms as follows.
Dialogue: 0,1:24:37.68,1:24:46.85,chinese,,0,0,0,,让我在这里调出这些算法的可视化效果，这要感谢第三方工具，它可以帮助我们将这些排序算法可视化如下。
Dialogue: 0,1:24:46.85,1:24:48.74,english,,0,0,0,,Small bars represent small numbers.
Dialogue: 0,1:24:46.85,1:24:48.74,chinese,,0,0,0,,小横杠代表小数字。
Dialogue: 0,1:24:48.74,1:24:50.48,english,,0,0,0,,Big bars represent big numbers.
Dialogue: 0,1:24:48.74,1:24:50.48,chinese,,0,0,0,,大条形代表大数字。
Dialogue: 0,1:24:50.48,1:24:56.84,english,,0,0,0,,And so the idea, now, is when I hit a button here to get all of the small bars this way, all of the big bars this way.
Dialogue: 0,1:24:50.48,1:24:56.84,chinese,,0,0,0,,因此，现在的想法是，当我点击这里的按钮时，所有的小条形图都会这样显示，所有的大条形图都会这样显示。
Dialogue: 0,1:24:56.84,1:24:58.01,english,,0,0,0,,So just like our volunteers.
Dialogue: 0,1:24:56.84,1:24:58.01,chinese,,0,0,0,,就像我们的志愿者一样。
Dialogue: 0,1:24:58.01,1:25:02.37,english,,0,0,0,,But instead of holding lighted numbers, it's bars representing their magnitude.
Dialogue: 0,1:24:58.01,1:25:02.37,chinese,,0,0,0,,不过，这不是点亮的数字，而是代表其大小的条形图。
Dialogue: 0,1:25:02.37,1:25:07.19,english,,0,0,0,,So let's go ahead and start with, for instance, selection sort.
Dialogue: 0,1:25:02.37,1:25:07.19,chinese,,0,0,0,,那么，我们就从选择排序开始吧。
Dialogue: 0,1:25:07.19,1:25:14.82,english,,0,0,0,,And you'll see in pink, is being highlighted the current number that is being selected and then pulled all the way to the left.
Dialogue: 0,1:25:07.19,1:25:14.82,chinese,,0,0,0,,你会看到粉红色的当前数字被高亮显示，然后被拉到左边。
Dialogue: 0,1:25:14.82,1:25:16.22,english,,0,0,0,,So this is selection sort.
Dialogue: 0,1:25:14.82,1:25:16.22,chinese,,0,0,0,,这就是选择排序。
Dialogue: 0,1:25:16.22,1:25:20.42,english,,0,0,0,,And again, it's selecting the next smallest element.
Dialogue: 0,1:25:16.22,1:25:20.42,chinese,,0,0,0,,同样，它会选择下一个最小的元素。
Dialogue: 0,1:25:20.42,1:25:27.45,english,,0,0,0,,But you can see here, all the more visibly, that just like my human feet, we're taking a lot of steps.
Dialogue: 0,1:25:20.42,1:25:27.45,chinese,,0,0,0,,但在这里，你可以更明显地看到，就像我的脚一样，我们也在迈着大步。
Dialogue: 0,1:25:27.45,1:25:32.43,english,,0,0,0,,So is this algorithm touching these elements, again and again and again.
Dialogue: 0,1:25:27.45,1:25:32.43,chinese,,0,0,0,,那么，这种算法是否在一次又一次地接触这些元素呢？
Dialogue: 0,1:25:32.43,1:25:34.97,english,,0,0,0,,And this is why the n squared is really a thing.
Dialogue: 0,1:25:32.43,1:25:34.97,chinese,,0,0,0,,这就是 "n 平方 "真正存在的原因。
Dialogue: 0,1:25:34.97,1:25:37.32,english,,0,0,0,,There's got to be some inherent redundancy here.
Dialogue: 0,1:25:34.97,1:25:37.32,chinese,,0,0,0,,这里肯定有一些固有的冗余。
Dialogue: 0,1:25:37.32,1:25:40.28,english,,0,0,0,,Like, why do we keep looking at the same darn elements again and again?
Dialogue: 0,1:25:37.32,1:25:40.28,chinese,,0,0,0,,比如，为什么我们要反复查看那些该死的元素？
Dialogue: 0,1:25:40.28,1:25:43.07,english,,0,0,0,,We do, in terms of our pseudocode need to do so.
Dialogue: 0,1:25:40.28,1:25:43.07,chinese,,0,0,0,,从我们的伪代码来看，我们确实需要这样做。
Dialogue: 0,1:25:43.07,1:25:48.78,english,,0,0,0,,But it's this redundant comparisons that kind of explains why n squared is indeed the case.
Dialogue: 0,1:25:43.07,1:25:48.78,chinese,,0,0,0,,但是，正是这种多余的比较解释了为什么 n 平方确实是这种情况。
Dialogue: 0,1:25:48.78,1:25:49.49,english,,0,0,0,,So now it's done.
Dialogue: 0,1:25:48.78,1:25:49.49,chinese,,0,0,0,,现在已经完成了。
Dialogue: 0,1:25:49.49,1:25:50.97,english,,0,0,0,,Small bars here, big bars there.
Dialogue: 0,1:25:49.49,1:25:50.97,chinese,,0,0,0,,这里是小酒吧，那里是大酒吧。
Dialogue: 0,1:25:50.97,1:25:54.65,english,,0,0,0,,And I had to just keep talking there to kill time, because it's relatively slow.
Dialogue: 0,1:25:50.97,1:25:54.65,chinese,,0,0,0,,我不得不在那里不停地说话来消磨时间，因为速度相对较慢。
Dialogue: 0,1:25:54.65,1:25:58.64,english,,0,0,0,,Well, let me re-randomize the array, just so we start with a different order.
Dialogue: 0,1:25:54.65,1:25:58.64,chinese,,0,0,0,,好吧，让我重新随机排列，这样我们就能以不同的顺序开始了。
Dialogue: 0,1:25:58.64,1:26:00.38,english,,0,0,0,,And now let me click on bubble sort.
Dialogue: 0,1:25:58.64,1:26:00.38,chinese,,0,0,0,,现在让我点击冒泡排序。
Dialogue: 0,1:26:00.38,1:26:03.24,english,,0,0,0,,And you'll see similar idea, but different algorithm.
Dialogue: 0,1:26:00.38,1:26:03.24,chinese,,0,0,0,,你会看到类似的想法，但算法不同。
Dialogue: 0,1:26:03.24,1:26:09.99,english,,0,0,0,,So now, the two bars in pink are the two that are being compared and fixed, potentially, if they're out of order.
Dialogue: 0,1:26:03.24,1:26:09.99,chinese,,0,0,0,,因此，现在粉红色的两个条形图是正在比较和修正的两个条形图，如果它们的顺序不对的话。
Dialogue: 0,1:26:09.99,1:26:14.42,english,,0,0,0,,And you can see already that the biggest bars are bubbling their way up to the top.
Dialogue: 0,1:26:09.99,1:26:14.42,chinese,,0,0,0,,你已经可以看到，最大的条形图正在往上冒泡。
Dialogue: 0,1:26:14.42,1:26:22.74,english,,0,0,0,,But now, you can also see this redundancy, like we keep swooping through the list again and again, just like I kept walking back and forth.
Dialogue: 0,1:26:14.42,1:26:22.74,chinese,,0,0,0,,但现在，你也能看到这种冗余，就像我们不停地在列表中反复扫视，就像我不停地来回走动。
Dialogue: 0,1:26:22.74,1:26:23.79,english,,0,0,0,,And this is n squared.
Dialogue: 0,1:26:22.74,1:26:23.79,chinese,,0,0,0,,这就是 n 的平方。
Dialogue: 0,1:26:23.79,1:26:24.92,english,,0,0,0,,This is not that many bars.
Dialogue: 0,1:26:23.79,1:26:24.92,chinese,,0,0,0,,这样的酒吧并不多。
Dialogue: 0,1:26:24.92,1:26:25.42,english,,0,0,0,,What?
Dialogue: 0,1:26:25.42,1:26:27.83,english,,0,0,0,,10, 20, there's like 40 or something bars, I'm guessing.
Dialogue: 0,1:26:25.42,1:26:27.83,chinese,,0,0,0,,10个、20个，我猜大概有40个吧。
Dialogue: 0,1:26:27.83,1:26:31.56,english,,0,0,0,,That's pretty slow already just to sort 40 numbers.
Dialogue: 0,1:26:27.83,1:26:31.56,chinese,,0,0,0,,光是排序 40 个数字就已经很慢了。
Dialogue: 0,1:26:31.56,1:26:34.31,english,,0,0,0,,And I think it's going to get tedious if I keep talking over this.
Dialogue: 0,1:26:31.56,1:26:34.31,chinese,,0,0,0,,而且我觉得，如果我继续说下去，会变得很乏味。
Dialogue: 0,1:26:34.31,1:26:37.59,english,,0,0,0,,So let's just assume that this too is relatively slow.
Dialogue: 0,1:26:34.31,1:26:37.59,chinese,,0,0,0,,因此，我们姑且认为这也相对较慢。
Dialogue: 0,1:26:37.59,1:26:43.31,english,,0,0,0,,Had I gotten lucky and the list were almost sorted already, bubble sort would have been pretty fast.
Dialogue: 0,1:26:37.59,1:26:43.31,chinese,,0,0,0,,如果我运气好，列表几乎已经排序完毕，那么冒泡排序就会非常快。
Dialogue: 0,1:26:43.31,1:26:46.04,english,,0,0,0,,But this was a truly random array, so we did not get lucky.
Dialogue: 0,1:26:43.31,1:26:46.04,chinese,,0,0,0,,但这确实是一个随机排列，所以我们并不走运。
Dialogue: 0,1:26:46.04,1:26:50.01,english,,0,0,0,,So indeed, the worst case might be what's kicking in here.
Dialogue: 0,1:26:46.04,1:26:50.01,chinese,,0,0,0,,因此，最坏的情况可能就是这样。
Dialogue: 0,1:26:50.01,1:26:55.98,english,,0,0,0,,So I feel like it'll be anticlimactic, like holding in a sneeze, if I don't let you see the end of this.
Dialogue: 0,1:26:50.01,1:26:55.98,chinese,,0,0,0,,所以我觉得，如果我不让你看到结尾，就像憋着喷嚏一样，会让人觉得很反常。
Dialogue: 0,1:26:55.98,1:26:57.89,english,,0,0,0,,So here we go.
Dialogue: 0,1:26:55.98,1:26:57.89,chinese,,0,0,0,,那么，我们开始吧。
Dialogue: 0,1:26:57.89,1:27:00.11,english,,0,0,0,,Nothing interesting is about to happen.
Dialogue: 0,1:26:57.89,1:27:00.11,chinese,,0,0,0,,没什么有趣的事情要发生了。
Dialogue: 0,1:27:00.11,1:27:02.33,english,,0,0,0,,Almost done.
Dialogue: 0,1:27:00.11,1:27:02.33,chinese,,0,0,0,,快好了
Dialogue: 0,1:27:02.33,1:27:03.08,english,,0,0,0,,OK, done.
Dialogue: 0,1:27:03.08,1:27:05.89,english,,0,0,0,,All right, so thank you.
Dialogue: 0,1:27:03.08,1:27:05.89,chinese,,0,0,0,,好的，谢谢。
Dialogue: 0,1:27:05.89,1:27:06.71,english,,0,0,0,,[APPLAUSE]
Dialogue: 0,1:27:06.71,1:27:09.11,english,,0,0,0,,Thank you.
Dialogue: 0,1:27:09.11,1:27:12.50,english,,0,0,0,,So still somewhat slow though.
Dialogue: 0,1:27:09.11,1:27:12.50,chinese,,0,0,0,,所以速度还是有点慢。
Dialogue: 0,1:27:12.50,1:27:15.80,english,,0,0,0,,How though can we, perhaps, do a little better fundamentally?
Dialogue: 0,1:27:12.50,1:27:15.80,chinese,,0,0,0,,不过，我们怎么才能从根本上做得更好一些呢？
Dialogue: 0,1:27:15.80,1:27:19.07,english,,0,0,0,,So we can do so if we introduce yet another technique.
Dialogue: 0,1:27:15.80,1:27:19.07,chinese,,0,0,0,,因此，如果我们引入另一种技术，就可以做到这一点。
Dialogue: 0,1:27:19.07,1:27:22.13,english,,0,0,0,,And this one isn't so much a function of code as it is concept.
Dialogue: 0,1:27:19.07,1:27:22.13,chinese,,0,0,0,,这与其说是代码的作用，不如说是概念的作用。
Dialogue: 0,1:27:22.13,1:27:27.50,english,,0,0,0,,And it's something that you might have seen in the real world, but perhaps not so obviously so.
Dialogue: 0,1:27:22.13,1:27:27.50,chinese,,0,0,0,,你可能在现实世界中见过这种情况，但也许并不那么明显。
Dialogue: 0,1:27:27.50,1:27:34.97,english,,0,0,0,,So it turns out, in programming, recursion refers to the ability of a function to call itself.
Dialogue: 0,1:27:27.50,1:27:34.97,chinese,,0,0,0,,原来，在编程中，递归指的是函数调用自身的能力。
Dialogue: 0,1:27:34.97,1:27:43.85,english,,0,0,0,,In the world of mathematics, if you have a function f, if f appears on both the left side and the right side of a formula, that would be a recursive function in the math world too.
Dialogue: 0,1:27:34.97,1:27:43.85,chinese,,0,0,0,,在数学世界里，如果你有一个函数 f，如果 f 同时出现在一个公式的左边和右边，那么在数学世界里这也是一个递归函数。
Dialogue: 0,1:27:43.85,1:27:53.66,english,,0,0,0,,Whenever f is defined in terms of itself, or in our case, in compute-- in programming, any time a function calls itself, that function is said to be recursive.
Dialogue: 0,1:27:43.85,1:27:53.66,chinese,,0,0,0,,只要 f 是以自身为单位定义的，或者在我们的例子中以计算为单位定义的--在程序设计中，只要函数调用自身，该函数就被称为递归函数。
Dialogue: 0,1:27:53.66,1:27:57.37,english,,0,0,0,,And this is actually something we've seen already in class, even though we didn't call it as much.
Dialogue: 0,1:27:53.66,1:27:57.37,chinese,,0,0,0,,这其实是我们在课堂上已经看到过的，尽管我们没有说得那么多。
Dialogue: 0,1:27:57.37,1:28:07.76,english,,0,0,0,,So for instance, consider this pseudocode from earlier, whereby this was the pseudocode for searching via binary search, a whole bunch of doors.
Dialogue: 0,1:27:57.37,1:28:07.76,chinese,,0,0,0,,因此，举个例子，看一下之前的这个伪代码，这是通过二分查找进行搜索的伪代码，其中有一大堆门。
Dialogue: 0,1:28:07.76,1:28:12.60,english,,0,0,0,,If no doors are left returned false, that was the additional conditional we added.
Dialogue: 0,1:28:07.76,1:28:12.60,chinese,,0,0,0,,如果没有门，则返回 false，这是我们添加的附加条件。
Dialogue: 0,1:28:12.60,1:28:20.78,english,,0,0,0,,But then if number behind middle door returned true, and here's the interesting part, if number is less than middle door, search the left half.
Dialogue: 0,1:28:12.60,1:28:20.78,chinese,,0,0,0,,但如果中门后面的数字返回 true，有趣的是，如果数字小于中门，则搜索左半边。
Dialogue: 0,1:28:20.78,1:28:24.02,english,,0,0,0,,Else if number is greater than middle door, search the right half.
Dialogue: 0,1:28:20.78,1:28:24.02,chinese,,0,0,0,,否则，如果数字大于中门，则搜索右半部分。
Dialogue: 0,1:28:24.02,1:28:27.80,english,,0,0,0,,This pseudocode earlier was, itself, recursive.
Dialogue: 0,1:28:24.02,1:28:27.80,chinese,,0,0,0,,前面的伪代码本身就是递归的。
Dialogue: 0,1:28:27.80,1:28:28.34,english,,0,0,0,,Why?
Dialogue: 0,1:28:28.34,1:28:30.59,english,,0,0,0,,Because here is an algorithm for searching.
Dialogue: 0,1:28:28.34,1:28:30.59,chinese,,0,0,0,,因为这是一种搜索算法。
Dialogue: 0,1:28:30.59,1:28:32.65,english,,0,0,0,,But what's the algorithm telling us?
Dialogue: 0,1:28:30.59,1:28:32.65,chinese,,0,0,0,,但算法告诉了我们什么？
Dialogue: 0,1:28:32.65,1:28:37.28,english,,0,0,0,,Well, on this line and this line, it's telling us to search something else.
Dialogue: 0,1:28:32.65,1:28:37.28,chinese,,0,0,0,,嗯，在这一行和这一行，它告诉我们要搜索别的东西。
Dialogue: 0,1:28:37.28,1:28:47.65,english,,0,0,0,,So even though it's not explicitly defined in code as having a name, if this is a search algorithm, and yet the search algorithm is using a search algorithm, this pseudocode is recursive.
Dialogue: 0,1:28:37.28,1:28:47.65,chinese,,0,0,0,,因此，尽管代码中没有明确定义它的名称，但如果这是一个搜索算法，而搜索算法又使用了搜索算法，那么这个伪代码就是递归的。
Dialogue: 0,1:28:47.65,1:28:53.41,english,,0,0,0,,Now, that could quickly get you into trouble if a function just calls itself again and again and again.
Dialogue: 0,1:28:47.65,1:28:53.41,chinese,,0,0,0,,现在，如果函数一次又一次地调用自己，很快就会给你带来麻烦。
Dialogue: 0,1:28:53.41,1:29:01.84,english,,0,0,0,,But why, intuitively, is it not problematic that this code, this pseudocode, calls itself?
Dialogue: 0,1:28:53.41,1:29:01.84,chinese,,0,0,0,,但是，从直觉上讲，为什么这些代码、这些伪代码调用自己没有问题呢？
Dialogue: 0,1:29:01.84,1:29:03.46,english,,0,0,0,,Why will the algorithm still stop?
Dialogue: 0,1:29:01.84,1:29:03.46,chinese,,0,0,0,,为什么算法还会停止？
Dialogue: 0,1:29:03.46,1:29:03.97,english,,0,0,0,,Yeah.
Dialogue: 0,1:29:03.97,1:29:07.52,english,,0,0,0,,STUDENT: It has an exit condition, as in if there is no doors left, [INAUDIBLE]..
Dialogue: 0,1:29:03.97,1:29:07.52,chinese,,0,0,0,,学生：它有一个出口条件，就像如果没有门了，[听不清]......
Dialogue: 0,1:29:07.52,1:29:08.40,english,,0,0,0,,DAVID MALAN: Exactly.
Dialogue: 0,1:29:07.52,1:29:08.40,chinese,,0,0,0,,没错。
Dialogue: 0,1:29:08.40,1:29:10.86,english,,0,0,0,,It has some exit condition, like if no doors left.
Dialogue: 0,1:29:08.40,1:29:10.86,chinese,,0,0,0,,它有一些退出条件，比如没有门了。
Dialogue: 0,1:29:10.86,1:29:17.12,english,,0,0,0,,And more importantly, any time you search the left half, you're searching a smaller version of the problem.
Dialogue: 0,1:29:10.86,1:29:17.12,chinese,,0,0,0,,更重要的是，任何时候搜索左半部分，都是在搜索问题的缩小版。
Dialogue: 0,1:29:17.12,1:29:22.33,english,,0,0,0,,Any time you search the right half, you're searching a smaller version of the problem, literally half the size.
Dialogue: 0,1:29:17.12,1:29:22.33,chinese,,0,0,0,,任何时候搜索右半部分，都是在搜索问题的缩小版，实际上只有一半大小。
Dialogue: 0,1:29:22.33,1:29:24.27,english,,0,0,0,,So this is why, in the phone book, obviously
Dialogue: 0,1:29:22.33,1:29:24.27,chinese,,0,0,0,,这就是为什么在电话簿中，很明显
Dialogue: 0,1:29:24.27,1:29:29.56,english,,0,0,0,,I couldn't tear the phone book in half infinitely many times, because it was literally getting smaller each time.
Dialogue: 0,1:29:24.27,1:29:29.56,chinese,,0,0,0,,我不能把电话簿无限次地撕成两半，因为每撕一次，它就会变小一次。
Dialogue: 0,1:29:29.56,1:29:33.58,english,,0,0,0,,So recursion is this ability to call yourself, if you will.
Dialogue: 0,1:29:29.56,1:29:33.58,chinese,,0,0,0,,因此，如果你愿意，递归就是这种召唤自己的能力。
Dialogue: 0,1:29:33.58,1:29:42.01,english,,0,0,0,,But what's important is that you do it on a smaller, smaller problem, so that eventually, you have no more problems to solve or no more data, no more doors at all.
Dialogue: 0,1:29:33.58,1:29:42.01,chinese,,0,0,0,,但重要的是，你要在越来越小的问题上做这件事，这样最终，你就没有更多的问题要解决，也没有更多的数据，更没有更多的门了。
Dialogue: 0,1:29:42.01,1:29:46.21,english,,0,0,0,,So these two lines here would be the recursive elements here.
Dialogue: 0,1:29:42.01,1:29:46.21,chinese,,0,0,0,,因此，这两行就是递归元素。
Dialogue: 0,1:29:46.21,1:29:49.69,english,,0,0,0,,But if we go back to week 0, we could have used recursion in some other way.
Dialogue: 0,1:29:46.21,1:29:49.69,chinese,,0,0,0,,但如果回到第 0 周，我们本可以用其他方式使用递归。
Dialogue: 0,1:29:49.69,1:29:53.04,english,,0,0,0,,So this was our pseudocode for the phone book back in week 0.
Dialogue: 0,1:29:49.69,1:29:53.04,chinese,,0,0,0,,这就是我们在第 0 周时为电话簿编写的伪代码。
Dialogue: 0,1:29:53.04,1:29:59.05,english,,0,0,0,,And recall that we described these yellow lines as really representing a loop, some kind of cycle again and again.
Dialogue: 0,1:29:53.04,1:29:59.05,chinese,,0,0,0,,记得我们曾描述过，这些黄线实际上代表了一个循环，一种周而复始的循环。
Dialogue: 0,1:29:59.05,1:30:01.08,english,,0,0,0,,But there was a missed opportunity here.
Dialogue: 0,1:29:59.05,1:30:01.08,chinese,,0,0,0,,但这里错失了一个机会。
Dialogue: 0,1:30:01.08,1:30:05.67,english,,0,0,0,,What if I had re-implemented this code to do this?
Dialogue: 0,1:30:01.08,1:30:05.67,chinese,,0,0,0,,如果我重新实现这段代码，会怎样呢？
Dialogue: 0,1:30:05.67,1:30:14.61,english,,0,0,0,,Instead of saying open to middle of left half of book and then go back to line 3, like literally inducing a loop, or open to middle of right half a book and go back
Dialogue: 0,1:30:05.67,1:30:14.61,chinese,,0,0,0,,而不是说打开左半边书的中间部分，然后回到第 3 行，就像字面意义上的循环，或者打开右半边书的中间部分，然后回到第 3 行。
Dialogue: 0,1:30:14.61,1:30:23.73,english,,0,0,0,,to line 3 inducing another loop, why don't I just recognize that what I'm staring at now is a algorithm for searching a phone book?
Dialogue: 0,1:30:14.61,1:30:23.73,chinese,,0,0,0,,到第 3 行引起另一个循环，我为什么不承认我现在看到的是一个搜索电话簿的算法呢？
Dialogue: 0,1:30:23.73,1:30:30.75,english,,0,0,0,,And if you want to search a smaller phone book, like A through M or N through Z, we'll just use this same algorithm.
Dialogue: 0,1:30:23.73,1:30:30.75,chinese,,0,0,0,,如果你想搜索一个较小的电话簿，比如从 A 到 M 或从 N 到 Z，我们将使用相同的算法。
Dialogue: 0,1:30:30.75,1:30:35.10,english,,0,0,0,,So I can replace these yellow lines with just this, casually speaking.
Dialogue: 0,1:30:30.75,1:30:35.10,chinese,,0,0,0,,因此，我可以随便用这个来代替这些黄线。
Dialogue: 0,1:30:35.10,1:30:37.28,english,,0,0,0,,Search left half of book, search right half of book.
Dialogue: 0,1:30:35.10,1:30:37.28,chinese,,0,0,0,,搜索书的左半部分，搜索书的右半部分。
Dialogue: 0,1:30:37.28,1:30:43.63,english,,0,0,0,,This would be implicitly, and now I can shorten the whole thing, a recursive implementation of the phone book pseudocode from week 0.
Dialogue: 0,1:30:37.28,1:30:43.63,chinese,,0,0,0,,这将是隐式的，现在我可以缩短整个过程，是第 0 周电话簿伪代码的递归实现。
Dialogue: 0,1:30:43.63,1:30:48.90,english,,0,0,0,,And it's recursive, because if this is a search algorithm, and you're saying go search something else, that's fine.
Dialogue: 0,1:30:43.63,1:30:48.90,chinese,,0,0,0,,而且它是递归的，因为如果这是一种搜索算法，你说去搜索别的东西，那就没问题。
Dialogue: 0,1:30:48.90,1:30:49.89,english,,0,0,0,,That's recursive.
Dialogue: 0,1:30:48.90,1:30:49.89,chinese,,0,0,0,,这是递归的。
Dialogue: 0,1:30:49.89,1:30:55.71,english,,0,0,0,,But because you're searching half of the phone book, it's indeed going to get smaller and smaller.
Dialogue: 0,1:30:49.89,1:30:55.71,chinese,,0,0,0,,但是，因为你搜索的是电话簿的一半，所以它确实会越来越小。
Dialogue: 0,1:30:55.71,1:31:03.82,english,,0,0,0,,Even in the real world or the real real virtual world, you can see recursive data structures in the wild, or at least in Super Mario Brothers like this.
Dialogue: 0,1:30:55.71,1:31:03.82,chinese,,0,0,0,,即使在现实世界或真实的虚拟世界中，你也能看到递归数据结构的身影，至少在《超级马里奥兄弟》中是这样。
Dialogue: 0,1:31:03.82,1:31:10.86,english,,0,0,0,,Let me get rid of all the distractions here and focus on this pyramid, where you have one block, then two, then three, then four.
Dialogue: 0,1:31:03.82,1:31:10.86,chinese,,0,0,0,,让我摒弃一切杂念，把注意力集中在这个金字塔上，这里有一个区块，然后是两个区块，三个区块，四个区块。
Dialogue: 0,1:31:10.86,1:31:16.59,english,,0,0,0,,Well, this itself, is technically recursively-defined in the sense that, well, what is a pyramid of height for?
Dialogue: 0,1:31:10.86,1:31:16.59,chinese,,0,0,0,,那么，从技术上讲，这本身就是递归定义的，那么，高度的金字塔是用来做什么的呢？
Dialogue: 0,1:31:16.59,1:31:18.42,english,,0,0,0,,Well, it's really, what?
Dialogue: 0,1:31:16.59,1:31:18.42,chinese,,0,0,0,,嗯，这真的是什么？
Dialogue: 0,1:31:18.42,1:31:25.74,english,,0,0,0,,How would you describe a pyramid of height 4 is actually the same thing as a pyramid of--
Dialogue: 0,1:31:18.42,1:31:25.74,chinese,,0,0,0,,你怎么描述高度为 4 的金字塔与高度为 -- 的金字塔？
Dialogue: 0,1:31:25.74,1:31:28.20,english,,0,0,0,,STUDENT: Height 3.
Dialogue: 0,1:31:25.74,1:31:28.20,chinese,,0,0,0,,学生：身高 3.
Dialogue: 0,1:31:28.20,1:31:30.75,english,,0,0,0,,DAVID MALAN: --of height 3, plus 1 additional layer.
Dialogue: 0,1:31:28.20,1:31:30.75,chinese,,0,0,0,,3层高，外加一层。
Dialogue: 0,1:31:30.75,1:31:32.37,english,,0,0,0,,Well, what's a pyramid of height 3?
Dialogue: 0,1:31:30.75,1:31:32.37,chinese,,0,0,0,,那么，高度为 3 的金字塔是什么呢？
Dialogue: 0,1:31:32.37,1:31:36.25,english,,0,0,0,,Well, it's technically a pyramid of height 2 plus 1 additional layer.
Dialogue: 0,1:31:32.37,1:31:36.25,chinese,,0,0,0,,严格来说，这是一个高度为 2 加 1 层的金字塔。
Dialogue: 0,1:31:36.25,1:31:40.63,english,,0,0,0,,And so even physical structures can be recursive if you can define them in terms of itself.
Dialogue: 0,1:31:36.25,1:31:40.63,chinese,,0,0,0,,因此，即使是物理结构也可以是递归的，只要你能用它本身来定义它们。
Dialogue: 0,1:31:40.63,1:31:46.09,english,,0,0,0,,Now, at some point, you have to say that if the pyramid is of height 1, there's just one block.
Dialogue: 0,1:31:40.63,1:31:46.09,chinese,,0,0,0,,现在，你不得不说，如果金字塔的高度是 1，就只有一个积木块。
Dialogue: 0,1:31:46.09,1:31:50.44,english,,0,0,0,,You can't forever say it's defined in terms of a height negative 1, negative 2, you would never stop.
Dialogue: 0,1:31:46.09,1:31:50.44,chinese,,0,0,0,,你不能永远说它是以负 1 或负 2 的高度定义的，那样你就永远停不下来了。
Dialogue: 0,1:31:50.44,1:31:52.75,english,,0,0,0,,So you have to kind of have a special case there.
Dialogue: 0,1:31:50.44,1:31:52.75,chinese,,0,0,0,,因此，你必须有一种特殊的情况。
Dialogue: 0,1:31:52.75,1:31:55.71,english,,0,0,0,,But let's go ahead and translate something like this, in fact, to code.
Dialogue: 0,1:31:52.75,1:31:55.71,chinese,,0,0,0,,不过，让我们继续把这样的东西翻译成代码吧。
Dialogue: 0,1:31:55.71,1:32:03.09,english,,0,0,0,,Let me go back to VS code here, and let me implement a program called iteration that refers to a loop iterating.
Dialogue: 0,1:31:55.71,1:32:03.09,chinese,,0,0,0,,让我回到 VS 代码这里，让我实现一个名为迭代的程序，它指的是循环迭代。
Dialogue: 0,1:32:03.09,1:32:05.62,english,,0,0,0,,And let me implement a very simple pyramid like that.
Dialogue: 0,1:32:03.09,1:32:05.62,chinese,,0,0,0,,让我来实现这样一个非常简单的金字塔。
Dialogue: 0,1:32:05.62,1:32:08.37,english,,0,0,0,,So let me go ahead and include the CS50 library.
Dialogue: 0,1:32:05.62,1:32:08.37,chinese,,0,0,0,,因此，让我继续把 CS50 库包括进来。
Dialogue: 0,1:32:08.37,1:32:14.91,english,,0,0,0,,I'll include our standard io.h int main void, no command line arguments today.
Dialogue: 0,1:32:08.37,1:32:14.91,chinese,,0,0,0,,我将加入标准的 io.h int main void，今天没有命令行参数。
Dialogue: 0,1:32:14.91,1:32:16.21,english,,0,0,0,,And let's go ahead and do this.
Dialogue: 0,1:32:14.91,1:32:16.21,chinese,,0,0,0,,让我们开始吧。
Dialogue: 0,1:32:16.21,1:32:21.15,english,,0,0,0,,Let's declare a variable called height, ask the human for the height of this pyramid.
Dialogue: 0,1:32:16.21,1:32:21.15,chinese,,0,0,0,,让我们声明一个名为 height 的变量，向人类询问这座金字塔的高度。
Dialogue: 0,1:32:21.15,1:32:25.30,english,,0,0,0,,And then let's go ahead and draw a pyramid of that height.
Dialogue: 0,1:32:21.15,1:32:25.30,chinese,,0,0,0,,然后，让我们继续绘制这个高度的金字塔。
Dialogue: 0,1:32:25.30,1:32:27.58,english,,0,0,0,,Now, of course, draw does not yet exist.
Dialogue: 0,1:32:25.30,1:32:27.58,chinese,,0,0,0,,当然，现在抽奖还不存在。
Dialogue: 0,1:32:27.58,1:32:30.09,english,,0,0,0,,So I'm going to need to invent the draw function.
Dialogue: 0,1:32:27.58,1:32:30.09,chinese,,0,0,0,,所以我需要发明绘制函数。
Dialogue: 0,1:32:30.09,1:32:33.18,english,,0,0,0,,Let me go ahead and define a function that doesn't have a return value.
Dialogue: 0,1:32:30.09,1:32:33.18,chinese,,0,0,0,,让我继续定义一个没有返回值的函数。
Dialogue: 0,1:32:33.18,1:32:34.72,english,,0,0,0,,It's just going to have side effects.
Dialogue: 0,1:32:33.18,1:32:34.72,chinese,,0,0,0,,只是会有副作用。
Dialogue: 0,1:32:34.72,1:32:37.23,english,,0,0,0,,It's just going to print bricks on the screen, called draw.
Dialogue: 0,1:32:34.72,1:32:37.23,chinese,,0,0,0,,它只是在屏幕上打印砖块，称为绘制。
Dialogue: 0,1:32:37.23,1:32:40.24,english,,0,0,0,,And it takes in an integer, n, as its input.
Dialogue: 0,1:32:37.23,1:32:40.24,chinese,,0,0,0,,它的输入是一个整数 n。
Dialogue: 0,1:32:40.24,1:32:41.95,english,,0,0,0,,And how am I going to implement this?
Dialogue: 0,1:32:40.24,1:32:41.95,chinese,,0,0,0,,我该怎么实施呢？
Dialogue: 0,1:32:41.95,1:32:46.53,english,,0,0,0,,Well again, I want to print one block, then two, then three, then four.
Dialogue: 0,1:32:41.95,1:32:46.53,chinese,,0,0,0,,同样，我想打印一个区块，然后是两个、三个、四个。
Dialogue: 0,1:32:46.53,1:32:49.68,english,,0,0,0,,That's pretty straightforward, at least once you're comfortable with loops.
Dialogue: 0,1:32:46.53,1:32:49.68,chinese,,0,0,0,,这非常简单，至少在你熟悉了循环之后是这样。
Dialogue: 0,1:32:49.68,1:32:51.37,english,,0,0,0,,Let me go back to the code here.
Dialogue: 0,1:32:49.68,1:32:51.37,chinese,,0,0,0,,让我回到代码这里。
Dialogue: 0,1:32:51.37,1:32:58.26,english,,0,0,0,,Let me go ahead and say 4, int i, get 0. i is less than n. i plus plus.
Dialogue: 0,1:32:51.37,1:32:58.26,chinese,,0,0,0,,我先说 4，int i，得到 0，i 小于 n，i 加上 plus。
Dialogue: 0,1:32:58.26,1:33:01.17,english,,0,0,0,,And that's going to iterate, essentially row by row.
Dialogue: 0,1:32:58.26,1:33:01.17,chinese,,0,0,0,,这将逐行迭代。
Dialogue: 0,1:33:01.17,1:33:06.06,english,,0,0,0,,And on each row, I want to print out one, then two, then three, then four bricks.
Dialogue: 0,1:33:01.17,1:33:06.06,chinese,,0,0,0,,在每一行上，我要打印出一块砖，然后是两块、三块、四块。
Dialogue: 0,1:33:06.06,1:33:08.81,english,,0,0,0,,But I'm iterating from 0 to 1 to 2 to 3.
Dialogue: 0,1:33:06.06,1:33:08.81,chinese,,0,0,0,,但我是从 0 到 1 再到 2 再到 3 的迭代。
Dialogue: 0,1:33:08.81,1:33:09.69,english,,0,0,0,,So I think that's OK.
Dialogue: 0,1:33:08.81,1:33:09.69,chinese,,0,0,0,,所以，我觉得这没问题。
Dialogue: 0,1:33:09.69,1:33:19.38,english,,0,0,0,,I can just say something like 4 int j get 0. j, let's be clever about this, is less than i. j++.
Dialogue: 0,1:33:09.69,1:33:19.38,chinese,,0,0,0,,我可以这样说：4 int j 得到 0。j，让我们聪明点，小于 i。
Dialogue: 0,1:33:19.38,1:33:22.56,english,,0,0,0,,And now, let me go ahead and, inside of this loop,
Dialogue: 0,1:33:19.38,1:33:22.56,chinese,,0,0,0,,现在，让我继续前进，进入这个循环、
Dialogue: 0,1:33:22.56,1:33:27.13,english,,0,0,0,,I think I can get away with just printing out a single hash sign.
Dialogue: 0,1:33:22.56,1:33:27.13,chinese,,0,0,0,,我想我只需要打印出一个哈希符号就可以了。
Dialogue: 0,1:33:27.13,1:33:30.27,english,,0,0,0,,But then outside of that loop, similar to last week,
Dialogue: 0,1:33:27.13,1:33:30.27,chinese,,0,0,0,,但在这个循环之外，情况与上周类似、
Dialogue: 0,1:33:30.27,1:33:32.92,english,,0,0,0,,I'm going to print my new line separately.
Dialogue: 0,1:33:30.27,1:33:32.92,chinese,,0,0,0,,我要单独打印我的新生产线。
Dialogue: 0,1:33:32.92,1:33:34.47,english,,0,0,0,,So a little non-obvious at first.
Dialogue: 0,1:33:32.92,1:33:34.47,chinese,,0,0,0,,所以一开始有点不明显。
Dialogue: 0,1:33:34.47,1:33:38.79,english,,0,0,0,,But this outer loop iterates row by row, line by line, if you will.
Dialogue: 0,1:33:34.47,1:33:38.79,chinese,,0,0,0,,但这个外循环是逐行迭代的，也可以说是逐行迭代。
Dialogue: 0,1:33:38.79,1:33:46.89,english,,0,0,0,,And then the inner loop just makes sure that when i equals zero, let's see.
Dialogue: 0,1:33:38.79,1:33:46.89,chinese,,0,0,0,,然后内循环确保当 i 等于 0 时，让我们看看。
Dialogue: 0,1:33:46.89,1:33:48.96,english,,0,0,0,,Oh nope, there's a bug.
Dialogue: 0,1:33:46.89,1:33:48.96,chinese,,0,0,0,,哦，不，有一个错误。
Dialogue: 0,1:33:48.96,1:33:52.17,english,,0,0,0,,I need to make sure that it's j is less than i plus 1.
Dialogue: 0,1:33:48.96,1:33:52.17,chinese,,0,0,0,,我需要确保它的 j 小于 i 加 1。
Dialogue: 0,1:33:52.17,1:33:55.50,english,,0,0,0,,So when i is 0 on my first line of output,
Dialogue: 0,1:33:52.17,1:33:55.50,chinese,,0,0,0,,因此，当我的第一行输出中 i 为 0 时、
Dialogue: 0,1:33:55.50,1:33:57.60,english,,0,0,0,,I'm going to print out one brick.
Dialogue: 0,1:33:55.50,1:33:57.60,chinese,,0,0,0,,我要打印出一块砖。
Dialogue: 0,1:33:57.60,1:34:02.35,english,,0,0,0,,When i is 1, I'm going to print out two bricks and so forth.
Dialogue: 0,1:33:57.60,1:34:02.35,chinese,,0,0,0,,当 i 为 1 时，我会打印出两块砖，以此类推。
Dialogue: 0,1:34:02.35,1:34:05.46,english,,0,0,0,,So let me go ahead and run make iteration.
Dialogue: 0,1:34:02.35,1:34:05.46,chinese,,0,0,0,,所以，让我继续运行迭代。
Dialogue: 0,1:34:05.46,1:34:09.09,english,,0,0,0,,All right, and now, seems to compile.
Dialogue: 0,1:34:05.46,1:34:09.09,chinese,,0,0,0,,好了，现在似乎可以编译了。
Dialogue: 0,1:34:09.09,1:34:10.77,english,,0,0,0,,Uh oh, huh.
Dialogue: 0,1:34:09.09,1:34:10.77,chinese,,0,0,0,,哦
Dialogue: 0,1:34:10.77,1:34:12.90,english,,0,0,0,,Implicit declaration of function draw.
Dialogue: 0,1:34:10.77,1:34:12.90,chinese,,0,0,0,,函数 draw 的隐式声明。
Dialogue: 0,1:34:12.90,1:34:16.10,english,,0,0,0,,So I'm making week one mistakes again.
Dialogue: 0,1:34:12.90,1:34:16.10,chinese,,0,0,0,,所以我又犯了第一周的错误。
Dialogue: 0,1:34:16.10,1:34:16.66,english,,0,0,0,,What?
Dialogue: 0,1:34:16.66,1:34:17.57,english,,0,0,0,,Say again.
Dialogue: 0,1:34:17.57,1:34:18.45,english,,0,0,0,,STUDENT: [INAUDIBLE]
Dialogue: 0,1:34:17.57,1:34:18.45,chinese,,0,0,0,,学生：[听不清]
Dialogue: 0,1:34:18.45,1:34:19.20,english,,0,0,0,,DAVID MALAN: Yeah.
Dialogue: 0,1:34:18.45,1:34:19.20,chinese,,0,0,0,,是的
Dialogue: 0,1:34:19.20,1:34:20.32,english,,0,0,0,,The prototype is missing.
Dialogue: 0,1:34:19.20,1:34:20.32,chinese,,0,0,0,,原型不见了。
Dialogue: 0,1:34:20.32,1:34:21.30,english,,0,0,0,,I didn't declare it at the top.
Dialogue: 0,1:34:20.32,1:34:21.30,chinese,,0,0,0,,我没有在上面宣布。
Dialogue: 0,1:34:21.30,1:34:23.55,english,,0,0,0,,That's an easy fix, and the only time, really, it's
Dialogue: 0,1:34:21.30,1:34:23.55,chinese,,0,0,0,,这是很容易解决的问题，也是唯一一次，真的
Dialogue: 0,1:34:23.55,1:34:25.53,english,,0,0,0,,OK and necessary to copy paste.
Dialogue: 0,1:34:23.55,1:34:25.53,chinese,,0,0,0,,确定，需要复制粘贴。
Dialogue: 0,1:34:25.53,1:34:29.05,english,,0,0,0,,Let me copy the functions declaration there and it with a semicolon.
Dialogue: 0,1:34:25.53,1:34:29.05,chinese,,0,0,0,,让我把函数声明复制到这里，并加上分号。
Dialogue: 0,1:34:29.05,1:34:32.37,english,,0,0,0,,So that clang now knows that draw will exist.
Dialogue: 0,1:34:29.05,1:34:32.37,chinese,,0,0,0,,因此，铛现在知道绘制将存在。
Dialogue: 0,1:34:32.37,1:34:33.24,english,,0,0,0,,Make iteration.
Dialogue: 0,1:34:32.37,1:34:33.24,chinese,,0,0,0,,进行迭代。
Dialogue: 0,1:34:33.24,1:34:33.93,english,,0,0,0,,Now it works.
Dialogue: 0,1:34:33.24,1:34:33.93,chinese,,0,0,0,,现在好用了。
Dialogue: 0,1:34:33.93,1:34:36.09,english,,0,0,0,,Thank you. dot slash iteration.
Dialogue: 0,1:34:33.93,1:34:36.09,chinese,,0,0,0,,谢谢。
Dialogue: 0,1:34:36.09,1:34:37.83,english,,0,0,0,,We'll type in something like 4.
Dialogue: 0,1:34:36.09,1:34:37.83,chinese,,0,0,0,,我们将输入类似 4 的内容。
Dialogue: 0,1:34:37.83,1:34:43.34,english,,0,0,0,,And there we have it, our pyramid of height one, two, three, four, that looks pretty similar to this, albeit using hashes.
Dialogue: 0,1:34:37.83,1:34:43.34,chinese,,0,0,0,,这就是我们的金字塔，高度分别为 1、2、3、4，看起来与这个非常相似，尽管使用的是哈希值。
Dialogue: 0,1:34:43.34,1:34:49.11,english,,0,0,0,,So that's how we would have implemented this, like, two weeks ago in week one, maybe last week, but just using arrays.
Dialogue: 0,1:34:43.34,1:34:49.11,chinese,,0,0,0,,两周前的第一周，也许是上周，我们就是这样实现的，但只是使用数组。
Dialogue: 0,1:34:49.11,1:34:53.64,english,,0,0,0,,But let me propose that we could do something recursively instead.
Dialogue: 0,1:34:49.11,1:34:53.64,chinese,,0,0,0,,但我建议，我们可以用递归的方式来代替。
Dialogue: 0,1:34:53.64,1:34:55.48,english,,0,0,0,,Let me close this version of the code.
Dialogue: 0,1:34:53.64,1:34:55.48,chinese,,0,0,0,,请允许我结束这一版本的代码。
Dialogue: 0,1:34:55.48,1:35:01.80,english,,0,0,0,,And let me go back to VS Code and open up recursion.c, just to demonstrate something recursively.
Dialogue: 0,1:34:55.48,1:35:01.80,chinese,,0,0,0,,让我回到 VS 代码，打开 recursion.c，演示一下递归。
Dialogue: 0,1:35:01.80,1:35:04.42,english,,0,0,0,,And I'll do it incorrectly deliberately the first time.
Dialogue: 0,1:35:01.80,1:35:04.42,chinese,,0,0,0,,我第一次就会故意做错。
Dialogue: 0,1:35:04.42,1:35:06.63,english,,0,0,0,,So let me include cs50.h.
Dialogue: 0,1:35:04.42,1:35:06.63,chinese,,0,0,0,,因此，让我加入 cs50.h。
Dialogue: 0,1:35:06.63,1:35:08.85,english,,0,0,0,,Let me include standard io.h.
Dialogue: 0,1:35:06.63,1:35:08.85,chinese,,0,0,0,,让我加入标准 io.h。
Dialogue: 0,1:35:08.85,1:35:12.00,english,,0,0,0,,Let me do int main void.
Dialogue: 0,1:35:08.85,1:35:12.00,chinese,,0,0,0,,让我来做 int main void。
Dialogue: 0,1:35:12.00,1:35:17.91,english,,0,0,0,,And let me just blindly draw a pyramid initially of height 1.
Dialogue: 0,1:35:12.00,1:35:17.91,chinese,,0,0,0,,让我盲目地画一个高度为 1 的金字塔。
Dialogue: 0,1:35:17.91,1:35:21.91,english,,0,0,0,,But now in my draw function, let me re-implement it a little differently.
Dialogue: 0,1:35:17.91,1:35:21.91,chinese,,0,0,0,,但现在在我的绘制函数中，让我以一种稍有不同的方式重新实现它。
Dialogue: 0,1:35:21.91,1:35:24.84,english,,0,0,0,,So my draw function this time is still going to take a number n.
Dialogue: 0,1:35:21.91,1:35:24.84,chinese,,0,0,0,,因此，这次我的绘制函数仍将取一个数字 n。
Dialogue: 0,1:35:24.84,1:35:26.86,english,,0,0,0,,But that's how many hashes it's going to print.
Dialogue: 0,1:35:24.84,1:35:26.86,chinese,,0,0,0,,但这就是它要打印的哈希值。
Dialogue: 0,1:35:26.86,1:35:34.05,english,,0,0,0,,So let's do 4, int i get 0. i is less than n. i++.
Dialogue: 0,1:35:26.86,1:35:34.05,chinese,,0,0,0,,所以我们来做 4，int i 得到 0，i 小于 n，i++。
Dialogue: 0,1:35:34.05,1:35:38.44,english,,0,0,0,,Then let's go ahead and print out a single hash mark here.
Dialogue: 0,1:35:34.05,1:35:38.44,chinese,,0,0,0,,然后在这里打印出一个散列标记。
Dialogue: 0,1:35:38.44,1:35:44.29,english,,0,0,0,,And then after that, let's print out the end of the line, just as before.
Dialogue: 0,1:35:38.44,1:35:44.29,chinese,,0,0,0,,
Dialogue: 0,1:35:44.29,1:35:49.77,english,,0,0,0,,But now this, of course, is only going to draw a single row.
Dialogue: 0,1:35:44.29,1:35:49.77,chinese,,0,0,0,,当然，现在只能绘制单行。
Dialogue: 0,1:35:49.77,1:35:54.75,english,,0,0,0,,It's going to print out one hash or two hashes or three hashes, but only on one line.
Dialogue: 0,1:35:49.77,1:35:54.75,chinese,,0,0,0,,它会打印出一个哈希值、两个哈希值或三个哈希值，但只能打印在一行上。
Dialogue: 0,1:35:54.75,1:35:58.56,english,,0,0,0,,Let me now, incorrectly, but just kind of curiously say, all right.
Dialogue: 0,1:35:54.75,1:35:58.56,chinese,,0,0,0,,现在，让我以一种好奇的口吻说，好吧。
Dialogue: 0,1:35:58.56,1:36:04.86,english,,0,0,0,,Well, if this draws a pyramid of height 1, let's just use ourselves to draw a pyramid of height n plus 1.
Dialogue: 0,1:35:58.56,1:36:04.86,chinese,,0,0,0,,好吧，如果这画出的是高度为 1 的金字塔，那么我们就用自己来画一个高度为 n 加 1 的金字塔吧。
Dialogue: 0,1:36:04.86,1:36:08.37,english,,0,0,0,,So the first time I call draw, it will print out one hash.
Dialogue: 0,1:36:04.86,1:36:08.37,chinese,,0,0,0,,因此，我第一次调用 draw 时，它会打印出一个哈希值。
Dialogue: 0,1:36:08.37,1:36:13.77,english,,0,0,0,,Then the second time I call draw, it will print out two hashes, then three, then four.
Dialogue: 0,1:36:08.37,1:36:13.77,chinese,,0,0,0,,然后，当我第二次调用 draw 时，它会打印出两个哈希值，然后是三个，最后是四个。
Dialogue: 0,1:36:13.77,1:36:18.00,english,,0,0,0,,So we're kind of laying these bricks down from top to bottom.
Dialogue: 0,1:36:13.77,1:36:18.00,chinese,,0,0,0,,因此，我们要从上到下铺设这些砖块。
Dialogue: 0,1:36:18.00,1:36:20.67,english,,0,0,0,,Make recursion.
Dialogue: 0,1:36:18.00,1:36:20.67,chinese,,0,0,0,,进行递归。
Dialogue: 0,1:36:20.67,1:36:22.42,english,,0,0,0,,Whoops, I screwed up again.
Dialogue: 0,1:36:20.67,1:36:22.42,chinese,,0,0,0,,哎呀，我又搞砸了。
Dialogue: 0,1:36:22.42,1:36:24.63,english,,0,0,0,,So let's copy the prototype here.
Dialogue: 0,1:36:22.42,1:36:24.63,chinese,,0,0,0,,因此，让我们在这里复制原型。
Dialogue: 0,1:36:24.63,1:36:27.26,english,,0,0,0,,Let's put this down over here, semicolon.
Dialogue: 0,1:36:24.63,1:36:27.26,chinese,,0,0,0,,把这个放在这里，分号。
Dialogue: 0,1:36:27.26,1:36:28.60,english,,0,0,0,,Let's do this again.
Dialogue: 0,1:36:27.26,1:36:28.60,chinese,,0,0,0,,让我们再来一次。
Dialogue: 0,1:36:28.60,1:36:30.01,english,,0,0,0,,Make recursion.
Dialogue: 0,1:36:28.60,1:36:30.01,chinese,,0,0,0,,进行递归。
Dialogue: 0,1:36:30.01,1:36:32.41,english,,0,0,0,,All right, all good, dot slash recursion.
Dialogue: 0,1:36:30.01,1:36:32.41,chinese,,0,0,0,,好的，很好，点斜线递归。
Dialogue: 0,1:36:32.41,1:36:37.31,english,,0,0,0,,And now let me increase the size of my terminal window, just so you can see more of the output.
Dialogue: 0,1:36:32.41,1:36:37.31,chinese,,0,0,0,,现在让我增大终端窗口的大小，以便你能看到更多的输出。
Dialogue: 0,1:36:37.31,1:36:39.49,english,,0,0,0,,And here we have.
Dialogue: 0,1:36:37.31,1:36:39.49,chinese,,0,0,0,,这就是
Dialogue: 0,1:36:39.49,1:36:41.48,english,,0,0,0,,OK, bad, but thank you.
Dialogue: 0,1:36:39.49,1:36:41.48,chinese,,0,0,0,,好吧，不好，但还是谢谢你。
Dialogue: 0,1:36:41.48,1:36:43.52,english,,0,0,0,,So we have an infinitely tall pyramid.
Dialogue: 0,1:36:41.48,1:36:43.52,chinese,,0,0,0,,这样，我们就有了一个无限高的金字塔。
Dialogue: 0,1:36:43.52,1:36:47.02,english,,0,0,0,,And it's just flying across the screen, which is why it looks kind of like a mess.
Dialogue: 0,1:36:43.52,1:36:47.02,chinese,,0,0,0,,它在屏幕上飞来飞去，所以看起来有点乱。
Dialogue: 0,1:36:47.02,1:36:51.67,english,,0,0,0,,But I printed out a pyramid of height 1, and then 2, and then 3, and then 4.
Dialogue: 0,1:36:47.02,1:36:51.67,chinese,,0,0,0,,但我打印出了一个高度为 1 的金字塔，然后是 2，然后是 3，然后是 4。
Dialogue: 0,1:36:51.67,1:36:59.35,english,,0,0,0,,And unfortunately, what am I lacking any sort of quick condition, any kind of condition that says, wait a minute, when it's too tall, stop altogether.
Dialogue: 0,1:36:51.67,1:36:59.35,chinese,,0,0,0,,不幸的是，我缺乏任何一种快速条件，任何一种说 "等一下，太高了就完全停下来 "的条件。
Dialogue: 0,1:36:59.35,1:37:00.52,english,,0,0,0,,So this is an infinite loop.
Dialogue: 0,1:36:59.35,1:37:00.52,chinese,,0,0,0,,因此，这是一个无限循环。
Dialogue: 0,1:37:00.52,1:37:01.57,english,,0,0,0,,But it's not a loop.
Dialogue: 0,1:37:00.52,1:37:01.57,chinese,,0,0,0,,但这不是一个循环。
Dialogue: 0,1:37:01.57,1:37:03.25,english,,0,0,0,,It's a recursive call.
Dialogue: 0,1:37:01.57,1:37:03.25,chinese,,0,0,0,,这是一个递归调用。
Dialogue: 0,1:37:03.25,1:37:05.78,english,,0,0,0,,And actually, doing this in general, is very bad.
Dialogue: 0,1:37:03.25,1:37:05.78,chinese,,0,0,0,,实际上，一般来说，这样做是非常不好的。
Dialogue: 0,1:37:05.78,1:37:14.05,english,,0,0,0,,We'll see next week that if you call a function too many times, you can actually trigger yet another of those segmentation faults, because you're using too much memory, essentially.
Dialogue: 0,1:37:05.78,1:37:14.05,chinese,,0,0,0,,我们将在下周看到，如果你调用一个函数的次数过多，实际上会触发另一个分段故障，因为你使用了太多的内存。
Dialogue: 0,1:37:14.05,1:37:16.30,english,,0,0,0,,But for now, I haven't triggered that yet.
Dialogue: 0,1:37:14.05,1:37:16.30,chinese,,0,0,0,,但现在，我还没有触发这个功能。
Dialogue: 0,1:37:16.30,1:37:17.92,english,,0,0,0,,Control C is your friend to cancel.
Dialogue: 0,1:37:16.30,1:37:17.92,chinese,,0,0,0,,控制 C 是你取消操作的朋友。
Dialogue: 0,1:37:17.92,1:37:22.75,english,,0,0,0,,And as an aside, if you're playing along at home or playing with this code later, I actually cheated here.
Dialogue: 0,1:37:17.92,1:37:22.75,chinese,,0,0,0,,顺便说一句，如果你在家里玩，或者稍后再玩这个代码，实际上我在这里作弊了。
Dialogue: 0,1:37:22.75,1:37:29.35,english,,0,0,0,,We have a special clang configuration feature that prevents you from calling a function like that and creating a problem.
Dialogue: 0,1:37:22.75,1:37:29.35,chinese,,0,0,0,,我们有一个特殊的 clang 配置功能，可以防止你调用这样的函数而产生问题。
Dialogue: 0,1:37:29.35,1:37:31.59,english,,0,0,0,,I overrode it just for demonstration sake.
Dialogue: 0,1:37:29.35,1:37:31.59,chinese,,0,0,0,,为了演示，我把它推翻了。
Dialogue: 0,1:37:31.59,1:37:34.64,english,,0,0,0,,But odds are at home, you wouldn't be able to compile this code yourself.
Dialogue: 0,1:37:31.59,1:37:34.64,chinese,,0,0,0,,但在家里，你很可能无法自己编译这些代码。
Dialogue: 0,1:37:34.64,1:37:39.05,english,,0,0,0,,But let me do a proper version recursively of this code as follows.
Dialogue: 0,1:37:34.64,1:37:39.05,chinese,,0,0,0,,不过，让我来做一个适当版本的递归代码，如下所示。
Dialogue: 0,1:37:39.05,1:37:41.87,english,,0,0,0,,Let me go back into the code here.
Dialogue: 0,1:37:39.05,1:37:41.87,chinese,,0,0,0,,让我回到代码中。
Dialogue: 0,1:37:41.87,1:37:46.54,english,,0,0,0,,Let me go ahead and, not just blindly start drawing one, then two, then three layers of bricks.
Dialogue: 0,1:37:41.87,1:37:46.54,chinese,,0,0,0,,让我继续前进，不要盲目地开始画一层、两层、三层砖块。
Dialogue: 0,1:37:46.54,1:37:53.35,english,,0,0,0,,Let me prompt the human as before for the height of the pyramid they want using our get int function.
Dialogue: 0,1:37:46.54,1:37:53.35,chinese,,0,0,0,,让我像之前一样，使用 get int 函数提示人类他们想要的金字塔高度。
Dialogue: 0,1:37:53.35,1:37:55.67,english,,0,0,0,,And now let me call draw of height again.
Dialogue: 0,1:37:53.35,1:37:55.67,chinese,,0,0,0,,现在，请允许我再次提醒大家注意身高。
Dialogue: 0,1:37:55.67,1:37:58.33,english,,0,0,0,,So now I'm going back to the loop-like version.
Dialogue: 0,1:37:55.67,1:37:58.33,chinese,,0,0,0,,所以，现在我又回到了类似循环的版本。
Dialogue: 0,1:37:58.33,1:38:04.12,english,,0,0,0,,But instead of using a loop now, this is where recursion gets rather elegant, if you will.
Dialogue: 0,1:37:58.33,1:38:04.12,chinese,,0,0,0,,不过，现在不再使用循环了，可以说递归变得相当优雅。
Dialogue: 0,1:38:04.12,1:38:10.69,english,,0,0,0,,Let me go ahead and execute and code the draw function as follows.
Dialogue: 0,1:38:04.12,1:38:10.69,chinese,,0,0,0,,让我继续执行绘制函数并编写代码如下。
Dialogue: 0,1:38:10.69,1:38:18.52,english,,0,0,0,,Per your definition, if a pyramid of height 4 is really just a pyramid of height 3 plus another row, well, let's take that literally.
Dialogue: 0,1:38:10.69,1:38:18.52,chinese,,0,0,0,,根据你的定义，如果高度为 4 的金字塔实际上就是高度为 3 的金字塔再加一排，那我们就按字面意思来理解吧。
Dialogue: 0,1:38:18.52,1:38:19.99,english,,0,0,0,,Let me go back to my code.
Dialogue: 0,1:38:18.52,1:38:19.99,chinese,,0,0,0,,让我回到我的代码。
Dialogue: 0,1:38:19.99,1:38:29.38,english,,0,0,0,,And if you want to draw a pyramid of height 4, well go right ahead and draw a pyramid of height 3 first, or more generally, n minus 1.
Dialogue: 0,1:38:19.99,1:38:29.38,chinese,,0,0,0,,如果你想画一个高度为 4 的金字塔，那就先画一个高度为 3 的金字塔，或者更笼统地说，n 减 1。
Dialogue: 0,1:38:29.38,1:38:30.64,english,,0,0,0,,But what's the second step?
Dialogue: 0,1:38:29.38,1:38:30.64,chinese,,0,0,0,,但第二步是什么呢？
Dialogue: 0,1:38:30.64,1:38:34.51,english,,0,0,0,,Well, once you've drawn a pyramid of height 3, draw an extra row.
Dialogue: 0,1:38:30.64,1:38:34.51,chinese,,0,0,0,,那么，一旦你画出了高度为 3 的金字塔，就再多画一行。
Dialogue: 0,1:38:34.51,1:38:37.19,english,,0,0,0,,So I at least have to bite off that part of the problem myself.
Dialogue: 0,1:38:34.51,1:38:37.19,chinese,,0,0,0,,因此，我至少要自己解决这部分问题。
Dialogue: 0,1:38:37.19,1:38:41.53,english,,0,0,0,,So let me just do for int i get 0. i is less than n i++.
Dialogue: 0,1:38:37.19,1:38:41.53,chinese,,0,0,0,,因此，让我对 int i 进行计算，得到 0，i 小于 n i++。
Dialogue: 0,1:38:41.53,1:38:46.01,english,,0,0,0,,And let me, the programmer of this function, print out my hashes.
Dialogue: 0,1:38:41.53,1:38:46.01,chinese,,0,0,0,,让我，这个函数的程序员，打印出我的哈希值。
Dialogue: 0,1:38:46.01,1:38:50.35,english,,0,0,0,,And then at the very bottom, print out a new line so the cursor moves to the next line.
Dialogue: 0,1:38:46.01,1:38:50.35,chinese,,0,0,0,,然后在最下面打印出一行新的内容，这样光标就会移动到下一行。
Dialogue: 0,1:38:50.35,1:38:58.57,english,,0,0,0,,But this is kind of elegant now, I dare say, in that draw is recursive, because I'm literally translating from English to C code,
Dialogue: 0,1:38:50.35,1:38:58.57,chinese,,0,0,0,,但我敢说，现在这已经很优雅了，因为绘制是递归的，因为我实际上是从英语翻译成 C 代码、
Dialogue: 0,1:38:58.57,1:39:02.05,english,,0,0,0,,this idea that a pyramid of height 4 is really just a pyramid of height 3.
Dialogue: 0,1:38:58.57,1:39:02.05,chinese,,0,0,0,,高度为 4 的金字塔实际上只是高度为 3 的金字塔。
Dialogue: 0,1:39:02.05,1:39:03.64,english,,0,0,0,,So I do that first.
Dialogue: 0,1:39:02.05,1:39:03.64,chinese,,0,0,0,,所以我先做这个。
Dialogue: 0,1:39:03.64,1:39:06.56,english,,0,0,0,,And I'm sort of trusting that this will work.
Dialogue: 0,1:39:03.64,1:39:06.56,chinese,,0,0,0,,我有点相信这会成功。
Dialogue: 0,1:39:06.56,1:39:09.80,english,,0,0,0,,Then I just have to lay one more layer of bricks, four of them.
Dialogue: 0,1:39:06.56,1:39:09.80,chinese,,0,0,0,,然后我只需再铺一层砖，一共四层。
Dialogue: 0,1:39:09.80,1:39:15.52,english,,0,0,0,,So if n is 4, this is just a simple for loop, a la week 1, that will print out an additional layer.
Dialogue: 0,1:39:09.80,1:39:15.52,chinese,,0,0,0,,因此，如果 n 为 4，这只是一个简单的 for 循环，就像第 1 周那样，会打印出额外的一层。
Dialogue: 0,1:39:15.52,1:39:18.61,english,,0,0,0,,But this, of course, is going to be problematic eventually.
Dialogue: 0,1:39:15.52,1:39:18.61,chinese,,0,0,0,,当然，这最终会成为问题。
Dialogue: 0,1:39:18.61,1:39:20.03,english,,0,0,0,,Why?
Dialogue: 0,1:39:20.03,1:39:22.67,english,,0,0,0,,It's not done yet, this program.
Dialogue: 0,1:39:20.03,1:39:22.67,chinese,,0,0,0,,这个项目还没有完成。
Dialogue: 0,1:39:22.67,1:39:27.64,english,,0,0,0,,How many times will draw call itself in this model?
Dialogue: 0,1:39:22.67,1:39:27.64,chinese,,0,0,0,,在这个模型中，绘制会自己调用多少次？
Dialogue: 0,1:39:27.64,1:39:28.64,english,,0,0,0,,STUDENT: It's infinite.
Dialogue: 0,1:39:27.64,1:39:28.64,chinese,,0,0,0,,学生：是无限的。
Dialogue: 0,1:39:28.64,1:39:30.09,english,,0,0,0,,DAVID MALAN: Infinitely many times.
Dialogue: 0,1:39:28.64,1:39:30.09,chinese,,0,0,0,,无数次。
Dialogue: 0,1:39:30.09,1:39:30.81,english,,0,0,0,,Why?
Dialogue: 0,1:39:30.81,1:39:34.17,english,,0,0,0,,STUDENT: Because there's no quit function.
Dialogue: 0,1:39:30.81,1:39:34.17,chinese,,0,0,0,,学生：因为没有退出功能。
Dialogue: 0,1:39:34.17,1:39:36.45,english,,0,0,0,,DAVID MALAN: Yeah, there's no equivalent of quit.
Dialogue: 0,1:39:34.17,1:39:36.45,chinese,,0,0,0,,是的，不存在退出。
Dialogue: 0,1:39:36.45,1:39:41.05,english,,0,0,0,,Like, if you've printed enough already, then quit, well, how do we capture that?
Dialogue: 0,1:39:36.45,1:39:41.05,chinese,,0,0,0,,比如，如果你已经印得够多了，那就不印了，那么，我们该怎么捕捉呢？
Dialogue: 0,1:39:41.05,1:39:43.32,english,,0,0,0,,Well, I don't think we want this to go negative.
Dialogue: 0,1:39:41.05,1:39:43.32,chinese,,0,0,0,,我想我们都不希望这件事变得消极。
Dialogue: 0,1:39:43.32,1:39:46.57,english,,0,0,0,,It would make no sense to draw a negative height pyramid.
Dialogue: 0,1:39:43.32,1:39:46.57,chinese,,0,0,0,,画一个负高度的金字塔是毫无意义的。
Dialogue: 0,1:39:46.57,1:39:53.65,english,,0,0,0,,So I think we can just pluck off, as the programmer, an easy case, an easy answer, a so-called base case.
Dialogue: 0,1:39:46.57,1:39:53.65,chinese,,0,0,0,,所以我认为，作为程序员，我们可以从一个简单的案例、一个简单的答案、一个所谓的基础案例中摘取下来。
Dialogue: 0,1:39:53.65,1:39:54.90,english,,0,0,0,,And I'm just going to do this.
Dialogue: 0,1:39:53.65,1:39:54.90,chinese,,0,0,0,,我只是要做到这一点。
Dialogue: 0,1:39:54.90,1:40:02.83,english,,0,0,0,,At the top of my draw function, let me just say, if n is less than or, heck, less than or equal to 0, that's it.
Dialogue: 0,1:39:54.90,1:40:02.83,chinese,,0,0,0,,在我的绘制函数的顶端，我只想说，如果 n 小于或等于 0，就可以了。
Dialogue: 0,1:40:02.83,1:40:04.53,english,,0,0,0,,Go ahead and just return.
Dialogue: 0,1:40:02.83,1:40:04.53,chinese,,0,0,0,,去吧，直接回来。
Dialogue: 0,1:40:04.53,1:40:06.03,english,,0,0,0,,There's nothing more to do.
Dialogue: 0,1:40:04.53,1:40:06.03,chinese,,0,0,0,,没什么可做的了。
Dialogue: 0,1:40:06.03,1:40:13.29,english,,0,0,0,,And that simple condition, technically known as a base case, will ensure that the code doesn't run forever.
Dialogue: 0,1:40:06.03,1:40:13.29,chinese,,0,0,0,,这个简单的条件在技术上被称为 "基本情况"，它将确保代码不会永远运行下去。
Dialogue: 0,1:40:13.29,1:40:13.86,english,,0,0,0,,Why?
Dialogue: 0,1:40:13.86,1:40:17.73,english,,0,0,0,,Well, suppose that draw is called with an argument of 4.
Dialogue: 0,1:40:13.86,1:40:17.73,chinese,,0,0,0,,那么，假设调用 draw 时的参数是 4。
Dialogue: 0,1:40:17.73,1:40:20.58,english,,0,0,0,,4 is, of course, not less than 0, so we don't return.
Dialogue: 0,1:40:17.73,1:40:20.58,chinese,,0,0,0,,当然，4 不小于 0，所以我们不返回。
Dialogue: 0,1:40:20.58,1:40:22.59,english,,0,0,0,,But we do draw a pyramid of height 3.
Dialogue: 0,1:40:20.58,1:40:22.59,chinese,,0,0,0,,但我们确实画出了一个高度为 3 的金字塔。
Dialogue: 0,1:40:22.59,1:40:24.87,english,,0,0,0,,And here's where things get a little mentally tricky.
Dialogue: 0,1:40:22.59,1:40:24.87,chinese,,0,0,0,,这就是事情变得有点棘手的地方。
Dialogue: 0,1:40:24.87,1:40:28.32,english,,0,0,0,,You don't move on to line 20 until draw has been called.
Dialogue: 0,1:40:24.87,1:40:28.32,chinese,,0,0,0,,在叫出平局之前，你不会转到第 20 行。
Dialogue: 0,1:40:28.32,1:40:34.23,english,,0,0,0,,So when draw is called with an argument of 3, it's as though you're executing from the top of this function again.
Dialogue: 0,1:40:28.32,1:40:34.23,chinese,,0,0,0,,因此，在调用参数为 3 的 draw 时，就好像再次从这个函数的顶层开始执行一样。
Dialogue: 0,1:40:34.23,1:40:35.52,english,,0,0,0,,3 is not less than 0.
Dialogue: 0,1:40:34.23,1:40:35.52,chinese,,0,0,0,,3 不小于 0。
Dialogue: 0,1:40:35.52,1:40:36.33,english,,0,0,0,,So what do you do?
Dialogue: 0,1:40:35.52,1:40:36.33,chinese,,0,0,0,,那你该怎么办？
Dialogue: 0,1:40:36.33,1:40:38.49,english,,0,0,0,,You draw 2.
Dialogue: 0,1:40:36.33,1:40:38.49,chinese,,0,0,0,,你抽到 2。
Dialogue: 0,1:40:38.49,1:40:39.54,english,,0,0,0,,How do you draw 2?
Dialogue: 0,1:40:38.49,1:40:39.54,chinese,,0,0,0,,怎么绘制 2？
Dialogue: 0,1:40:39.54,1:40:41.95,english,,0,0,0,,Well, 2 is not less than 0, so you don't return.
Dialogue: 0,1:40:39.54,1:40:41.95,chinese,,0,0,0,,那么，2 不小于 0，所以你不能返回。
Dialogue: 0,1:40:41.95,1:40:43.05,english,,0,0,0,,So you draw 1.
Dialogue: 0,1:40:41.95,1:40:43.05,chinese,,0,0,0,,所以你抽到了 1。
Dialogue: 0,1:40:43.05,1:40:44.37,english,,0,0,0,,Got to be careful here.
Dialogue: 0,1:40:43.05,1:40:44.37,chinese,,0,0,0,,在这里一定要小心。
Dialogue: 0,1:40:44.37,1:40:45.24,english,,0,0,0,,Draw 1.
Dialogue: 0,1:40:45.24,1:40:47.34,english,,0,0,0,,And now, we go ahead back to the beginning.
Dialogue: 0,1:40:45.24,1:40:47.34,chinese,,0,0,0,,现在，我们回到开头。
Dialogue: 0,1:40:47.34,1:40:48.09,english,,0,0,0,,How do you draw 1?
Dialogue: 0,1:40:47.34,1:40:48.09,chinese,,0,0,0,,怎么画 1？
Dialogue: 0,1:40:48.09,1:40:50.43,english,,0,0,0,,Well, 1 is not less than 0, so you don't return.
Dialogue: 0,1:40:48.09,1:40:50.43,chinese,,0,0,0,,那么，1 不小于 0，所以你不能返回。
Dialogue: 0,1:40:50.43,1:40:53.40,english,,0,0,0,,You draw height 0.
Dialogue: 0,1:40:50.43,1:40:53.40,chinese,,0,0,0,,你绘制的高度为 0。
Dialogue: 0,1:40:53.40,1:40:54.51,english,,0,0,0,,How do you draw height 0?
Dialogue: 0,1:40:53.40,1:40:54.51,chinese,,0,0,0,,高度 0 怎么绘制？
Dialogue: 0,1:40:54.51,1:40:55.11,english,,0,0,0,,Wait a minute.
Dialogue: 0,1:40:54.51,1:40:55.11,chinese,,0,0,0,,等一下
Dialogue: 0,1:40:55.11,1:40:57.66,english,,0,0,0,,0 is less than or equal to 0.
Dialogue: 0,1:40:55.11,1:40:57.66,chinese,,0,0,0,,0 小于或等于 0。
Dialogue: 0,1:40:57.66,1:40:58.98,english,,0,0,0,,And you return.
Dialogue: 0,1:40:57.66,1:40:58.98,chinese,,0,0,0,,你回来了
Dialogue: 0,1:40:58.98,1:41:02.10,english,,0,0,0,,And so it's kind of like this mental stack, this to do list.
Dialogue: 0,1:40:58.98,1:41:02.10,chinese,,0,0,0,,因此，这就像是一个心理堆栈，一个待办事项清单。
Dialogue: 0,1:41:02.10,1:41:12.84,english,,0,0,0,,You keep postponing, executing these lower lines of code, because you keep restarting, restarting, restarting the draw function until, finally, one of those function calls says there's nothing to do,
Dialogue: 0,1:41:02.10,1:41:12.84,chinese,,0,0,0,,你不断推迟、执行这些较低的代码行，因为你不断重启、重启、重启绘制函数，直到最后，其中一个函数调用说没有事情可做、
Dialogue: 0,1:41:12.84,1:41:13.53,english,,0,0,0,,return.
Dialogue: 0,1:41:13.53,1:41:16.53,english,,0,0,0,,And now the whole thing starts to unravel, if you will.
Dialogue: 0,1:41:13.53,1:41:16.53,chinese,,0,0,0,,现在，整个事情开始变得扑朔迷离。
Dialogue: 0,1:41:16.53,1:41:18.33,english,,0,0,0,,And you pick back up where you left off.
Dialogue: 0,1:41:16.53,1:41:18.33,chinese,,0,0,0,,然后你再回到你离开的地方。
Dialogue: 0,1:41:18.33,1:41:20.30,english,,0,0,0,,And this is, perhaps, the best scenario.
Dialogue: 0,1:41:18.33,1:41:20.30,chinese,,0,0,0,,这也许是最好的方案。
Dialogue: 0,1:41:20.30,1:41:21.30,english,,0,0,0,,We won't do it in class.
Dialogue: 0,1:41:20.30,1:41:21.30,chinese,,0,0,0,,我们不会在课堂上做。
Dialogue: 0,1:41:21.30,1:41:31.48,english,,0,0,0,,But if you'd like to wrestle through this on your own using debug50 to keep stepping into, step into, step into, each of those lines, logically, you'll see exactly what's actually happening.
Dialogue: 0,1:41:21.30,1:41:31.48,chinese,,0,0,0,,不过，如果你想自己用 debug50 来对每一行进行步进、步进、步进，那么从逻辑上讲，你就会明白到底发生了什么。
Dialogue: 0,1:41:31.48,1:41:37.74,english,,0,0,0,,So let me go to my terminal and do make recursion, which is now this correct version of the code, dot slash recursion.
Dialogue: 0,1:41:31.48,1:41:37.74,chinese,,0,0,0,,让我进入终端，执行 make recursion，这就是代码的正确版本，点斜线递归。
Dialogue: 0,1:41:37.74,1:41:39.24,english,,0,0,0,,Let's type in a height of 4.
Dialogue: 0,1:41:37.74,1:41:39.24,chinese,,0,0,0,,让我们输入 4 的高度。
Dialogue: 0,1:41:39.24,1:41:47.91,english,,0,0,0,,And voila, now we have that same pyramid, not using iteration per se, though admittedly, we're using iteration to print the additional layer.
Dialogue: 0,1:41:39.24,1:41:47.91,chinese,,0,0,0,,瞧，现在我们有了同样的金字塔，虽然我们使用迭代来打印附加层，但本身并没有使用迭代。
Dialogue: 0,1:41:47.91,1:41:55.12,english,,0,0,0,,We're now using draw recursively to print all of the smaller pyramids that need come before it.
Dialogue: 0,1:41:47.91,1:41:55.12,chinese,,0,0,0,,我们现在使用 draw 递归来打印在它之前的所有小金字塔。
Dialogue: 0,1:41:55.12,1:41:57.37,english,,0,0,0,,STUDENT: Can you only use recursion for void function?
Dialogue: 0,1:41:55.12,1:41:57.37,chinese,,0,0,0,,学生：只能在 void 函数中使用递归吗？
Dialogue: 0,1:41:57.37,1:41:58.12,english,,0,0,0,,[INAUDIBLE]
Dialogue: 0,1:41:58.12,1:41:58.79,english,,0,0,0,,DAVID MALAN: No.
Dialogue: 0,1:41:58.12,1:41:58.79,chinese,,0,0,0,,DAVID MALAN: No.
Dialogue: 0,1:41:58.79,1:42:01.07,english,,0,0,0,,Question is, can you only use recursion with a void function?
Dialogue: 0,1:41:58.79,1:42:01.07,chinese,,0,0,0,,问题是，只能在 void 函数中使用递归吗？
Dialogue: 0,1:42:01.07,1:42:01.92,english,,0,0,0,,No, not at all.
Dialogue: 0,1:42:01.07,1:42:01.92,chinese,,0,0,0,,不，一点也不。
Dialogue: 0,1:42:01.92,1:42:11.36,english,,0,0,0,,In fact, it's very common to have a return value like an integer or something else so that you can actually do something constructively with that actual value.
Dialogue: 0,1:42:01.92,1:42:11.36,chinese,,0,0,0,,事实上，通常情况下，返回值是一个整数或其他值，这样你就可以用这个实际值做一些有建设性的事情。
Dialogue: 0,1:42:11.36,1:42:13.19,english,,0,0,0,,Other questions on this.
Dialogue: 0,1:42:11.36,1:42:13.19,chinese,,0,0,0,,其他相关问题。
Dialogue: 0,1:42:13.19,1:42:15.29,english,,0,0,0,,STUDENT: When is line 21 getting executed?
Dialogue: 0,1:42:13.19,1:42:15.29,chinese,,0,0,0,,学生：第 21 行什么时候执行？
Dialogue: 0,1:42:15.29,1:42:16.79,english,,0,0,0,,DAVID MALAN: Say it a little louder.
Dialogue: 0,1:42:15.29,1:42:16.79,chinese,,0,0,0,,说大声点。
Dialogue: 0,1:42:16.79,1:42:18.77,english,,0,0,0,,STUDENT: When is line 21 getting executed?
Dialogue: 0,1:42:16.79,1:42:18.77,chinese,,0,0,0,,学生：第 21 行什么时候执行？
Dialogue: 0,1:42:18.77,1:42:20.85,english,,0,0,0,,DAVID MALAN: When is line 21 getting executed?
Dialogue: 0,1:42:18.77,1:42:20.85,chinese,,0,0,0,,第 21 行何时执行？
Dialogue: 0,1:42:20.85,1:42:26.60,english,,0,0,0,,So if you continue to-- let me scroll down a bit more so you can see the top of the code.
Dialogue: 0,1:42:20.85,1:42:26.60,chinese,,0,0,0,,所以，如果你继续 -- 让我再向下滚动一点，这样你就能看到代码的顶部。
Dialogue: 0,1:42:26.60,1:42:35.31,english,,0,0,0,,So line 21 will be executed once line 19 is done executing itself.
Dialogue: 0,1:42:26.60,1:42:35.31,chinese,,0,0,0,,因此，一旦第 19 行执行完毕，第 21 行就会被执行。
Dialogue: 0,1:42:35.31,1:42:40.79,english,,0,0,0,,Now, in the story I told, we kept calling draw again, again, again.
Dialogue: 0,1:42:35.31,1:42:40.79,chinese,,0,0,0,,现在，在我讲述的故事中，我们不停地呼叫抽奖，一次又一次。
Dialogue: 0,1:42:40.79,1:42:48.51,english,,0,0,0,,But as soon as one of those function calls where n equals 0 returns immediately, then we don't keep drawing again and again.
Dialogue: 0,1:42:40.79,1:42:48.51,chinese,,0,0,0,,但是，只要其中一个 n 等于 0 的函数调用立即返回，我们就不会反复绘制了。
Dialogue: 0,1:42:48.51,1:42:59.30,english,,0,0,0,,So now if you kind of think of the process as reversing, then you continue to line 21, then line 21 again, then line 21 again, and as the sort of logic unravels.
Dialogue: 0,1:42:48.51,1:42:59.30,chinese,,0,0,0,,所以，现在如果你把这个过程看作是反向的，那么你就可以继续到第 21 行，然后再到第 21 行，然后再到第 21 行，这样的逻辑就解开了。
Dialogue: 0,1:42:59.30,1:43:03.53,english,,0,0,0,,And next week, we'll actually paint a picture of what's actually happening in the computer's memory.
Dialogue: 0,1:42:59.30,1:43:03.53,chinese,,0,0,0,,下周，我们将实际描绘计算机内存中的实际情况。
Dialogue: 0,1:43:03.53,1:43:07.95,english,,0,0,0,,But for now, it's just, it's very similar to the pseudocode for the phone book.
Dialogue: 0,1:43:03.53,1:43:07.95,chinese,,0,0,0,,但就目前而言，这与电话簿的伪代码非常相似。
Dialogue: 0,1:43:07.95,1:43:09.68,english,,0,0,0,,You're just searching again and again.
Dialogue: 0,1:43:07.95,1:43:09.68,chinese,,0,0,0,,你只是在一次又一次地寻找。
Dialogue: 0,1:43:09.68,1:43:14.40,english,,0,0,0,,But you're waiting until the very end to get back the final result.
Dialogue: 0,1:43:09.68,1:43:14.40,chinese,,0,0,0,,但你要等到最后才能得到最终结果。
Dialogue: 0,1:43:14.40,1:43:18.83,english,,0,0,0,,Google now, who I keep mentioning by coincidence today, is full of programmers of course.
Dialogue: 0,1:43:14.40,1:43:18.83,chinese,,0,0,0,,当然，我今天一直不约而同地提到的谷歌现在也有很多程序员。
Dialogue: 0,1:43:18.83,1:43:20.60,english,,0,0,0,,Here's a fun exercise.
Dialogue: 0,1:43:18.83,1:43:20.60,chinese,,0,0,0,,这里有一个有趣的练习。
Dialogue: 0,1:43:20.60,1:43:23.43,english,,0,0,0,,Let me go back to a browser.
Dialogue: 0,1:43:20.60,1:43:23.43,chinese,,0,0,0,,让我回到浏览器上。
Dialogue: 0,1:43:23.43,1:43:27.98,english,,0,0,0,,I'm going to go ahead and search for recursion, because I want to learn a little something about recursion.
Dialogue: 0,1:43:23.43,1:43:27.98,chinese,,0,0,0,,我要继续搜索递归，因为我想学习一些关于递归的知识。
Dialogue: 0,1:43:27.98,1:43:30.23,english,,0,0,0,,Here is kind of an internet meme or joke.
Dialogue: 0,1:43:27.98,1:43:30.23,chinese,,0,0,0,,这是一个网络流行语或笑话。
Dialogue: 0,1:43:30.23,1:43:35.36,english,,0,0,0,,If I zoom in here, the engineers at Google are kind of funny.
Dialogue: 0,1:43:30.23,1:43:35.36,chinese,,0,0,0,,如果我放大这里，谷歌的工程师们就会觉得很有趣。
Dialogue: 0,1:43:35.36,1:43:37.90,english,,0,0,0,,See why?
Dialogue: 0,1:43:37.90,1:43:38.79,english,,0,0,0,,STUDENT: Ah.
Dialogue: 0,1:43:37.90,1:43:38.79,chinese,,0,0,0,,学生：啊。
Dialogue: 0,1:43:38.79,1:43:40.54,english,,0,0,0,,DAVID MALAN: Ah, there you go.
Dialogue: 0,1:43:38.79,1:43:40.54,chinese,,0,0,0,,啊，这就对了。
Dialogue: 0,1:43:40.54,1:43:41.74,english,,0,0,0,,Yes.
Dialogue: 0,1:43:41.74,1:43:43.03,english,,0,0,0,,Yes, this is recursion.
Dialogue: 0,1:43:41.74,1:43:43.03,chinese,,0,0,0,,是的，这就是递归。
Dialogue: 0,1:43:43.03,1:43:48.49,english,,0,0,0,,And there's going to be so many memes you'll come across now, where recursion, like if you've ever pointed a camera at the TV that's
Dialogue: 0,1:43:43.03,1:43:48.49,chinese,,0,0,0,,现在，你会遇到很多关于递归的流行语，比如，如果你曾把摄像机对准电视机，那就是
Dialogue: 0,1:43:48.49,1:43:52.66,english,,0,0,0,,showing the camera, and you sort of see yourself or the image again and again, that's really recursion.
Dialogue: 0,1:43:48.49,1:43:52.66,chinese,,0,0,0,,在展示摄像机的过程中，你会一次又一次地看到自己或影像，这就是真正的递归。
Dialogue: 0,1:43:52.66,1:43:56.32,english,,0,0,0,,And in that case, it only stops once you hit the base case of a single pixel.
Dialogue: 0,1:43:52.66,1:43:56.32,chinese,,0,0,0,,而在这种情况下，只有在遇到单个像素的基本情况时才会停止。
Dialogue: 0,1:43:56.32,1:44:01.88,english,,0,0,0,,But this is a very funny joke in some circles when it comes to recursion and Google.
Dialogue: 0,1:43:56.32,1:44:01.88,chinese,,0,0,0,,不过，说到递归和谷歌，这在某些圈子里是个非常有趣的笑话。
Dialogue: 0,1:44:01.88,1:44:08.05,english,,0,0,0,,So how can we actually use Google, or rather, how can we actually use recursion constructively?
Dialogue: 0,1:44:01.88,1:44:08.05,chinese,,0,0,0,,那么，我们怎么才能真正使用谷歌，或者说，我们怎么才能真正建设性地使用递归呢？
Dialogue: 0,1:44:08.05,1:44:16.87,english,,0,0,0,,Well, let me propose that we actually introduced a third and final algorithm for sorting that hopefully does better than the two sorts thus far.
Dialogue: 0,1:44:08.05,1:44:16.87,chinese,,0,0,0,,好吧，让我提议，我们实际上引入了第三种也是最后一种排序算法，希望它能比迄今为止的两种排序算法做得更好。
Dialogue: 0,1:44:16.87,1:44:19.48,english,,0,0,0,,We've done selection sort and bubble sort.
Dialogue: 0,1:44:16.87,1:44:19.48,chinese,,0,0,0,,我们已经完成了选择排序和冒泡排序。
Dialogue: 0,1:44:19.48,1:44:24.22,english,,0,0,0,,Bubble sort, we liked a little better, at least insofar as in the best case where the list is already sorted.
Dialogue: 0,1:44:19.48,1:44:24.22,chinese,,0,0,0,,至少在列表已经排序的最佳情况下，我们更喜欢冒泡排序。
Dialogue: 0,1:44:24.22,1:44:30.49,english,,0,0,0,,Bubble sort's at least smarter, and it will actually terminate early, giving us a better lower bound, in terms of our omega notation.
Dialogue: 0,1:44:24.22,1:44:30.49,chinese,,0,0,0,,冒泡排序至少更聪明，它实际上会提前结束，根据我们的欧米茄符号，给我们一个更好的下限。
Dialogue: 0,1:44:30.49,1:44:36.25,english,,0,0,0,,But it turns out that recursion, and this is not necessarily a feature of recursion, but something we can now leverage.
Dialogue: 0,1:44:30.49,1:44:36.25,chinese,,0,0,0,,但事实证明，递归并不一定是递归的特征，而是我们现在可以利用的东西。
Dialogue: 0,1:44:36.25,1:44:47.56,english,,0,0,0,,It turns out, using recursion, we can take a fundamentally different approach to sorting a whole bunch of numbers in such a way that we can do far fewer comparisons and, ideally, speed up
Dialogue: 0,1:44:36.25,1:44:47.56,chinese,,0,0,0,,事实证明，利用递归，我们可以采用一种根本不同的方法来对一大堆数字进行排序，这样我们就可以减少比较次数，并在理想情况下加快速度
Dialogue: 0,1:44:47.56,1:44:49.01,english,,0,0,0,,our final results.
Dialogue: 0,1:44:47.56,1:44:49.01,chinese,,0,0,0,,我们的最终结果。
Dialogue: 0,1:44:49.01,1:44:54.01,english,,0,0,0,,So here is the pseudocode for what we're about to see for something called merge sort.
Dialogue: 0,1:44:49.01,1:44:54.01,chinese,,0,0,0,,下面是我们将要看到的合并排序的伪代码。
Dialogue: 0,1:44:54.01,1:44:56.23,english,,0,0,0,,And it really is this terse.
Dialogue: 0,1:44:54.01,1:44:56.23,chinese,,0,0,0,,而且真的如此简洁。
Dialogue: 0,1:44:56.23,1:44:58.33,english,,0,0,0,,Sort the left half of numbers.
Dialogue: 0,1:44:56.23,1:44:58.33,chinese,,0,0,0,,对左半部分数字进行排序。
Dialogue: 0,1:44:58.33,1:45:00.55,english,,0,0,0,,Sort the right half of numbers.
Dialogue: 0,1:44:58.33,1:45:00.55,chinese,,0,0,0,,对右半部分数字进行分类。
Dialogue: 0,1:45:00.55,1:45:02.95,english,,0,0,0,,Merge the sorted halves.
Dialogue: 0,1:45:00.55,1:45:02.95,chinese,,0,0,0,,合并已排序的两半。
Dialogue: 0,1:45:02.95,1:45:10.96,english,,0,0,0,,This is almost sort of nonsensical, because if you're asked for an algorithm to sort, and you respond with, well, sort the left half, sort the right half.
Dialogue: 0,1:45:02.95,1:45:10.96,chinese,,0,0,0,,这几乎是无稽之谈，因为如果有人问你一种排序算法，你的回答是，好吧，左半排序，右半排序。
Dialogue: 0,1:45:10.96,1:45:14.23,english,,0,0,0,,That's being difficult, because well, I'm asking for a sorting algorithm.
Dialogue: 0,1:45:10.96,1:45:14.23,chinese,,0,0,0,,这太难了，因为我要求的是一种排序算法。
Dialogue: 0,1:45:14.23,1:45:16.89,english,,0,0,0,,You're just telling me to sort the left half and the right half.
Dialogue: 0,1:45:14.23,1:45:16.89,chinese,,0,0,0,,你只是让我把左半边和右半边分类。
Dialogue: 0,1:45:16.89,1:45:21.76,english,,0,0,0,,But implicit in that last line, merging is a pretty powerful feature of this sort.
Dialogue: 0,1:45:16.89,1:45:21.76,chinese,,0,0,0,,但最后一句话隐含的意思是，合并是这类功能中相当强大的一种。
Dialogue: 0,1:45:21.76,1:45:23.90,english,,0,0,0,,Now, we do need another base case at the top.
Dialogue: 0,1:45:21.76,1:45:23.90,chinese,,0,0,0,,现在，我们确实需要在顶层再设一个基础案例。
Dialogue: 0,1:45:23.90,1:45:24.70,english,,0,0,0,,So let me add this.
Dialogue: 0,1:45:23.90,1:45:24.70,chinese,,0,0,0,,所以，请允许我补充一句。
Dialogue: 0,1:45:24.70,1:45:29.80,english,,0,0,0,,If we find ourselves with a list, an array, of size 1, well, that array is obviously sorted.
Dialogue: 0,1:45:24.70,1:45:29.80,chinese,,0,0,0,,如果我们发现自己有一个大小为 1 的列表、数组，那么，这个数组显然是排序过的。
Dialogue: 0,1:45:29.80,1:45:32.39,english,,0,0,0,,If there's only one element in it, there's no work to be done.
Dialogue: 0,1:45:29.80,1:45:32.39,chinese,,0,0,0,,如果其中只有一个元素，就没有工作可做。
Dialogue: 0,1:45:32.39,1:45:33.89,english,,0,0,0,,So that's going to be our base case.
Dialogue: 0,1:45:32.39,1:45:33.89,chinese,,0,0,0,,因此，这将是我们的基本情况。
Dialogue: 0,1:45:33.89,1:45:40.90,english,,0,0,0,,But allowing us now, in just these, what, four, six lines of pseudocode, to actually sort some elements.
Dialogue: 0,1:45:33.89,1:45:40.90,chinese,,0,0,0,,但现在，我们只需用这四、六行伪代码，就能对一些元素进行实际排序。
Dialogue: 0,1:45:40.90,1:45:43.65,english,,0,0,0,,But let's focus first on just a subset of this.
Dialogue: 0,1:45:40.90,1:45:43.65,chinese,,0,0,0,,不过，让我们先关注其中的一个子集。
Dialogue: 0,1:45:43.65,1:45:46.36,english,,0,0,0,,Let's consider for a moment what it means to merge sorted halves.
Dialogue: 0,1:45:43.65,1:45:46.36,chinese,,0,0,0,,让我们先来思考一下合并排序的两半意味着什么。
Dialogue: 0,1:45:46.36,1:45:50.17,english,,0,0,0,,So Carter has wonderfully come up to volunteer here just to help us reset these numbers.
Dialogue: 0,1:45:46.36,1:45:50.17,chinese,,0,0,0,,因此，Carter很高兴能来这里做志愿者，帮助我们重设这些数字。
Dialogue: 0,1:45:50.17,1:45:56.02,english,,0,0,0,,Suppose that in the middle of the story we're about to tell, we have two sorted halves.
Dialogue: 0,1:45:50.17,1:45:56.02,chinese,,0,0,0,,假设在我们将要讲述的故事中间，有两个排序的半部分。
Dialogue: 0,1:45:56.02,1:46:01.63,english,,0,0,0,,I've already sorted the left half of these numbers, and indeed, 2, 4, 5, 7 is sorted from smallest to largest.
Dialogue: 0,1:45:56.02,1:46:01.63,chinese,,0,0,0,,我已经对这些数字的左半部分进行了排序，事实上，2、4、5、7 是从小到大排序的。
Dialogue: 0,1:46:01.63,1:46:06.10,english,,0,0,0,,And the right half appears to be already sorted, 0, 1, 3, 6, already sorted.
Dialogue: 0,1:46:01.63,1:46:06.10,chinese,,0,0,0,,右半部分似乎已经排序，0、1、3、6，已经排序。
Dialogue: 0,1:46:06.10,1:46:10.63,english,,0,0,0,,So in my pseudocode, we're already done sorting the left half and the right half somehow.
Dialogue: 0,1:46:06.10,1:46:10.63,chinese,,0,0,0,,因此，在我的伪代码中，我们已经完成了左半部分和右半部分的排序。
Dialogue: 0,1:46:10.63,1:46:12.16,english,,0,0,0,,But we'll see how in a moment.
Dialogue: 0,1:46:10.63,1:46:12.16,chinese,,0,0,0,,但我们马上就会知道是怎么回事。
Dialogue: 0,1:46:12.16,1:46:14.98,english,,0,0,0,,Well, how do I go about merging these two halves?
Dialogue: 0,1:46:12.16,1:46:14.98,chinese,,0,0,0,,那么，我该怎么合并这两半呢？
Dialogue: 0,1:46:14.98,1:46:18.49,english,,0,0,0,,Well, because they're sorted already, and you want to merge them in order,
Dialogue: 0,1:46:14.98,1:46:18.49,chinese,,0,0,0,,因为它们已经排好序了，而你想按顺序合并它们、
Dialogue: 0,1:46:18.49,1:46:20.11,english,,0,0,0,,I think we can flip down.
Dialogue: 0,1:46:18.49,1:46:20.11,chinese,,0,0,0,,我想我们可以向下翻转。
Dialogue: 0,1:46:20.11,1:46:25.03,english,,0,0,0,,We can hide all but the first numbers in each of these sublists.
Dialogue: 0,1:46:20.11,1:46:25.03,chinese,,0,0,0,,我们可以隐藏每个子列表中除第一个数字之外的所有数字。
Dialogue: 0,1:46:25.03,1:46:28.12,english,,0,0,0,,So here, we have a half that starts with 2.
Dialogue: 0,1:46:25.03,1:46:28.12,chinese,,0,0,0,,在这里，我们有一个以 2 开头的半球。
Dialogue: 0,1:46:28.12,1:46:32.06,english,,0,0,0,,And I don't really care what the other numbers are, because they're clearly larger than 2.
Dialogue: 0,1:46:28.12,1:46:32.06,chinese,,0,0,0,,我并不关心其他数字是多少，因为它们显然大于 2。
Dialogue: 0,1:46:32.06,1:46:35.04,english,,0,0,0,,I can focus only on 2, and 0 too, 0 also.
Dialogue: 0,1:46:32.06,1:46:35.04,chinese,,0,0,0,,我只能关注 "2"，"0 "也是，"0 "也是。
Dialogue: 0,1:46:35.04,1:46:39.29,english,,0,0,0,,We know that 0 is the smallest there, so let's just ignore the numbers that Carter kindly flipped down.
Dialogue: 0,1:46:35.04,1:46:39.29,chinese,,0,0,0,,我们知道 "0 "是最小的，所以就忽略Carter好心翻下的数字吧。
Dialogue: 0,1:46:39.29,1:46:44.36,english,,0,0,0,,So how do I merge these two lists into a new sorted larger list?
Dialogue: 0,1:46:39.29,1:46:44.36,chinese,,0,0,0,,那么，怎么将这两个列表合并成一个新的已排序的大列表呢？
Dialogue: 0,1:46:44.36,1:46:50.47,english,,0,0,0,,Well, I compare the two on my left with the 0 on my right, obviously, which comes first, the 0.
Dialogue: 0,1:46:44.36,1:46:50.47,chinese,,0,0,0,,好吧，我把左边的两个和右边的 0 进行比较，很明显，哪个先到，哪个就是 0。
Dialogue: 0,1:46:50.47,1:46:51.96,english,,0,0,0,,So let me put this down here.
Dialogue: 0,1:46:50.47,1:46:51.96,chinese,,0,0,0,,所以，让我把这个放在这里。
Dialogue: 0,1:46:51.96,1:46:54.13,english,,0,0,0,,And Carter, if you want to give us the next element.
Dialogue: 0,1:46:51.96,1:46:54.13,chinese,,0,0,0,,Carter，如果你想给我们下一个元素。
Dialogue: 0,1:46:54.13,1:46:55.96,english,,0,0,0,,Now I have two sorted halves.
Dialogue: 0,1:46:54.13,1:46:55.96,chinese,,0,0,0,,现在我有两个分类的半成品。
Dialogue: 0,1:46:55.96,1:46:57.65,english,,0,0,0,,But I've already plucked one off.
Dialogue: 0,1:46:55.96,1:46:57.65,chinese,,0,0,0,,但我已经拔掉了一个。
Dialogue: 0,1:46:57.65,1:47:00.01,english,,0,0,0,,So now I compare the two against the 1.
Dialogue: 0,1:46:57.65,1:47:00.01,chinese,,0,0,0,,因此，现在我将两者与 "1 "进行比较。
Dialogue: 0,1:47:00.01,1:47:01.58,english,,0,0,0,,1 obviously comes next.
Dialogue: 0,1:47:00.01,1:47:01.58,chinese,,0,0,0,,1 显然是下一个。
Dialogue: 0,1:47:01.58,1:47:04.84,english,,0,0,0,,So I'm going to take out the 1 and put it in place here.
Dialogue: 0,1:47:01.58,1:47:04.84,chinese,,0,0,0,,因此，我要把 "1 "取出来，放在这里。
Dialogue: 0,1:47:04.84,1:47:06.76,english,,0,0,0,,Now I'm going to compare the two halves again.
Dialogue: 0,1:47:04.84,1:47:06.76,chinese,,0,0,0,,现在我再把这两半进行比较。
Dialogue: 0,1:47:06.76,1:47:08.83,english,,0,0,0,,2 and 3, which do I merge first?
Dialogue: 0,1:47:06.76,1:47:08.83,chinese,,0,0,0,,2 和 3，我应该先合并哪个？
Dialogue: 0,1:47:08.83,1:47:10.66,english,,0,0,0,,Obviously the 2 comes next.
Dialogue: 0,1:47:08.83,1:47:10.66,chinese,,0,0,0,,很明显，接下来是 2。
Dialogue: 0,1:47:10.66,1:47:15.22,english,,0,0,0,,And now, notice, each time I do this, my hands are theoretically making forward progress.
Dialogue: 0,1:47:10.66,1:47:15.22,chinese,,0,0,0,,现在请注意，每次我这样做时，我的双手理论上都在向前迈进。
Dialogue: 0,1:47:15.22,1:47:20.29,english,,0,0,0,,I'm not doubling back like I kept doing with selection sort or bubble sort, back and forth, back and forth.
Dialogue: 0,1:47:15.22,1:47:20.29,chinese,,0,0,0,,我不会像处理选择排序或冒泡排序时那样来回折腾。
Dialogue: 0,1:47:20.29,1:47:24.31,english,,0,0,0,,My fingers are constantly advancing forward, and that's going to be a key detail.
Dialogue: 0,1:47:20.29,1:47:24.31,chinese,,0,0,0,,我的手指不断向前推进，这将是一个关键细节。
Dialogue: 0,1:47:24.31,1:47:27.34,english,,0,0,0,,So I compare 4 and 3, 3 obviously.
Dialogue: 0,1:47:24.31,1:47:27.34,chinese,,0,0,0,,所以我比较了 4 和 3，显然是 3。
Dialogue: 0,1:47:27.34,1:47:32.56,english,,0,0,0,,I compare 4 and 6, 4 obviously.
Dialogue: 0,1:47:27.34,1:47:32.56,chinese,,0,0,0,,我比较了 4 和 6，显然是 4。
Dialogue: 0,1:47:32.56,1:47:36.52,english,,0,0,0,,I compare 5 and 6, 5 obviously.
Dialogue: 0,1:47:32.56,1:47:36.52,chinese,,0,0,0,,我比较了 5 号和 6 号，显然是 5 号。
Dialogue: 0,1:47:36.52,1:47:40.81,english,,0,0,0,,And then I compare 7 and 6, 6 of course.
Dialogue: 0,1:47:36.52,1:47:40.81,chinese,,0,0,0,,然后我比较了 7 和 6，当然是 6。
Dialogue: 0,1:47:40.81,1:47:43.00,english,,0,0,0,,And then lastly, we have just one element left.
Dialogue: 0,1:47:40.81,1:47:43.00,chinese,,0,0,0,,最后，我们只剩下一个要素了。
Dialogue: 0,1:47:43.00,1:47:48.16,english,,0,0,0,,And even though I'm kind of moving awkwardly as a human, my hands technically were only moving to the right.
Dialogue: 0,1:47:43.00,1:47:48.16,chinese,,0,0,0,,虽然我的动作有点笨拙，但严格来说，我的手只是在向右移动。
Dialogue: 0,1:47:48.16,1:47:51.13,english,,0,0,0,,I was never looping back doing something again and again.
Dialogue: 0,1:47:48.16,1:47:51.13,chinese,,0,0,0,,我从来没有循环往复地做过一件事。
Dialogue: 0,1:47:51.13,1:47:54.43,english,,0,0,0,,And that's, perhaps, the intuition, and just enough room for the 7.
Dialogue: 0,1:47:51.13,1:47:54.43,chinese,,0,0,0,,这或许就是直觉，也是 7 的足够空间。
Dialogue: 0,1:47:54.43,1:47:58.21,english,,0,0,0,,So that, then, is how you would merge two sorted halves.
Dialogue: 0,1:47:54.43,1:47:58.21,chinese,,0,0,0,,那么，这就是怎么合并两个排序的半成品。
Dialogue: 0,1:47:58.21,1:48:00.61,english,,0,0,0,,We started with left half sorted, right half sorted.
Dialogue: 0,1:47:58.21,1:48:00.61,chinese,,0,0,0,,我们从左半边排序，右半边排序开始。
Dialogue: 0,1:48:00.61,1:48:02.86,english,,0,0,0,,And merging is just like what you would do as a human.
Dialogue: 0,1:48:00.61,1:48:02.86,chinese,,0,0,0,,合并就像你作为人类所做的那样。
Dialogue: 0,1:48:02.86,1:48:08.62,english,,0,0,0,,And Carter just flipped the numbers down, so our focus was only on the smallest elements in each.
Dialogue: 0,1:48:02.86,1:48:08.62,chinese,,0,0,0,,Carter只是把数字向下翻转，所以我们的重点只是放在每个数字中最小的元素上。
Dialogue: 0,1:48:08.62,1:48:17.12,english,,0,0,0,,Any questions before we forge ahead with what it means, then, to be merged in this way?
Dialogue: 0,1:48:08.62,1:48:17.12,chinese,,0,0,0,,在我们继续讨论以这种方式合并意味着什么之前，还有什么问题吗？
Dialogue: 0,1:48:17.12,1:48:18.77,english,,0,0,0,,So now, here is an original list.
Dialogue: 0,1:48:17.12,1:48:18.77,chinese,,0,0,0,,现在，这里有一份原创名单。
Dialogue: 0,1:48:18.77,1:48:22.48,english,,0,0,0,,We deliberately put it at the top, because there's one detail of merge sort that's key.
Dialogue: 0,1:48:18.77,1:48:22.48,chinese,,0,0,0,,我们特意把它放在最前面，因为有一个合并类的细节很关键。
Dialogue: 0,1:48:22.48,1:48:25.49,english,,0,0,0,,Merge sort is technically going to use a little more space.
Dialogue: 0,1:48:22.48,1:48:25.49,chinese,,0,0,0,,从技术上讲，合并排序会占用更多空间。
Dialogue: 0,1:48:25.49,1:48:32.11,english,,0,0,0,,And so whereas, previously, we just kept moving our humans around and swapping people and making sure they stayed ultimately in the original positions.
Dialogue: 0,1:48:25.49,1:48:32.11,chinese,,0,0,0,,因此，以前我们只是不停地移动我们的人类，交换人员，确保他们最终留在原来的位置上。
Dialogue: 0,1:48:32.11,1:48:36.70,english,,0,0,0,,With merge sort, pretends that here's our original array of memory.
Dialogue: 0,1:48:32.11,1:48:36.70,chinese,,0,0,0,,使用合并排序时，假设这里是我们的原始内存数组。
Dialogue: 0,1:48:36.70,1:48:38.97,english,,0,0,0,,I'm going to need at least one other array of memory.
Dialogue: 0,1:48:36.70,1:48:38.97,chinese,,0,0,0,,我至少还需要一个内存阵列。
Dialogue: 0,1:48:38.97,1:48:41.16,english,,0,0,0,,And I'm going to cheat, and I'm going to use even more memory.
Dialogue: 0,1:48:38.97,1:48:41.16,chinese,,0,0,0,,我要作弊，我要使用更多内存。
Dialogue: 0,1:48:41.16,1:48:45.54,english,,0,0,0,,But technically, I could actually go back and forth between 1 array and a secondary array.
Dialogue: 0,1:48:41.16,1:48:45.54,chinese,,0,0,0,,但从技术上讲，我实际上可以在一个阵列和一个辅助阵列之间来回切换。
Dialogue: 0,1:48:45.54,1:48:48.37,english,,0,0,0,,But it is going to take me more space.
Dialogue: 0,1:48:45.54,1:48:48.37,chinese,,0,0,0,,但这会占用我更多的空间。
Dialogue: 0,1:48:48.37,1:48:53.13,english,,0,0,0,,So how do I go about implementing merge sort on this code?
Dialogue: 0,1:48:48.37,1:48:53.13,chinese,,0,0,0,,那么，怎么在这段代码中实施合并排序呢？
Dialogue: 0,1:48:53.13,1:48:54.93,english,,0,0,0,,Well, let's consider this.
Dialogue: 0,1:48:53.13,1:48:54.93,chinese,,0,0,0,,那么，让我们考虑一下这个问题。
Dialogue: 0,1:48:54.93,1:48:57.06,english,,0,0,0,,Here is a array of size 8.
Dialogue: 0,1:48:54.93,1:48:57.06,chinese,,0,0,0,,这是一个 8 号尺寸的阵列。
Dialogue: 0,1:48:57.06,1:48:59.59,english,,0,0,0,,If only one number quit, obviously not applicable.
Dialogue: 0,1:48:57.06,1:48:59.59,chinese,,0,0,0,,如果只有一个号码退出，显然不适用。
Dialogue: 0,1:48:59.59,1:49:01.23,english,,0,0,0,,So let's focus on the juicy part there.
Dialogue: 0,1:48:59.59,1:49:01.23,chinese,,0,0,0,,所以，让我们把注意力集中在多汁的部分吧。
Dialogue: 0,1:49:01.23,1:49:02.88,english,,0,0,0,,Sort the left half of the numbers.
Dialogue: 0,1:49:01.23,1:49:02.88,chinese,,0,0,0,,将左半边的数字排序。
Dialogue: 0,1:49:02.88,1:49:05.13,english,,0,0,0,,All right, how do I sort the left half of the numbers?
Dialogue: 0,1:49:02.88,1:49:05.13,chinese,,0,0,0,,好吧，怎么对左半边的数字进行排序？
Dialogue: 0,1:49:05.13,1:49:09.24,english,,0,0,0,,I'm going to just nudge them over just to be clear, which is the left half.
Dialogue: 0,1:49:05.13,1:49:09.24,chinese,,0,0,0,,为了清楚起见，我要把它们推过来，也就是左半边。
Dialogue: 0,1:49:09.24,1:49:11.85,english,,0,0,0,,Here is now a sublist of size 4.
Dialogue: 0,1:49:09.24,1:49:11.85,chinese,,0,0,0,,现在是一个大小为 4 的子列表。
Dialogue: 0,1:49:11.85,1:49:14.86,english,,0,0,0,,How do I sort the left half?
Dialogue: 0,1:49:11.85,1:49:14.86,chinese,,0,0,0,,怎么对左半部分进行排序？
Dialogue: 0,1:49:14.86,1:49:17.38,english,,0,0,0,,Well, do I have an algorithm for sorting?
Dialogue: 0,1:49:14.86,1:49:17.38,chinese,,0,0,0,,那么，我有排序算法吗？
Dialogue: 0,1:49:17.38,1:49:18.43,english,,0,0,0,,Yeah, what do I do?
Dialogue: 0,1:49:17.38,1:49:18.43,chinese,,0,0,0,,是啊，我该怎么办？
Dialogue: 0,1:49:18.43,1:49:19.49,english,,0,0,0,,Here's a list of size 4.
Dialogue: 0,1:49:18.43,1:49:19.49,chinese,,0,0,0,,这里有一份 4 号尺码的清单。
Dialogue: 0,1:49:19.49,1:49:20.20,english,,0,0,0,,How do I sort it?
Dialogue: 0,1:49:19.49,1:49:20.20,chinese,,0,0,0,,怎么分类？
Dialogue: 0,1:49:20.20,1:49:22.00,english,,0,0,0,,What's step one?
Dialogue: 0,1:49:20.20,1:49:22.00,chinese,,0,0,0,,第一步是什么？
Dialogue: 0,1:49:22.00,1:49:23.33,english,,0,0,0,,Sort the left half.
Dialogue: 0,1:49:22.00,1:49:23.33,chinese,,0,0,0,,将左半边分类。
Dialogue: 0,1:49:23.33,1:49:28.06,english,,0,0,0,,So I now sort of, conceptually in my mind, take this sublist of size 4.
Dialogue: 0,1:49:23.33,1:49:28.06,chinese,,0,0,0,,因此，我现在在脑海中概念性地将这个子列表取为 4 号。
Dialogue: 0,1:49:28.06,1:49:32.74,english,,0,0,0,,And I sort it by first sorting the left half, focusing now on the 7 and 2.
Dialogue: 0,1:49:28.06,1:49:32.74,chinese,,0,0,0,,我首先对左半部分进行排序，现在重点对 7 和 2 进行排序。
Dialogue: 0,1:49:32.74,1:49:34.33,english,,0,0,0,,All right, here's a list of size 2.
Dialogue: 0,1:49:32.74,1:49:34.33,chinese,,0,0,0,,好了，这是一份 2 号尺寸的清单。
Dialogue: 0,1:49:34.33,1:49:37.06,english,,0,0,0,,How do I sort a list of size 2?
Dialogue: 0,1:49:34.33,1:49:37.06,chinese,,0,0,0,,怎么对大小为 2 的列表进行排序？
Dialogue: 0,1:49:37.06,1:49:38.74,english,,0,0,0,,STUDENT: [INAUDIBLE]
Dialogue: 0,1:49:37.06,1:49:38.74,chinese,,0,0,0,,学生：[听不清]
Dialogue: 0,1:49:38.74,1:49:40.17,english,,0,0,0,,DAVID MALAN: Sorry?
Dialogue: 0,1:49:38.74,1:49:40.17,chinese,,0,0,0,,什么？
Dialogue: 0,1:49:40.17,1:49:42.36,english,,0,0,0,,I think we just keep following our instructions.
Dialogue: 0,1:49:40.17,1:49:42.36,chinese,,0,0,0,,我想，我们只需按指示行事。
Dialogue: 0,1:49:42.36,1:49:43.65,english,,0,0,0,,Sort the left half.
Dialogue: 0,1:49:42.36,1:49:43.65,chinese,,0,0,0,,将左半边分类。
Dialogue: 0,1:49:43.65,1:49:45.63,english,,0,0,0,,All right, here is a list of size 1.
Dialogue: 0,1:49:43.65,1:49:45.63,chinese,,0,0,0,,好了，下面是尺寸 1 的清单。
Dialogue: 0,1:49:45.63,1:49:48.41,english,,0,0,0,,How do I sort a list of size 1?
Dialogue: 0,1:49:45.63,1:49:48.41,chinese,,0,0,0,,怎么对大小为 1 的列表进行排序？
Dialogue: 0,1:49:48.41,1:49:49.80,english,,0,0,0,,STUDENT: [INAUDIBLE]
Dialogue: 0,1:49:48.41,1:49:49.80,chinese,,0,0,0,,学生：[听不清]
Dialogue: 0,1:49:49.80,1:49:50.72,english,,0,0,0,,DAVID MALAN: I'm done.
Dialogue: 0,1:49:49.80,1:49:50.72,chinese,,0,0,0,,我不玩了
Dialogue: 0,1:49:50.72,1:49:51.36,english,,0,0,0,,It's done.
Dialogue: 0,1:49:51.36,1:49:52.74,english,,0,0,0,,So I leave this alone.
Dialogue: 0,1:49:51.36,1:49:52.74,chinese,,0,0,0,,所以我就不去管它了。
Dialogue: 0,1:49:52.74,1:49:54.74,english,,0,0,0,,What was the next step in the story?
Dialogue: 0,1:49:52.74,1:49:54.74,chinese,,0,0,0,,故事的下一步是什么？
Dialogue: 0,1:49:54.74,1:49:58.16,english,,0,0,0,,I've just sorted the left half of the left half of the left half.
Dialogue: 0,1:49:54.74,1:49:58.16,chinese,,0,0,0,,我刚刚整理了左半边的左半边。
Dialogue: 0,1:49:58.16,1:49:59.58,english,,0,0,0,,What comes next?
Dialogue: 0,1:49:58.16,1:49:59.58,chinese,,0,0,0,,下一步是什么？
Dialogue: 0,1:49:59.58,1:50:06.26,english,,0,0,0,,I sort the right half of the left half of the left half, and I'm done, because it's just a list of size 1.
Dialogue: 0,1:49:59.58,1:50:06.26,chinese,,0,0,0,,我把右半部分的左半部分的左半部分排序，然后就完成了，因为这只是一个大小为 1 的列表。
Dialogue: 0,1:50:06.26,1:50:09.28,english,,0,0,0,,What comes after this?
Dialogue: 0,1:50:06.26,1:50:09.28,chinese,,0,0,0,,之后呢？
Dialogue: 0,1:50:09.28,1:50:09.97,english,,0,0,0,,Merge.
Dialogue: 0,1:50:09.97,1:50:16.18,english,,0,0,0,,So this is where it gets a little trippy, because you have to remember where we're pausing the story to do things recursively again and again.
Dialogue: 0,1:50:09.97,1:50:16.18,chinese,,0,0,0,,因此，这就变得有点匪夷所思了，因为你必须记住，我们在哪里暂停故事，在哪里重复做事情。
Dialogue: 0,1:50:16.18,1:50:20.89,english,,0,0,0,,But if I've just sorted the left half and I've just sorted the right half, now I merge them together.
Dialogue: 0,1:50:16.18,1:50:20.89,chinese,,0,0,0,,但如果我刚对左半边进行了排序，又对右半边进行了排序，现在我就把它们合并在一起。
Dialogue: 0,1:50:20.89,1:50:25.04,english,,0,0,0,,This is a super short list, so we don't need Carter's help here as before.
Dialogue: 0,1:50:20.89,1:50:25.04,chinese,,0,0,0,,这是一份超短名单，所以我们不需要Carter像以前那样帮忙。
Dialogue: 0,1:50:25.04,1:50:27.64,english,,0,0,0,,But I think the first number I take here is the 2.
Dialogue: 0,1:50:25.04,1:50:27.64,chinese,,0,0,0,,但我认为，我在这里取的第一个数字是 2。
Dialogue: 0,1:50:27.64,1:50:31.66,english,,0,0,0,,And then the second number I take, because it's the only option, is the 7.
Dialogue: 0,1:50:27.64,1:50:31.66,chinese,,0,0,0,,然后我选的第二个数字是 7，因为这是唯一的选择。
Dialogue: 0,1:50:31.66,1:50:40.27,english,,0,0,0,,But what's nice now is that, notice, the left half of the left half is indeed sorted, because I trivially sorted the left half of it and the right half of it.
Dialogue: 0,1:50:31.66,1:50:40.27,chinese,,0,0,0,,但现在好了，注意，左半边的左半边确实排序了，因为我对它的左半边和右半边进行了微不足道的排序。
Dialogue: 0,1:50:40.27,1:50:42.76,english,,0,0,0,,But then merging is really where the magic happens.
Dialogue: 0,1:50:40.27,1:50:42.76,chinese,,0,0,0,,但合并才是真正的神奇之处。
Dialogue: 0,1:50:42.76,1:50:51.30,english,,0,0,0,,All right, again, if you rewind now in your mind, if I've just sorted the left half of the left half, what happens next?
Dialogue: 0,1:50:42.76,1:50:51.30,chinese,,0,0,0,,好了，再来一遍，如果你现在在脑海中倒带，如果我刚刚把左半边的左半边排序了，接下来会发生什么？
Dialogue: 0,1:50:51.30,1:50:55.00,english,,0,0,0,,Sort the right half of the left half.
Dialogue: 0,1:50:51.30,1:50:55.00,chinese,,0,0,0,,将右半部分与左半部分排序。
Dialogue: 0,1:50:55.00,1:50:56.98,english,,0,0,0,,So again, you kind of rewind in time.
Dialogue: 0,1:50:55.00,1:50:56.98,chinese,,0,0,0,,所以，你又一次回到了过去。
Dialogue: 0,1:50:56.98,1:50:58.29,english,,0,0,0,,So how do I do this?
Dialogue: 0,1:50:56.98,1:50:58.29,chinese,,0,0,0,,那么我该怎么做呢？
Dialogue: 0,1:50:58.29,1:50:59.52,english,,0,0,0,,I've got a list of size 2.
Dialogue: 0,1:50:58.29,1:50:59.52,chinese,,0,0,0,,我有一份 2 号的清单。
Dialogue: 0,1:50:59.52,1:51:01.92,english,,0,0,0,,I sort the left half, just the 5, done.
Dialogue: 0,1:50:59.52,1:51:01.92,chinese,,0,0,0,,我把左半边分类，只有 5 个，完成。
Dialogue: 0,1:51:01.92,1:51:04.20,english,,0,0,0,,Sort the right half, 4, done.
Dialogue: 0,1:51:01.92,1:51:04.20,chinese,,0,0,0,,右半部分排序，4，完成。
Dialogue: 0,1:51:04.20,1:51:11.38,english,,0,0,0,,Now the interesting part, I merge the left half and the right half of the right half of the left half.
Dialogue: 0,1:51:04.20,1:51:11.38,chinese,,0,0,0,,现在有趣的部分来了，我把左半边和右半边的右半边合并在一起。
Dialogue: 0,1:51:11.38,1:51:12.45,english,,0,0,0,,So what do I do?
Dialogue: 0,1:51:11.38,1:51:12.45,chinese,,0,0,0,,那我该怎么办？
Dialogue: 0,1:51:12.45,1:51:14.28,english,,0,0,0,,4 comes down here.
Dialogue: 0,1:51:12.45,1:51:14.28,chinese,,0,0,0,,4 来到这里。
Dialogue: 0,1:51:14.28,1:51:16.26,english,,0,0,0,,5 comes down here.
Dialogue: 0,1:51:14.28,1:51:16.26,chinese,,0,0,0,,5 到这里来。
Dialogue: 0,1:51:16.26,1:51:19.86,english,,0,0,0,,And now, notice what I have.
Dialogue: 0,1:51:16.26,1:51:19.86,chinese,,0,0,0,,现在，请注意我有什么。
Dialogue: 0,1:51:19.86,1:51:21.60,english,,0,0,0,,Left half is sorted.
Dialogue: 0,1:51:19.86,1:51:21.60,chinese,,0,0,0,,左半部分已分类。
Dialogue: 0,1:51:21.60,1:51:23.13,english,,0,0,0,,Right half is sorted.
Dialogue: 0,1:51:21.60,1:51:23.13,chinese,,0,0,0,,右半部分已分类。
Dialogue: 0,1:51:23.13,1:51:26.61,english,,0,0,0,,If you rewind in time, where is my next step, 3?
Dialogue: 0,1:51:23.13,1:51:26.61,chinese,,0,0,0,,如果时光倒流，我的下一步在哪里，3？
Dialogue: 0,1:51:26.61,1:51:27.74,english,,0,0,0,,Merge the two halves.
Dialogue: 0,1:51:26.61,1:51:27.74,chinese,,0,0,0,,合并两半。
Dialogue: 0,1:51:27.74,1:51:29.70,english,,0,0,0,,And so this is what Carter helped me do before.
Dialogue: 0,1:51:27.74,1:51:29.70,chinese,,0,0,0,,这就是Carter之前帮我做的事。
Dialogue: 0,1:51:29.70,1:51:32.66,english,,0,0,0,,Let's focus only on the smallest elements, just so there's less distraction.
Dialogue: 0,1:51:29.70,1:51:32.66,chinese,,0,0,0,,让我们只关注最小的元素，以减少干扰。
Dialogue: 0,1:51:32.66,1:51:34.02,english,,0,0,0,,I compare the 2 and the 4.
Dialogue: 0,1:51:32.66,1:51:34.02,chinese,,0,0,0,,我比较了 2 和 4。
Dialogue: 0,1:51:34.02,1:51:36.52,english,,0,0,0,,2 comes first, so let's obviously put that here.
Dialogue: 0,1:51:34.02,1:51:36.52,chinese,,0,0,0,,2 是第一位的，所以我们显然应该把它放在这里。
Dialogue: 0,1:51:36.52,1:51:41.28,english,,0,0,0,,Now, I compare the new beginning of this list and the old beginning of this list.
Dialogue: 0,1:51:36.52,1:51:41.28,chinese,,0,0,0,,现在，我比较一下这份清单的新开头和旧开头。
Dialogue: 0,1:51:41.28,1:51:43.05,english,,0,0,0,,4 obviously comes next.
Dialogue: 0,1:51:41.28,1:51:43.05,chinese,,0,0,0,,4 显然是下一个。
Dialogue: 0,1:51:43.05,1:51:45.94,english,,0,0,0,,And now, I compare the 7 against the 5.
Dialogue: 0,1:51:43.05,1:51:45.94,chinese,,0,0,0,,现在，我将 7 和 5 进行比较。
Dialogue: 0,1:51:45.94,1:51:47.43,english,,0,0,0,,5 obviously comes next.
Dialogue: 0,1:51:45.94,1:51:47.43,chinese,,0,0,0,,5 显然是下一个。
Dialogue: 0,1:51:47.43,1:51:49.24,english,,0,0,0,,And now, lastly, I'm left with one number.
Dialogue: 0,1:51:47.43,1:51:49.24,chinese,,0,0,0,,最后，我只剩下一个数字了。
Dialogue: 0,1:51:49.24,1:51:50.97,english,,0,0,0,,So now I'm down to the 7.
Dialogue: 0,1:51:49.24,1:51:50.97,chinese,,0,0,0,,现在我只剩 7 个了。
Dialogue: 0,1:51:50.97,1:51:58.26,english,,0,0,0,,So even if you've kind of lost track of some of the nuances here, if you just kind of take a step back, we have the original right half here still untouched.
Dialogue: 0,1:51:50.97,1:51:58.26,chinese,,0,0,0,,因此，即使你已经记不清这里的一些细微差别，但如果你退一步想，我们这里还有原来的右半部分没有被动过。
Dialogue: 0,1:51:58.26,1:52:08.94,english,,0,0,0,,But the left half of the original input is now, indeed, sorted, all by way of doing sorting left half, right half, left half, right half, but with those merges in between.
Dialogue: 0,1:51:58.26,1:52:08.94,chinese,,0,0,0,,但是，原始输入的左半部分现在确实已经排序，排序的方式是左半、右半、左半、右半，但中间进行了合并。
Dialogue: 0,1:52:08.94,1:52:13.59,english,,0,0,0,,All right, so if we've just sorted the left half, we rewind all the way to the beginning.
Dialogue: 0,1:52:08.94,1:52:13.59,chinese,,0,0,0,,好了，如果我们刚刚整理了左半部分，那么我们倒带回到开头。
Dialogue: 0,1:52:13.59,1:52:15.59,english,,0,0,0,,What do I now do?
Dialogue: 0,1:52:13.59,1:52:15.59,chinese,,0,0,0,,我现在该怎么办？
Dialogue: 0,1:52:15.59,1:52:17.12,english,,0,0,0,,All right, so sort the right half.
Dialogue: 0,1:52:15.59,1:52:17.12,chinese,,0,0,0,,好了，把右半部分排序。
Dialogue: 0,1:52:17.12,1:52:18.41,english,,0,0,0,,So sort the right half.
Dialogue: 0,1:52:17.12,1:52:18.41,chinese,,0,0,0,,所以要把右半部分排序。
Dialogue: 0,1:52:18.41,1:52:20.18,english,,0,0,0,,How do I sort a list of size 4?
Dialogue: 0,1:52:18.41,1:52:20.18,chinese,,0,0,0,,怎么对大小为 4 的列表进行排序？
Dialogue: 0,1:52:20.18,1:52:22.55,english,,0,0,0,,Well, I first sort the left half, the 1 and the 6.
Dialogue: 0,1:52:20.18,1:52:22.55,chinese,,0,0,0,,好吧，我先把左半边、1 和 6 分类。
Dialogue: 0,1:52:22.55,1:52:24.56,english,,0,0,0,,How do I sort a list of size 2?
Dialogue: 0,1:52:22.55,1:52:24.56,chinese,,0,0,0,,怎么对大小为 2 的列表进行排序？
Dialogue: 0,1:52:24.56,1:52:26.75,english,,0,0,0,,You sort the left half, just the number 1.
Dialogue: 0,1:52:24.56,1:52:26.75,chinese,,0,0,0,,你把左半边排序，只排数字 1。
Dialogue: 0,1:52:26.75,1:52:28.34,english,,0,0,0,,Obviously, there's no work to be done.
Dialogue: 0,1:52:26.75,1:52:28.34,chinese,,0,0,0,,显然，没有工作可做。
Dialogue: 0,1:52:28.34,1:52:30.62,english,,0,0,0,,Done, sorting the left half.
Dialogue: 0,1:52:28.34,1:52:30.62,chinese,,0,0,0,,完成，对左半边进行分类。
Dialogue: 0,1:52:30.62,1:52:33.08,english,,0,0,0,,6, done, sorting the right half.
Dialogue: 0,1:52:30.62,1:52:33.08,chinese,,0,0,0,,6、完成，整理右半部分。
Dialogue: 0,1:52:33.08,1:52:34.28,english,,0,0,0,,Now, what do I do?
Dialogue: 0,1:52:33.08,1:52:34.28,chinese,,0,0,0,,现在，我该怎么办？
Dialogue: 0,1:52:34.28,1:52:40.61,english,,0,0,0,,I merge the left half here with the right half here.
Dialogue: 0,1:52:34.28,1:52:40.61,chinese,,0,0,0,,我把左半边和右半边合并在一起。
Dialogue: 0,1:52:40.61,1:52:42.24,english,,0,0,0,,And that one's pretty straightforward.
Dialogue: 0,1:52:40.61,1:52:42.24,chinese,,0,0,0,,这个问题很简单。
Dialogue: 0,1:52:42.24,1:52:43.05,english,,0,0,0,,Now, what do I do?
Dialogue: 0,1:52:42.24,1:52:43.05,chinese,,0,0,0,,现在，我该怎么办？
Dialogue: 0,1:52:43.05,1:52:43.91,english,,0,0,0,,I've just merged.
Dialogue: 0,1:52:43.05,1:52:43.91,chinese,,0,0,0,,我刚刚合并了。
Dialogue: 0,1:52:43.91,1:52:45.04,english,,0,0,0,,So now I sort it.
Dialogue: 0,1:52:43.91,1:52:45.04,chinese,,0,0,0,,所以现在我把它分类。
Dialogue: 0,1:52:45.04,1:52:47.09,english,,0,0,0,,I've just sorted the left half of the right half.
Dialogue: 0,1:52:45.04,1:52:47.09,chinese,,0,0,0,,我刚把左半边和右半边分类。
Dialogue: 0,1:52:47.09,1:52:49.55,english,,0,0,0,,So now I sort the right half of the right half.
Dialogue: 0,1:52:47.09,1:52:49.55,chinese,,0,0,0,,现在我把右半边的右半边排序。
Dialogue: 0,1:52:49.55,1:52:51.59,english,,0,0,0,,So I consider the 0, done.
Dialogue: 0,1:52:49.55,1:52:51.59,chinese,,0,0,0,,因此，我认为 0 已完成。
Dialogue: 0,1:52:51.59,1:52:53.27,english,,0,0,0,,I consider the 3, done.
Dialogue: 0,1:52:51.59,1:52:53.27,chinese,,0,0,0,,我认为这 3 项已经完成。
Dialogue: 0,1:52:53.27,1:52:55.04,english,,0,0,0,,I now merge these two together.
Dialogue: 0,1:52:53.27,1:52:55.04,chinese,,0,0,0,,现在，我将这两者合并在一起。
Dialogue: 0,1:52:55.04,1:52:56.64,english,,0,0,0,,0, of course, comes first.
Dialogue: 0,1:52:55.04,1:52:56.64,chinese,,0,0,0,,当然，0 是第一位的。
Dialogue: 0,1:52:56.64,1:52:58.10,english,,0,0,0,,Then comes the 3.
Dialogue: 0,1:52:56.64,1:52:58.10,chinese,,0,0,0,,然后是 3。
Dialogue: 0,1:52:58.10,1:53:00.68,english,,0,0,0,,And now I'm at the point of the story where
Dialogue: 0,1:52:58.10,1:53:00.68,chinese,,0,0,0,,现在，我的故事到了这样的地步
Dialogue: 0,1:53:00.68,1:53:04.91,english,,0,0,0,,I've sorted the left half of the right half and the right half of the right half.
Dialogue: 0,1:53:00.68,1:53:04.91,chinese,,0,0,0,,我把右半部分的左半部分和右半部分的右半部分进行了分类。
Dialogue: 0,1:53:04.91,1:53:07.53,english,,0,0,0,,So step 3 is merge.
Dialogue: 0,1:53:04.91,1:53:07.53,chinese,,0,0,0,,因此，第三步就是合并。
Dialogue: 0,1:53:07.53,1:53:09.41,english,,0,0,0,,And I'll do it again like we did with Carter.
Dialogue: 0,1:53:07.53,1:53:09.41,chinese,,0,0,0,,我会像对待Carter那样再做一次。
Dialogue: 0,1:53:09.41,1:53:12.32,english,,0,0,0,,All right, 1 and 0, obviously the 0 comes first.
Dialogue: 0,1:53:09.41,1:53:12.32,chinese,,0,0,0,,好吧，1 和 0，显然 0 在前。
Dialogue: 0,1:53:12.32,1:53:14.39,english,,0,0,0,,Now, compare the 1 and the 3.
Dialogue: 0,1:53:12.32,1:53:14.39,chinese,,0,0,0,,现在，比较一下 1 和 3。
Dialogue: 0,1:53:14.39,1:53:16.13,english,,0,0,0,,Obviously, the 1 comes first.
Dialogue: 0,1:53:14.39,1:53:16.13,chinese,,0,0,0,,显然，"1 "是第一位的。
Dialogue: 0,1:53:16.13,1:53:18.59,english,,0,0,0,,Compare the 6 and the 3, obviously the 3.
Dialogue: 0,1:53:16.13,1:53:18.59,chinese,,0,0,0,,比较 6 和 3，显然是 3。
Dialogue: 0,1:53:18.59,1:53:20.30,english,,0,0,0,,And then lastly, the 6.
Dialogue: 0,1:53:18.59,1:53:20.30,chinese,,0,0,0,,最后是 6。
Dialogue: 0,1:53:20.30,1:53:21.89,english,,0,0,0,,So now, where are we?
Dialogue: 0,1:53:20.30,1:53:21.89,chinese,,0,0,0,,现在，我们在哪里？
Dialogue: 0,1:53:21.89,1:53:26.84,english,,0,0,0,,We've taken the left half of the whole thing and sorted it.
Dialogue: 0,1:53:21.89,1:53:26.84,chinese,,0,0,0,,我们已经把整个事情的左半部分整理好了。
Dialogue: 0,1:53:26.84,1:53:29.99,english,,0,0,0,,We then took the right half of the whole thing and sorted it.
Dialogue: 0,1:53:26.84,1:53:29.99,chinese,,0,0,0,,然后，我们把整件事情的右半部分进行了分类。
Dialogue: 0,1:53:29.99,1:53:33.56,english,,0,0,0,,So now we're at, lastly, step 3 for the last time.
Dialogue: 0,1:53:29.99,1:53:33.56,chinese,,0,0,0,,现在，我们最后一次来到第三步。
Dialogue: 0,1:53:33.56,1:53:35.12,english,,0,0,0,,What do we do?
Dialogue: 0,1:53:33.56,1:53:35.12,chinese,,0,0,0,,我们该怎么办？
Dialogue: 0,1:53:35.12,1:53:35.78,english,,0,0,0,,Merge.
Dialogue: 0,1:53:35.78,1:53:40.22,english,,0,0,0,,And so just to be consistent, let me push these down, and let's compare.
Dialogue: 0,1:53:35.78,1:53:40.22,chinese,,0,0,0,,为了保持一致，让我把这些推倒，然后进行比较。
Dialogue: 0,1:53:40.22,1:53:45.23,english,,0,0,0,,Left hand or right hand, noticing that they only make forward progress, none of this back and forth comparisons.
Dialogue: 0,1:53:40.22,1:53:45.23,chinese,,0,0,0,,左手或右手，注意它们只是向前推进，而不是来回比较。
Dialogue: 0,1:53:45.23,1:53:47.27,english,,0,0,0,,2 and 0, of course, the 0.
Dialogue: 0,1:53:45.23,1:53:47.27,chinese,,0,0,0,,2 和 0，当然是 0。
Dialogue: 0,1:53:47.27,1:53:48.86,english,,0,0,0,,So we'll put that in place.
Dialogue: 0,1:53:47.27,1:53:48.86,chinese,,0,0,0,,因此，我们将把它落实到位。
Dialogue: 0,1:53:48.86,1:53:51.14,english,,0,0,0,,2 and 1, of course, the 1.
Dialogue: 0,1:53:48.86,1:53:51.14,chinese,,0,0,0,,2 和 1，当然是 1。
Dialogue: 0,1:53:51.14,1:53:52.88,english,,0,0,0,,So we put that in place.
Dialogue: 0,1:53:51.14,1:53:52.88,chinese,,0,0,0,,因此，我们将其落实到位。
Dialogue: 0,1:53:52.88,1:53:56.93,english,,0,0,0,,2 and 3, we merge in, of course, the 2 in this case.
Dialogue: 0,1:53:52.88,1:53:56.93,chinese,,0,0,0,,2 和 3，我们合并进来，当然，这里是 2。
Dialogue: 0,1:53:56.93,1:54:00.77,english,,0,0,0,,4 and 3, we now merge in the 3 in this case.
Dialogue: 0,1:53:56.93,1:54:00.77,chinese,,0,0,0,,在这种情况下，我们现在将 4 和 3 合并为 3。
Dialogue: 0,1:54:00.77,1:54:05.63,english,,0,0,0,,4 and 6, we now merge, of course, the 4 in place.
Dialogue: 0,1:54:00.77,1:54:05.63,chinese,,0,0,0,,4 和 6，我们现在当然要把 4 合并。
Dialogue: 0,1:54:05.63,1:54:07.76,english,,0,0,0,,And now, we compare 5 and 6.
Dialogue: 0,1:54:05.63,1:54:07.76,chinese,,0,0,0,,现在，我们比较一下 5 号和 6 号。
Dialogue: 0,1:54:07.76,1:54:08.61,english,,0,0,0,,We keep the 5.
Dialogue: 0,1:54:07.76,1:54:08.61,chinese,,0,0,0,,我们保留 5.
Dialogue: 0,1:54:12.59,1:54:15.22,english,,0,0,0,,Bug.
Dialogue: 0,1:54:15.22,1:54:17.29,english,,0,0,0,,OK, well pretend that the 5 is on.
Dialogue: 0,1:54:15.22,1:54:17.29,chinese,,0,0,0,,好吧，那就假装 5 号电池已经启动。
Dialogue: 0,1:54:20.04,1:54:21.45,english,,0,0,0,,Oh, this is why.
Dialogue: 0,1:54:20.04,1:54:21.45,chinese,,0,0,0,,哦，这就是原因。
Dialogue: 0,1:54:21.45,1:54:24.24,english,,0,0,0,,All right, so now we compare the 7 and the 6.
Dialogue: 0,1:54:21.45,1:54:24.24,chinese,,0,0,0,,好了，现在我们来比较一下 7 和 6。
Dialogue: 0,1:54:24.24,1:54:26.43,english,,0,0,0,,6th is gone.
Dialogue: 0,1:54:24.24,1:54:26.43,chinese,,0,0,0,,第 6 个已不复存在。
Dialogue: 0,1:54:26.43,1:54:29.52,english,,0,0,0,,And lastly, 7 is the last one in place.
Dialogue: 0,1:54:26.43,1:54:29.52,chinese,,0,0,0,,最后，7 是最后一个到位。
Dialogue: 0,1:54:29.52,1:54:36.21,english,,0,0,0,,And even though I grant that of all the algorithms, this is probably the hardest one to stay on top of, especially when I'm doing it as a voice over.
Dialogue: 0,1:54:29.52,1:54:36.21,chinese,,0,0,0,,尽管我承认，在所有算法中，这可能是最难掌握的一种，尤其是当我做配音时。
Dialogue: 0,1:54:36.21,1:54:41.01,english,,0,0,0,,Realize that what we've just done is only those three steps, recursively.
Dialogue: 0,1:54:36.21,1:54:41.01,chinese,,0,0,0,,要知道，我们刚才所做的只是这三个递归步骤。
Dialogue: 0,1:54:41.01,1:54:42.51,english,,0,0,0,,We started with a list of size 8.
Dialogue: 0,1:54:41.01,1:54:42.51,chinese,,0,0,0,,我们先列了一份 8 号的清单。
Dialogue: 0,1:54:42.51,1:54:43.65,english,,0,0,0,,We sorted the left half.
Dialogue: 0,1:54:42.51,1:54:43.65,chinese,,0,0,0,,我们整理了左半边。
Dialogue: 0,1:54:43.65,1:54:44.79,english,,0,0,0,,We sorted the right half.
Dialogue: 0,1:54:43.65,1:54:44.79,chinese,,0,0,0,,我们整理了右半边。
Dialogue: 0,1:54:44.79,1:54:46.45,english,,0,0,0,,And then we merge the two together.
Dialogue: 0,1:54:44.79,1:54:46.45,chinese,,0,0,0,,然后，我们将两者合并在一起。
Dialogue: 0,1:54:46.45,1:54:54.97,english,,0,0,0,,But if you go down each of those rabbit holes, so to speak, sorting the left half involves sorting the left half of the left half and the right half of the left half, and so forth.
Dialogue: 0,1:54:46.45,1:54:54.97,chinese,,0,0,0,,但是，如果你沿着每一个兔子洞走下去，可以说左半边的分类涉及到左半边的左半边和右半边的右半边，以此类推。
Dialogue: 0,1:54:54.97,1:55:02.52,english,,0,0,0,,But this germ of an idea of really dividing and conquering the problem, not such that you're having the problem and only dealing with one half.
Dialogue: 0,1:54:54.97,1:55:02.52,chinese,,0,0,0,,但这种想法的萌芽是真正的分而治之，而不是有了问题却只处理一半。
Dialogue: 0,1:55:02.52,1:55:07.78,english,,0,0,0,,Clearly, we're sorting one half and the other half and merging them together, ultimately.
Dialogue: 0,1:55:02.52,1:55:07.78,chinese,,0,0,0,,很明显，我们正在对一半和另一半进行分类，最终将它们合并在一起。
Dialogue: 0,1:55:07.78,1:55:10.81,english,,0,0,0,,It does still lead us to the same solution.
Dialogue: 0,1:55:07.78,1:55:10.81,chinese,,0,0,0,,它仍然会引导我们找到相同的解决方案。
Dialogue: 0,1:55:10.81,1:55:20.31,english,,0,0,0,,And if we visualize the remnants of this now, if I depict this as follows, where on the screen here, you see where the numbers originally started in the top row from left to right.
Dialogue: 0,1:55:10.81,1:55:20.31,chinese,,0,0,0,,如果我们现在将残余的数字可视化，我可以这样描述：在屏幕上，你可以看到最上面一排从左到右的数字。
Dialogue: 0,1:55:20.31,1:55:23.47,english,,0,0,0,,Essentially, even though this is in a different order,
Dialogue: 0,1:55:20.31,1:55:23.47,chinese,,0,0,0,,从本质上讲，尽管顺序不同、
Dialogue: 0,1:55:23.47,1:55:28.70,english,,0,0,0,,I divided that list of size 8, ultimately, into eight lists of size 1.
Dialogue: 0,1:55:23.47,1:55:28.70,chinese,,0,0,0,,最终，我把这份 8 号清单分成了 8 份 1 号清单。
Dialogue: 0,1:55:28.70,1:55:31.00,english,,0,0,0,,And that's where the base case kicked in and just said,
Dialogue: 0,1:55:28.70,1:55:31.00,chinese,,0,0,0,,这就是基础案例的作用所在、
Dialogue: 0,1:55:31.00,1:55:32.58,english,,0,0,0,,OK, we're done sorting that.
Dialogue: 0,1:55:31.00,1:55:32.58,chinese,,0,0,0,,好了，我们整理完了。
Dialogue: 0,1:55:32.58,1:55:41.58,english,,0,0,0,,And after that, logically, I then merged two lists of size 1 into many lists of size 2 and those lists of size 2 into lists of size 4.
Dialogue: 0,1:55:32.58,1:55:41.58,chinese,,0,0,0,,之后，从逻辑上讲，我将两个大小为 1 的列表合并成许多大小为 2 的列表，再将这些大小为 2 的列表合并成大小为 4 的列表。
Dialogue: 0,1:55:41.58,1:55:47.25,english,,0,0,0,,And then finally, the list of size 4 into one big list sorted of size 8.
Dialogue: 0,1:55:41.58,1:55:47.25,chinese,,0,0,0,,最后，将 4 号列表排序为 8 号。
Dialogue: 0,1:55:47.25,1:55:55.62,english,,0,0,0,,And so I put forth this picture with the little line indicators here, because how many times did I divide, divide, divide in half?
Dialogue: 0,1:55:47.25,1:55:55.62,chinese,,0,0,0,,于是，我提出了这幅画，画上有小的线条指示器，因为我分了多少次，分了多少次，分了多少次？
Dialogue: 0,1:55:55.62,1:55:57.36,english,,0,0,0,,Or really double, double, double.
Dialogue: 0,1:55:55.62,1:55:57.36,chinese,,0,0,0,,或者真的是双倍、双倍、双倍。
Dialogue: 0,1:55:57.36,1:56:00.60,english,,0,0,0,,So exponent is the opposite-- spoiler.
Dialogue: 0,1:55:57.36,1:56:00.60,chinese,,0,0,0,,所以指数是相反的--破坏者。
Dialogue: 0,1:56:00.60,1:56:02.61,english,,0,0,0,,How many times did I divide?
Dialogue: 0,1:56:00.60,1:56:02.61,chinese,,0,0,0,,我分了多少次？
Dialogue: 0,1:56:02.61,1:56:04.32,english,,0,0,0,,So three, concretely.
Dialogue: 0,1:56:02.61,1:56:04.32,chinese,,0,0,0,,具体来说，有三个。
Dialogue: 0,1:56:04.32,1:56:12.30,english,,0,0,0,,But if there's eight elements total, and there's n more generally, it really is a matter of dividing and conquering log n times.
Dialogue: 0,1:56:04.32,1:56:12.30,chinese,,0,0,0,,但如果一共有 8 个元素，而一般情况下又有 n 个元素，那就真的是对数 n 次的分与合的问题了。
Dialogue: 0,1:56:12.30,1:56:15.36,english,,0,0,0,,You start this, and you can divide one, two, three times, log n times.
Dialogue: 0,1:56:12.30,1:56:15.36,chinese,,0,0,0,,从这里开始，你可以除以 1、2、3 倍，再除以 log n 倍。
Dialogue: 0,1:56:15.36,1:56:21.06,english,,0,0,0,,Or conversely, you can start here and exponentially double, double, double three times, which is log n.
Dialogue: 0,1:56:15.36,1:56:21.06,chinese,,0,0,0,,或者反过来说，你可以从这里开始，指数式地翻倍、翻倍、再翻倍三次，也就是 log n。
Dialogue: 0,1:56:21.06,1:56:31.38,english,,0,0,0,,But on every row, every shelf, literally, I made a fuss about pointing my hands only from the left to the right, constantly advancing them, such that every time I did those merges,
Dialogue: 0,1:56:21.06,1:56:31.38,chinese,,0,0,0,,但是，在每一排、每一个架子上，我都小题大做，双手只能从左边指向右边，不断地向前推进，以至于每次做这些合并动作时都是如此、
Dialogue: 0,1:56:31.38,1:56:34.50,english,,0,0,0,,I touched every element once and only once.
Dialogue: 0,1:56:31.38,1:56:34.50,chinese,,0,0,0,,每个元素我都只碰过一次。
Dialogue: 0,1:56:34.50,1:56:37.47,english,,0,0,0,,There was none of this back and forth, back and forth on stage.
Dialogue: 0,1:56:34.50,1:56:37.47,chinese,,0,0,0,,舞台上没有这样的来来回回、反反复复。
Dialogue: 0,1:56:37.47,1:56:51.05,english,,0,0,0,,So if I'm doing something log n times, or if I'm doing, rather, n things log n times, what would be our big O formula, perhaps? n things log n times?
Dialogue: 0,1:56:37.47,1:56:51.05,chinese,,0,0,0,,那么，如果我正在做一件事情的对数 n 次方，或者说，如果我正在做 n 件事情的对数 n 次方，我们的大 O 公式会是什么呢？ n 件事情的对数 n 次方？
Dialogue: 0,1:56:51.05,1:56:52.14,english,,0,0,0,,STUDENT: Oh, it's n log n.
Dialogue: 0,1:56:51.05,1:56:52.14,chinese,,0,0,0,,学生：哦，是 n log n。
Dialogue: 0,1:56:52.14,1:56:53.49,english,,0,0,0,,DAVID MALAN: Yeah, so n log n.
Dialogue: 0,1:56:52.14,1:56:53.49,chinese,,0,0,0,,对，所以是 n log n。
Dialogue: 0,1:56:53.49,1:56:58.56,english,,0,0,0,,The order of n log n is, indeed, how we would describe the running time of merge sort.
Dialogue: 0,1:56:53.49,1:56:58.56,chinese,,0,0,0,,事实上，n log n 的阶数就是我们对合并排序运行时间的描述。
Dialogue: 0,1:56:58.56,1:57:10.65,english,,0,0,0,,And so of all of the sorts thus far, we've seen that merge sort here, actually, is n log n, which is strictly better than n squared, which is where both selection sort and bubble sort landed.
Dialogue: 0,1:56:58.56,1:57:10.65,chinese,,0,0,0,,因此，在迄今为止的所有排序中，我们看到这里的合并排序实际上是 n log n，严格来说比 n 平方要好，这也是选择排序和冒泡排序的优势所在。
Dialogue: 0,1:57:10.65,1:57:14.01,english,,0,0,0,,But it's also slower than linear search, for instance.
Dialogue: 0,1:57:10.65,1:57:14.01,chinese,,0,0,0,,但它也比线性查找等慢。
Dialogue: 0,1:57:14.01,1:57:15.39,english,,0,0,0,,But you would rather expect that.
Dialogue: 0,1:57:14.01,1:57:15.39,chinese,,0,0,0,,但你更希望如此。
Dialogue: 0,1:57:15.39,1:57:21.67,english,,0,0,0,,If you have to do a lot of work up front sorting some elements versus just searching them, you're going to have to put in more effort.
Dialogue: 0,1:57:15.39,1:57:21.67,chinese,,0,0,0,,如果你必须在前期做大量工作来分类某些元素，而不是仅仅搜索它们，你就必须付出更多努力。
Dialogue: 0,1:57:21.67,1:57:30.32,english,,0,0,0,,And so the question of whether or not you should just search something blindly with linear search and not bother sorting it, really boils down to, can you afford to spend this amount of time?
Dialogue: 0,1:57:21.67,1:57:30.32,chinese,,0,0,0,,因此，是否应该盲目地使用线性查找来搜索，而不是费力地进行分类，这个问题其实可以归结为：你能花得起这么多时间吗？
Dialogue: 0,1:57:30.32,1:57:35.17,english,,0,0,0,,And if you're the Googles of the world, odds are you don't want to be searching their database linearly every time.
Dialogue: 0,1:57:30.32,1:57:35.17,chinese,,0,0,0,,如果你是全球最大的谷歌公司，你很可能不希望每次都以线性方式搜索他们的数据库。
Dialogue: 0,1:57:35.17,1:57:35.67,english,,0,0,0,,Why?
Dialogue: 0,1:57:35.67,1:57:43.56,english,,0,0,0,,Because you can sort it once and then benefit millions, billions of people, subsequently using something like binary search or, frankly in practice,
Dialogue: 0,1:57:35.67,1:57:43.56,chinese,,0,0,0,,因为你可以对其进行一次排序，然后使用类似二分查找的方法，或者坦率地说，在实践中使用类似二分查找的方法，让数百万、数十亿人受益、
Dialogue: 0,1:57:43.56,1:57:46.44,english,,0,0,0,,something even fancier and faster than binary search.
Dialogue: 0,1:57:43.56,1:57:46.44,chinese,,0,0,0,,比二分查找更先进、更快速的东西。
Dialogue: 0,1:57:46.44,1:57:48.36,english,,0,0,0,,But there's always going to be this trade off.
Dialogue: 0,1:57:46.44,1:57:48.36,chinese,,0,0,0,,但是，这其中总会有这样那样的权衡。
Dialogue: 0,1:57:48.36,1:57:52.14,english,,0,0,0,,You can achieve binary search only if the elements are sorted.
Dialogue: 0,1:57:48.36,1:57:52.14,chinese,,0,0,0,,只有对元素进行排序，才能实现二分查找。
Dialogue: 0,1:57:52.14,1:57:53.94,english,,0,0,0,,How much does it cost you to sort them?
Dialogue: 0,1:57:52.14,1:57:53.94,chinese,,0,0,0,,分类的费用是多少？
Dialogue: 0,1:57:53.94,1:57:56.94,english,,0,0,0,,Well, maybe n squared, if you used some of the earlier algorithms.
Dialogue: 0,1:57:53.94,1:57:56.94,chinese,,0,0,0,,如果使用早期的算法，可能是 n 的平方。
Dialogue: 0,1:57:56.94,1:58:00.85,english,,0,0,0,,But it turns out, n log in is pretty fast as well.
Dialogue: 0,1:57:56.94,1:58:00.85,chinese,,0,0,0,,但事实证明，登录速度也相当快。
Dialogue: 0,1:58:00.85,1:58:06.18,english,,0,0,0,,So at the end of the day, these running times involve trade offs.
Dialogue: 0,1:58:00.85,1:58:06.18,chinese,,0,0,0,,因此，归根结底，这些运行时间是需要权衡的。
Dialogue: 0,1:58:06.18,1:58:12.09,english,,0,0,0,,And indeed, in merge sort 2, I should note that the lower bound on merge sort is also going to be omega of n log n.
Dialogue: 0,1:58:06.18,1:58:12.09,chinese,,0,0,0,,事实上，在合并排序 2 中，我应该注意到合并排序的下限也将是 n log n 的欧米茄。
Dialogue: 0,1:58:12.09,1:58:18.03,english,,0,0,0,,As such, we can describe it in terms of our theta notation, saying that merge sort is, indeed, in theta of n log n.
Dialogue: 0,1:58:12.09,1:58:18.03,chinese,,0,0,0,,因此，我们可以用我们的 θ 符号来描述它，即合并排序确实是在 n log n 的 θ 范围内。
Dialogue: 0,1:58:18.03,1:58:24.03,english,,0,0,0,,So generally speaking, probably better to use something like merge sort or some other algorithm that's n log n.
Dialogue: 0,1:58:18.03,1:58:24.03,chinese,,0,0,0,,所以一般来说，最好使用合并排序或其他 n log n 的算法。
Dialogue: 0,1:58:24.03,1:58:28.20,english,,0,0,0,,In practice, most programmers are not implementing these sorting algorithms themselves.
Dialogue: 0,1:58:24.03,1:58:28.20,chinese,,0,0,0,,实际上，大多数程序员都不会自己实现这些排序算法。
Dialogue: 0,1:58:28.20,1:58:34.20,english,,0,0,0,,Odds are, they're using a library off the shelf that themselves have made the decision as to which of these algorithms to do.
Dialogue: 0,1:58:28.20,1:58:34.20,chinese,,0,0,0,,很有可能，他们正在使用一个现成的库，而这个库本身已经决定了采用其中的哪种算法。
Dialogue: 0,1:58:34.20,1:58:42.75,english,,0,0,0,,But generally speaking, and we're seeing now this for the first time, if you want to improve time, like use less time, write faster code, you've got to pay a price.
Dialogue: 0,1:58:34.20,1:58:42.75,chinese,,0,0,0,,但一般来说，我们现在也是第一次看到，如果你想缩短时间，比如用更少的时间，写更快的代码，你就必须付出代价。
Dialogue: 0,1:58:42.75,1:58:49.08,english,,0,0,0,,And that might be your human time, just takes you more time to code up something more sophisticated, more difficult to implement.
Dialogue: 0,1:58:42.75,1:58:49.08,chinese,,0,0,0,,这可能需要你花费更多时间来编写更复杂、更难实现的代码。
Dialogue: 0,1:58:49.08,1:58:51.84,english,,0,0,0,,Or you need to spend something like space.
Dialogue: 0,1:58:49.08,1:58:51.84,chinese,,0,0,0,,或者你需要花费空间之类的东西。
Dialogue: 0,1:58:51.84,1:58:55.74,english,,0,0,0,,And as these shelves suggest, that too is one of the key details of merge sort.
Dialogue: 0,1:58:51.84,1:58:55.74,chinese,,0,0,0,,正如这些书架所示，这也是合并分类的关键细节之一。
Dialogue: 0,1:58:55.74,1:58:58.50,english,,0,0,0,,You can't just have the elements swapping in place.
Dialogue: 0,1:58:55.74,1:58:58.50,chinese,,0,0,0,,你不能让元素就地交换。
Dialogue: 0,1:58:58.50,1:59:03.96,english,,0,0,0,,You need at least an auxiliary array, so that when you do the merging, you have a place to put them.
Dialogue: 0,1:58:58.50,1:59:03.96,chinese,,0,0,0,,你至少需要一个辅助数组，以便在合并时有地方放置它们。
Dialogue: 0,1:59:03.96,1:59:05.98,english,,0,0,0,,And this is excessive, this amount of memory.
Dialogue: 0,1:59:03.96,1:59:05.98,chinese,,0,0,0,,这样的内存量实在是太大了。
Dialogue: 0,1:59:05.98,1:59:09.03,english,,0,0,0,,I could have just gone back and forth between top shelf and bottom shelf.
Dialogue: 0,1:59:05.98,1:59:09.03,chinese,,0,0,0,,我本可以在顶层和底层之间来回穿梭。
Dialogue: 0,1:59:09.03,1:59:11.11,english,,0,0,0,,But it's a little more interesting to go top down.
Dialogue: 0,1:59:09.03,1:59:11.11,chinese,,0,0,0,,但从上往下看更有趣一些。
Dialogue: 0,1:59:11.11,1:59:12.87,english,,0,0,0,,But you do need more space.
Dialogue: 0,1:59:11.11,1:59:12.87,chinese,,0,0,0,,但你确实需要更大的空间。
Dialogue: 0,1:59:12.87,1:59:15.60,english,,0,0,0,,Back in the day, decades ago, space was really expensive.
Dialogue: 0,1:59:12.87,1:59:15.60,chinese,,0,0,0,,几十年前，太空真的很昂贵。
Dialogue: 0,1:59:15.60,1:59:16.48,english,,0,0,0,,And so you know what?
Dialogue: 0,1:59:15.60,1:59:16.48,chinese,,0,0,0,,你知道吗？
Dialogue: 0,1:59:16.48,1:59:23.23,english,,0,0,0,,It might have been better to not use merge sort, use bubble sort or selection sort even, or some other algorithm altogether.
Dialogue: 0,1:59:16.48,1:59:23.23,chinese,,0,0,0,,如果不使用合并排序，甚至使用冒泡排序或选择排序，或其他算法，可能会更好。
Dialogue: 0,1:59:23.23,1:59:25.30,english,,0,0,0,,Nowadays, space is relatively cheap.
Dialogue: 0,1:59:23.23,1:59:25.30,chinese,,0,0,0,,如今，空间相对便宜。
Dialogue: 0,1:59:25.30,1:59:27.16,english,,0,0,0,,And so these are more acceptable trade offs.
Dialogue: 0,1:59:25.30,1:59:27.16,chinese,,0,0,0,,因此，这些都是比较容易接受的折衷办法。
Dialogue: 0,1:59:27.16,1:59:29.65,english,,0,0,0,,But it totally depends on the application.
Dialogue: 0,1:59:27.16,1:59:29.65,chinese,,0,0,0,,但这完全取决于应用。
Dialogue: 0,1:59:29.65,1:59:34.45,english,,0,0,0,,The very last thing we thought we'd do is show you an actual comparison of some of these sorting algorithms.
Dialogue: 0,1:59:29.65,1:59:34.45,chinese,,0,0,0,,最后，我们想向大家展示一些排序算法的实际比较。
Dialogue: 0,1:59:34.45,1:59:35.80,english,,0,0,0,,It's about 60 seconds long.
Dialogue: 0,1:59:34.45,1:59:35.80,chinese,,0,0,0,,时长约 60 秒。
Dialogue: 0,1:59:35.80,1:59:46.57,english,,0,0,0,,And it will compare for you, selection sort, bubble sort, and merge sort in parallel simultaneously with some fun sorting music, showing you ultimately what it really
Dialogue: 0,1:59:35.80,1:59:46.57,chinese,,0,0,0,,它还会同时为你比较选择排序、冒泡排序和合并排序，并伴有一些有趣的排序音乐，最终向你展示它到底是什么。
Dialogue: 0,1:59:46.57,1:59:52.75,english,,0,0,0,,means to be an O of n squared, or better yet, big O of n log n.
Dialogue: 0,1:59:46.57,1:59:52.75,chinese,,0,0,0,,意味着是 n 平方的 O，或者更好的是 n log n 的大 O。
Dialogue: 0,1:59:52.75,1:59:54.85,english,,0,0,0,,Selection on the top.
Dialogue: 0,1:59:52.75,1:59:54.85,chinese,,0,0,0,,在顶部进行选择。
Dialogue: 0,1:59:54.85,1:59:58.05,english,,0,0,0,,Bubble on the bottom.
Dialogue: 0,1:59:54.85,1:59:58.05,chinese,,0,0,0,,底部有气泡
Dialogue: 0,1:59:58.05,1:59:59.40,english,,0,0,0,,Merge in the middle.
Dialogue: 0,1:59:58.05,1:59:59.40,chinese,,0,0,0,,在中间合并。
Dialogue: 0,1:59:59.40,2:00:01.88,english,,0,0,0,,[MUSIC PLAYING]
Dialogue: 0,2:00:53.66,2:00:55.70,english,,0,0,0,,All right, that's it for CS50.
Dialogue: 0,2:00:53.66,2:00:55.70,chinese,,0,0,0,,好了，CS50 到此为止。
Dialogue: 0,2:00:55.70,2:00:57.91,english,,0,0,0,,We'll see you next time.
Dialogue: 0,2:00:55.70,2:00:57.91,chinese,,0,0,0,,我们下次再见。
